{"version":3,"sources":["webpack:///./src/common/validator/common.js","webpack:///./src/common/utils/file-utils.js","webpack:///./src/views/task-center/page/active-task-management/index.vue","webpack:///src/views/task-center/page/active-task-management/index.vue","webpack:///./src/views/task-center/page/active-task-management/index.vue?31d1","webpack:///./src/views/task-center/page/active-task-management/index.vue?b59b","webpack:///./src/views/task-center/page/active-task-management/index.vue?d795","webpack:///./src/views/task-center/api/api-task-center.js","webpack:///./src/views/task-center/validator/index.js","webpack:///./src/views/task-center/component/portal-dialog/index.vue","webpack:///src/views/task-center/component/portal-dialog/index.vue","webpack:///./src/views/task-center/component/portal-dialog/index.vue?0ad9","webpack:///./src/views/task-center/component/portal-dialog/index.vue?66fc","webpack:///./src/views/task-center/component/portal-dialog/index.vue?b707"],"names":["inputRequiredValidateObj","required","message","trigger","checkRequiredValidateObj","selectRequiredValidateObj","numberAndCharacterValidateObj","pattern","integerValidateObj","msisdnValidateObj","nonSpecialCharValidateObj","nonSpecialCharExceptPercentSignValidateObj","nonSpecialValidateObj","getStrLenValidateObj","minLen","maxLen","len0To18StrValidateObj","len6To16StrValidateObj","len4To12StrValidateObj","len6To12StrValidateObj","len19StrValidateObj","len24StrValidateObj","len64StrValidateObj","len256StrValidateObj","len512StrValidateObj","len1To18StrValidateObj","len0To32StrValidateObj","len0To30StrValidateObj","len9To18StrValidateObj","msg","min","max","len4to0trValidateObj","checkFuzzySearchInput","obj","arr","item","toString","startsWith","length","push","every","checkLengthExceptPercentSign","errorMsg","validator","rule","value","callback","Error","downLoadFile","url","data","method","hasXXSRFTOKEN","xhr","XMLHttpRequest","open","setRequestHeader","cookie","get","responseType","onload","this","status","blob","response","temp","getResponseHeader","split","fileName","decodeURIComponent","zipUrl","URL","createObjectURL","link","document","createElement","href","download","click","MessageBox","alert","type","confirmButtonText","send","JSON","stringify","render","_vm","_c","_self","staticClass","_v","_s","projectObj","title","desc","ref","attrs","searchLoading","formConfigList","dateValidate","formData","on","resetSearch","search","class","isSingleElement","hasPerm","isDisabled","assignEvent","$t","handleCommand","model","sortTime","$$v","expression","_l","sortTimeList","key","label","columns","getTableData","hasPagination","paginationConfig","isSearch","selectionChange","scopedSlots","_u","fn","scope","assignBtnIsShow","row","$event","handleAssign","_e","detailBtnIsShow","handleDetail","style","statusStyle","taskNameDialogVisible","closeDialog","taskNameSearchForm","formRules","dialogTaskNameFormBtnLoading","selectTaskDialogSearch","selectTaskDialogReset","dialogTable","singleChange","taskNameCount","taskNamePageSize","taskNameHasData","handleTaskNameSizeChange","slot","preventDefault","apply","arguments","directives","name","rawName","comfirmTaskNameHandler","selectOperatorDialogVisible","selectOperatorSearchForm","selectOperatorDialogTable","selectOperatorSearchLoading","selectOperatorCloseDialog","selectOperatorDialogReset","comfirmCurrentHandler","assignTaskDialogVisible","assignTaskSearchForm","assignConfigForm","configFormRules","assignTaskDialogTable","$set","assignTaskCloseDialog","assignTaskDialogReset","comfirmAssignHandler","checkChange","checkRadio","staticRenderFns","components","PortalForm","TablePage","PortalDialog","PortalPagination","searchFormPriority","searchFormTaskType","searchFormStatus","taskNo","priority","taskName","taskType","dueTime","startTime","currentHandler","curSelectTaskNameToTaskType","selectOperatorId","tempCurrentHandler","tempOperatorId","prop","align","width","__slotName","fixed","checkLists","checkNums","tempCheckList","assignDialigSelectData","total","pageIndex","pageSize","taskNameSearchFormData","isSingleCheck","taskNameSearchLoading","tempTaskName","handlerNewSearchType","selectOperatorSearchFormData","userName","firstName","middleName","lastName","operatorType","shortCode","tempData","tempConfig","formItemClass","comp","bind","clearable","placeholder","taskNameDialogList","onSelectionChange","assignTaskSearchFormData","newSearchType","switchText","assignConfigFormData","resetDueTime","comments","pickerOptions","onPick","maxDate","minDate","disabledDate","delegateRoleSearchFormConfigList","options","delegateRoleSearchFormData","roleName","roleCategory","tempAssignTableCol","shortCodeConfig","computed","slots","icon","underline","event","format","sameGroup","isShow","change","created","dayjs","watch","handler","deep","methods","emptyQuery","resolve","header","success","list","totalRecords","dictCodes","taskTypeCodetoLabel","taskTypeCondition","taskNameCondition","switchTextChange","val","getCurrentHandlerData","selectType","pageNo","queryCurrentHandler","then","res","catch","operatorName","getAssignTableDate","selectOperator","selectTaskName","toLocaleLowerCase","map","resConverseList","receiveObj","category","description","workflowName","creationTime","initiator","processId","adminFlag","processFlag","taskState","formURL","viewFlag","tskType","taskId","ownerId","createTimeFrom","createTimeTo","sortingMode","taskVO","assignDialigSelectChange","path","query","selectTaskNameDialogReset","Object","qeuryRoleData","queryRole","assigneeType","roleId","operatorId","batchProcess","actionType","isResetExpireTime","isBatch","processList","assignee","component","queryMyToDoTask","request","queryGroupTask","queryTaskName","queryWorkFlowName","queryOrgCurrentHandler","queryActiveTask","queryHistoryTask","queryMyInitiatedTask","queryWorkFlowDataDict","queryTaskDetail","searchTransactionByOrderId","queryDetail","queryOrgOperatorDetail","receiverId","changeStatus","queryBulkSpecificInfo","buildUrlWithObj","queryValidRecords","params","kycDetails","queryLanguageList","queryBackToInitiator","queryBackKycToInitiator","querySubscribeProductsForWorkFlow","nonSpecialCharValidate","sTime","Date","getTime","eTime","endTime","result","taskHistoryRules","workflowId","remark","dateValidateRule","groupTaskRulus","operation","isOverflowHeight","visible","closeOnClickModal","handleClose","openedDialog","closedDialog","_t","staticStyle","dialogSearchFormVisibility","needSearchFormBottomLine","searchForm","needSearchOperateBtn","smallAutoColumn","bigAutoColumn","enterEvent","reset","dialogTableVisibility","isCheck","tableIsSearch","idKey","configFormBottomLine","dialogConfigFormVisibility","configForm","needOperateBtn","configSmall","configBig","handleCancelClick","cancelText","handleConfirmClick","confirmText","props","default","dialogVisible","validate","immediate"],"mappings":"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I,GAAG,WAAW,IAAI,MAAM,IAAI,MAExgNuF,EAAkB,G,6FCqMP,GACfrB,4BACAsB,YACAC,kBACAC,iBACAC,oBACAC,yBAEArI,OACA,OACA2C,YACAC,gDACAC,+CAEAG,iBACAsF,qBAAAjE,YAAA1E,WACA4I,qBAAAlE,YAAA1E,WACA6I,mBAAAnE,YAAA1E,WACAwD,UACAsF,UACAC,YACAC,YACAC,YACAhI,UACAiI,WACAC,aACAC,mBAEA7F,8BACA8F,+BACAC,oBACA9E,gBACAJ,YACAmF,sBACAC,kBACA7E,SACA,CACAD,mCACA+E,cACAC,aACAC,eAEA,CACAjF,wCACA+E,mBACAC,aACAC,eAEA,CACAjF,qCACA+E,gBACAC,aACAC,eAEA,CACAjF,yCACA+E,oBACAE,cACAD,aACA,qBACA,oCAGA,CACAhF,oCACA+E,eACAE,cACAD,aACA,qBACA,0BAGA,CACAhF,oDACA+E,iBACAC,aACAC,eAEA,CACAjF,gDACA+E,cACAC,aACAC,cACAC,wBACA,qBACA,wBAGA,CACAlF,yDACA+E,sBACAC,aACAC,eAEA,CACAjF,qCACA+E,gBACAC,aACAC,eAEA,CACAjF,mDACA+E,iBACAC,aACAC,cACAC,uBACAC,gBAGAC,cACAC,aACAC,iBACAC,0BACApF,iBACAC,kBACAoF,QACAC,YACAC,aAEArF,YACAe,yBACAI,gCACAmE,wBACArB,YACAC,aAEA5C,aACA1B,SACA,CACAD,qCACA+E,gBACAC,cAEA,CACAhF,qCACA+E,gBACAC,eAGA3E,YACAuF,iBACAzF,iBACAD,oCACA0B,kCAEAC,gBACAE,mBACAD,mBACA+D,yBACAC,gBACAC,wBACAtD,+BACAE,2BACA1C,SACA,CACAD,qCACA+E,gBACAC,cAEA,CACAhF,sCACA+E,iBACAC,cAEA,CACAhF,uCACA+E,kBACAC,cAEA,CACAhF,qCACA+E,gBACAC,eAGA3E,YACAF,iBACAyF,iBACA1F,wCACAE,kBACAoF,QACAC,YACAC,YAEA9D,kCAEAgB,+BACAoD,8BACAC,YACAC,aACAC,cACAC,YACAC,gBACAC,cAEA/E,2BACAmC,sBACA6C,YACAC,YACAxG,oDACAyG,0BACA1G,gBACAgF,iBACA2B,gBACAC,MACAC,aACAC,kDAGAC,sBACA9D,2BACAI,uBACAnD,SACA,CACAD,qCACA+E,gBACAC,cAEA,CACAhF,sCACA+E,iBACAC,cAEA,CACAhF,uCACA+E,kBACAC,cAEA,CACAhF,qCACA+E,gBACAC,eAGA3E,YACAF,iBACAD,qCACAE,kBACAoF,QACAC,YACAC,YAEAqB,iDAEAC,0BACAf,YACAC,aACAC,cACAG,aACAF,YACAC,iBAEAY,iBACAC,gBACAC,sBACAC,gBACAC,aAEAlE,iBACAiE,eAAA3O,YAAAC,uBAAAC,mBACA0O,WAAA5O,YAAAC,mCAAAC,kBAEA2O,eACAC,SAAAC,UAAAC,cACA,4BACA,IACA,qBAGAC,iBACA,yBACA,eACA,oBACA,oBACA,uCAIAC,kCACA,CACA3H,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,yCACAD,mBACAgF,oBACA2B,iBACAkB,SACA,CACAtM,SACA0E,aAEA,CACA1E,aACA0E,+BAEA,CACA1E,aACA0E,sBAEA,CACA1E,aACA0E,eAEA,CACA1E,aACA0E,aAGA2G,MACAC,aACAC,oDAIAgB,4BACAC,YACAC,iBAEAC,sBACAC,iBACAjI,yCACAyG,0BACA1G,gBACAgF,iBACA2B,gBACAC,MACAC,aACAC,oDAKAqB,UACA7I,aACA,kCAEAT,iBACA,OACA,CACAoB,mCACAyG,uBACA1G,aACAgF,cACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,iBACAkB,gCACAjB,MACAE,kDAGA,CACAJ,+BACAzG,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,kDAEAsB,OACA,CACAzB,eACApE,cACApD,wBACAyH,MACAyB,oBACAC,cAEAC,OACA/K,WACA,8BACA,2EACA,kCAMA,CACAyC,qCACAD,eACAgF,gBACA2B,iBACAkB,gCACAjB,MACAE,kDAGA,CACAJ,+BACAzG,yDACAD,qBACAgF,sBACA2B,gBACAC,MACAC,aACAC,kDAEAsB,OACA,CACAzB,eACApE,cACApD,wBACAyH,MACAyB,oBACAC,cAEAC,OACA/K,WACA,oCACA,4DACA,gDAMA,CACAyC,mCACAD,aACAgF,cACA2B,iBACAkB,8BACAjB,MACAE,mDAGA,CACAJ,yBACAzG,oCACA+E,eACAhF,cACA2G,sBACAC,MACAjJ,gBACA6K,6BACA,qCACA1B,mDAGA,CACA7G,yCACAyG,sCACA+B,aACAzD,iBACA2B,MACA,CACA3G,gBACA2G,sBACAC,MACAE,gDACA7B,cACAtH,qBACA,oCACA6K,6BACA,sBACA,qCACA,uCACA,oCACA,oCAGA,CACA7B,SACAxH,oCAMAoC,qBACA,OACA1C,gBACA,CACAoB,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,iBACAkB,gCACAjB,MACAC,aACAC,oDAIA/H,uCAGA4D,2BACA,OACA9D,gBACA,CACAoB,yCACAD,mBACAgF,oBACA2B,iBACAkB,SACA,CACAtM,oBACA0E,+BAEA,CACA1E,mBACA0E,sBAGA2G,MACAE,mDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,sCACAD,gBACAgF,iBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,uCACAD,iBACAgF,kBACA2B,gBACAD,eACAgC,WAEA9B,MACAC,aACAC,kDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,mDAIA/H,6CAGAmE,uBACA,mCACA,CACArE,gBACA,CACAoB,yCACAD,mBACAgF,oBACA2B,iBACAkB,SACA,CACAtM,oBACA0E,+BAEA,CACA1E,mBACA0E,sBAGA2G,MACAE,mDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,sCACAD,gBACAgF,iBACA2B,gBACAC,MACAC,aACAC,kDAGA,CACA7G,uCACAD,iBACAgF,kBACA2B,gBACAD,eACAgC,WAEA9B,MACAC,aACAC,kDAGA,CACA7G,qCACAD,eACAgF,gBACA2B,gBACAC,MACAC,aACAC,mDAIA/H,wCAGA,CACAF,qDACAE,2CAIAoE,mBACA,OACAtE,gBACA,CACAoB,uDACAD,mBACAgF,oBACA2B,iBACAC,MACA,8BACAC,aACAC,iDAEAyB,OACAI,+BAGA,CACAjC,gCACAzG,mDACAD,eACAgF,gBACA2B,gBACAC,MACAjJ,gBACAkJ,aACAC,mDAIA/H,sCAIA6J,UACA,yBACAC,IACA,oFACA,8BACAA,+FAEA,0BAEAC,OACA7C,8BACA8C,WACA,+BACA,0DACA,6BACA,0EAGA,0DACA,6BACA,0DAGA,kBACA,sFAGAC,SAEA/B,0BACA8B,WACA,+BACA,sDACA,sBACA,2EAGA,sDACA,sBACA,sDAGA,kBACA,8EAGAC,SAEAhD,wBACA,GACA,4DACA,kDACA,oBACA,6EAGA,wEAGAkB,iBACA,GACA,wDACA,uCACA,oBACA,uEAGA,iEAGAnI,UACAgK,WACA,gDACA,4BAEAC,SAEAlB,4BACAiB,UACA,yCACA,6DAEA,mEAGAC,UAGAC,SACAC,aACA,uBACA,uCACAC,GACAC,QAAAC,YACAC,QACAC,oBAIAnI,eACA,iBACA,iBACA,0EACA,aACA,qFACA,gBACA,2EACA,QACA,QAGAlC,SACA,sCACA,IACA,sBACA,qBAIA,0BACA,4BACAsK,WACA,sCACA,gBACA,+BACA,yBAGA,6BACA,gFACA,0CACA,iCAAAvJ,YAAA1E,WAEA,0DACA,uEACA,wCACA,+BAAA0E,YAAA1E,WAEA,0DACA,qCAGA0D,cACA,uCACA,yBACA,kBAEA,0BACA,SACA,KACA,iCACA,kDAEA,OADAwK,WACA,IAGA,GACA,YAEAC,EADA,6BACAA,wBAEAA,sCAIA,OACAC,uDACAD,qBAEA,0BAGA,GAFA,qCACA,6BACA,yCACA,yCACA,wBACA,6BACA7O,sBACA,IAGA,OADA,0BACA,CACAuO,QAAAC,YACAC,uCAGA,OAAAF,QAAAC,cAEAO,oBACAC,8BAEAnI,yBACA,6BACA,sCAEAC,wBACA,4CACA,8BAEAM,4BACA,kBACA,aACA,iCACA,qEACA,4BACA,+BAGA6H,wBACA,uBACA,OACAxD,gBACAyD,sBACAvN,YACA0J,oDACAC,sDACAC,wDACAC,oDACA2D,iEACArE,mEAEAsE,kBACAC,SAOA,GANA,oCACA,2CACAC,sBACAtP,kBACA,IAEA,2BACA,UACAuO,gBACAE,YACAC,uBAGA,6CAGAa,WACA,oCACAjB,GACAC,QAAAC,mBAKA,iCACA,OACA9C,sDACA8D,wDACAN,sBACAzD,gBACA9J,YACAwN,iEACArE,mEAEA,0BAGA,GAFA,oCACA,2CACA,4BACA,qBAEA9K,kBACA,IAEA,OACAuO,gBACAE,OACAC,0BAGA,OAAAH,QAAAC,cAEAiB,qBACA,uBACA,OACAhE,gBACA9J,YACAuN,sBACA7D,gDACAC,kDACAC,oDACAC,gDACA2D,6DACArE,+DAEAsE,2BAEA,GADA,uCACA,2BAIA,OAHAE,uBACAA,4BAEA,GACAf,gBACAE,YACAC,uBAGA,4CAKA,+BACA,OACAhD,kDACA8D,oDACAN,sBACAzD,gBACA9J,YACAwN,6DACArE,+DAEA,0BAEA,GADA,uCACA,4BACA,oBAEA,GAEA,OACAyD,gBACAE,OACAC,0BAGA,OAAAH,QAAAC,cAEA9I,mBACA,iBACA,mBAEAgK,kBACA,0BACA,mCACA,kCAEAC,kBACA,qBAEA/H,yBACA,qCACA,6BAEA,YADA,yDAIA,0CAEA,YADA,oDAKA,GADA,kDACA,qDACA,gDACA,+DAEA,+BACA,iCACAgI,oBACA5N,WACA6N,OACA,0CAEA,mCACA,6CAGA,+BAEA1H,wBACA,2CACA,mCAEA,YADA,yDAIA,gDAEA,YADA,oDAIA,8DACA,2BACA,2CACA,qCAEA2H,qBACAC,iBACA,SAEAtG,EADA,uBACAA,OACA,uBACAA,SAEAA,MAEA,8BACA,kBACA,kCACA,0BACA,kBACA,kCACA,KAOA,OANA,iCACA,wBAEA,OADAuG,WACA,IAGA,CACAxG,gBACAyG,uBACAC,yBACAzG,WACA0G,eACAvG,UACAwG,0BACAtG,2BACAH,WACAhI,mBACA0O,sBACAC,sBACAC,0BACAC,sBACAC,kBACAC,wBAIA,qBACA,SACA,gCACA,iCACA,oCAEA,OADAC,WACA,IAIAA,yBAEA,OACAlH,sCACAmH,4BACAlH,gCACAsG,WACAa,8BACAlP,kCACAiI,oCACAuF,uCACA2B,0CACAC,wCACAC,gDACAlG,yCAEA,wBAAAmG,WAGA,GAFA,iBACA,sBACA,2BACA,+BACA,sBACA3B,uBACA,wCACA,yBACA,sCACA,IAEA,sCACA,IAGA,CACAf,gBACAE,UAKAyC,4BACA,+BAEAnL,mBACA,2CAEAK,mBACA,0CAEAC,gBACA,oBAAA8K,cAAAC,WAEAlL,gBACA,2BACA,8CAEA,wBACA,wDACA,iCAEAO,cACA,4CACA,+BAEA4K,4BACA,wEACA,8BAEAnJ,4BACA,wEACA,6BACAoJ,4FACA,2EAEA,iEACA,oBACA,8CAGArJ,4BACA,oCACA,uBACA,2BACA,kCAEAsJ,gBACA,OACArC,kBACAhC,kDACAC,0DACAgC,6DACArE,+DAEA,uBACA0G,kBACAnC,SAEA,GADA,uCACA,4BACA,qBAEA,OADArP,cACA,YACA,WACAA,6BACA,MACA,WACAA,uCACA,MACA,WACAA,8BACA,MACA,WACAA,uBACA,MACA,WACAA,oBACA,MACA,QACA,MAEA,WAEA,+CACA2L,cACA3L,oEAGAsO,GACAC,gBACAE,cACA,yDACA,qDACA,qDACA,uDAEAC,2BAIAa,WACA,uCACAjB,GACAC,QAAAC,mBAKA3F,eACA,YACA,2FACA,oCACA,CACAzD,iCACA+E,gBACAC,cAEA,CACAhF,wCACA+E,mBACAC,cAEA,CACAhF,yCACA+E,oBACAC,eAGA,2DACA,oBACA,2CAGA,2DACA,gEACA,+BAGAxF,iBACA,gBACA,kBAEAF,cACA,6BACA,6BACA,yBAEA,kBAEA,YADA,2GAGA,wDACA,qCAEA,uDAGAgE,wBACA,gEACA,8BACA,0BACA,8CAEA,gCACA,8BAEAC,wBACA,gEACA2I,oFACA,mEAEA,uCACA,6BACA,6DACA,oBACA,4CACA,0CAGA1I,uBAEA,+DACA,MACA,0CAEA,YADA,oDAGA,+BACA,0BA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M,OACAvH,YACA0T,iBAEAJ,YACAtT,YACA0T,kBAEAF,aACAxT,YACA0T,mBAEArB,YACArS,YACA0T,cAEA7P,WACA7D,YACA0T,kBAEAzS,eACAjB,aACA0T,YAEAnB,iBACAvS,YACA0T,UACAE,cACA,OAGApB,eACAxS,YACA0T,UACAE,cACA,OAGAnB,YACAzS,cACA0T,gBAGAzP,aACAjE,YACA0T,kBAGAT,YACAjT,YACA0T,kBAEAjO,iBACAzF,YACA0T,kBAEAtB,0BACApS,aACA0T,YAEAX,sBACA/S,aACA0T,aAGAzV,OACA,OACA2T,aAGApH,UACA2H,6BACA,gDACA,yCAEAa,6BACA,gDACA,yCAEAL,wBACA,+DAEAL,uBACA,kDAEA,gCAMAY,iBACA,wCACA,gCAKAL,gBACA,mCAMA3K,gBACA,wCAMAmB,oBACA,0CACA,mCAEA,QAGAnF,eACA,qCACA,8BAEA,SAIAiH,OACAwI,eACAvI,WACA,gBAEAyI,cAEAjC,SACAxG,WACA,4BACA,wCAIAE,SACAwG,cACA,iBAEAuB,oBACA,gCAEAE,qBACA,iCAEAvB,eACA,6BAEAD,eACA,6BAEAW,QACA,4BAEAnR,SACA,yCACA,IACA,6BACA,4CCnQ4X,I,wBCQxX6N,EAAY,eACd,EACA/O,EACA4F,GACA,EACA,KACA,WACA,MAIa,OAAAmJ,E,2CCnBf","file":"js/chunk-0ab9f805.js","sourcesContent":["let inputRequiredValidateObj = {\n  required: true,\n  message: 'Please enter content',\n  trigger: 'blur',\n};\n\nlet checkRequiredValidateObj = {\n  required: true,\n  message: 'Please check content',\n  trigger: 'blur',\n};\n\nlet selectRequiredValidateObj = {\n  required: true,\n  message: 'Please select content',\n  trigger: 'change',\n};\n\nlet zeroAndPositiveNumberValidateObj = {\n  pattern: /^\\+?[0-9]*(\\.[0-9]*)?$/,\n  message: 'enter a non-nagative integer',\n  trigger: 'blur',\n};\n\nlet numberAndCharacterValidateObj = {\n  pattern: /^[0-9a-zA-Z]*$/,\n  message: 'Must be number and letters.',\n  trigger: 'blur',\n};\n\nlet integerValidateObj = {\n  pattern: /^[+-]?[0-9]*$/,\n  message: 'Must be integer number.',\n  trigger: 'blur',\n};\nlet msisdnValidateObj = {\n  pattern: /[0-9]{4}/,\n  message: 'The MSISDN must contain at least 4 dligits',\n  trigger: 'blur',\n};\n\nlet phoneNumberRuleObj = {\n  pattern: /^((13[5-9])|(1[4-9][0-9]))[0-9]{8}$/,\n  message: 'The regular expression is ^((13[5-9])|(1[4-9][0-9]))[0-9]{8}$.',\n  trigger: 'blur',\n};\n\nlet emailRuleObj = {\n  pattern: /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/,\n  message: 'The regular expression is ^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$.',\n  trigger: 'blur',\n};\n\nlet emailValidateObj = {\n  type: 'email',\n  message: 'Invalid email address.',\n  trigger: 'blur',\n};\n\nlet nonSpecialCharValidateObj = {\n  pattern: /^[^@~`！!#$%^*（）()\\-+=|,/<>《》?？;':\\\"“\\[\\]{}\\\\&]*$/,\n  message: 'Cannot contain special characters (~`!#$%^*()-+=|,/<>?;\\':\"[]{}\\\\&)',\n  trigger: 'blur',\n};\n\nlet nonSpecialCharExceptPercentSignValidateObj = {\n  pattern: /^[^@~`！!#$^*（）()\\-+=|,/<>《》?？;':\\\"“\\[\\]{}\\\\&]*$/,\n  message: 'Cannot contain special characters (~`!#$^*()-+=|,/<>?;\\':\"[]{}\\\\&)',\n  trigger: 'blur',\n};\n\nlet nameValidateObj = {\n  pattern: /^[a-zA-Z][\\s\\w.-]*$/,\n  message: 'The regular expression is ^[a-zA-Z][\\\\s\\\\w.-]*$',\n  trigger: 'blur',\n};\nlet nonSpecialValidateObj = {\n  pattern: /^[\\w- ]+$/,\n  message: 'Please do not enter any special characters.',\n  trigger: 'blur',\n};\n\nexport {\n  inputRequiredValidateObj,\n  zeroAndPositiveNumberValidateObj,\n  checkRequiredValidateObj,\n  numberAndCharacterValidateObj,\n  selectRequiredValidateObj,\n  emailValidateObj,\n  nonSpecialCharValidateObj,\n  nameValidateObj,\n  phoneNumberRuleObj,\n  emailRuleObj,\n  integerValidateObj,\n  msisdnValidateObj,\n  nonSpecialCharExceptPercentSignValidateObj,\n  nonSpecialValidateObj,\n};\n\nexport const len0To11StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 11,\n});\nexport const len0To18StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 18,\n});\n\nexport const len3To3StrValidateObj = getStrLenValidateObj({\n  minLen: 3,\n  maxLen: 3,\n});\n\nexport const len6To16StrValidateObj = getStrLenValidateObj({\n  minLen: 6,\n  maxLen: 16,\n});\n\nexport const len8To10StrValidateObj = getStrLenValidateObj({\n  minLen: 8,\n  maxLen: 10,\n});\nexport const len8To11StrValidateObj = getStrLenValidateObj({\n  minLen: 8,\n  maxLen: 11,\n});\n\nexport const len4To12StrValidateObj = getStrLenValidateObj({\n  minLen: 4,\n  maxLen: 12,\n});\n\nexport const len6To12StrValidateObj = getStrLenValidateObj({\n  minLen: 6,\n  maxLen: 12,\n});\n\nexport const len19StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 19,\n});\n\nexport const len24StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 24,\n});\n\nexport const len64StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 64,\n});\n\nexport const len100StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 100,\n});\n\nexport const len256StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 256,\n});\n\nexport const len512StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 512,\n});\n\nexport const len8To50StrValidateObj = getStrLenValidateObj({\n  minLen: 8,\n  maxLen: 50,\n});\nexport const len1To18StrValidateObj = getStrLenValidateObj({\n  minLen: 1,\n  maxLen: 18,\n});\n\nexport const len0To32StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 32,\n});\n\nexport const len0To30StrValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 30,\n});\n\nexport const len9To18StrValidateObj = getStrLenValidateObj({\n  minLen: 9,\n  maxLen: 18,\n});\n\nexport const len256to2StrValidateObj = getStrLenValidateObj({\n  minLen: 2,\n  maxLen: 256,\n});\n\n/**\n * 获取字符串校验对象\n * @param {minLen, maxLen} 最小，最大长度\n */\nexport function getStrLenValidateObj({ minLen = 0, maxLen = 100 }) {\n  let msg = '';\n  if (minLen > 0) {\n    msg = `Must be between ${minLen} and ${maxLen} characters`;\n  } else {\n    msg = `Must be less than ${maxLen} characters`;\n  }\n  return {\n    min: minLen,\n    max: maxLen,\n    message: msg,\n    trigger: 'blur',\n  };\n}\n\nexport const len4to0trValidateObj = getStrLenValidateObj({\n  minLen: 0,\n  maxLen: 4,\n});\n\n// 将路径表达式转换取值方法\nexport function parsePath(path) {\n  const arr = path.split('.');\n  return function (data) {\n    for (const key of arr) {\n      if (!data) {\n        return;\n      }\n      data = data[key];\n    }\n    return data;\n  };\n}\n\n// 校验模糊查询是否输入了内容\nexport function checkFuzzySearchInput(obj) {\n  let arr = [];\n  for (let item in obj) {\n    if ((obj[item] && obj[item].toString().startsWith('%') && obj[item].length === 1) || !obj[item]) {\n      arr.push(false);\n    } else {\n      arr.push(true);\n    }\n  }\n  if (arr.every((item) => item === false)) {\n    return false;\n  }\n  return true;\n}\n\nexport function checkLengthExceptPercentSign(errorMsg) {\n  return {\n    validator: (rule, value, callback) => {\n      if (value && value.startsWith('%') && value.length === 1) {\n        callback(new Error(`${errorMsg}`));\n      } else {\n        callback();\n      }\n    },\n    trigger: 'blur',\n  };\n}\n\nexport function checkmsisdnLengthExceptPercentSign() {\n  return {\n    validator: (rule, value, callback) => {\n      if (value && value.startsWith('%') && value.length <= 4) {\n        callback(new Error('The MSISDN must contain at least 4 digits.'));\n      } else {\n        callback();\n      }\n    },\n    trigger: 'blur',\n  };\n}\n","import cookie from './cookie';\nimport { MessageBox } from 'element-ui';\n\nexport default {\n  downLoadFile: function (url, data, method, hasXXSRFTOKEN) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method || 'POST', url, true);\n    xhr.setRequestHeader('Content-type', 'application/json');\n    if (hasXXSRFTOKEN) {\n      xhr.setRequestHeader('X-XSRF-TOKEN', cookie.get('O-XSRF-TOKEN'));\n    }\n    xhr.setRequestHeader('o-token', cookie.get('o-token'));\n    xhr.setRequestHeader('Cache-Control', 'no-store, max-age=0, must-revalidate');\n    xhr.responseType = 'blob'; // 返回类型blob\n    xhr.onload = function () {\n      // 定义请求完成的处理函数，请求前也可以增加加载框/禁用下载按钮逻辑\n      if (this.status === 200) {\n        let blob = this.response;\n        let temp = xhr.getResponseHeader('content-disposition').split(';')[1].split('filename=')[1];\n        let fileName = decodeURIComponent(temp);\n        let zipUrl = URL.createObjectURL(blob);\n        let link = document.createElement('a');\n        link.href = zipUrl;\n        link.download = fileName;\n        link.click();\n      } else {\n        MessageBox.alert('Download failed.', 'Error', { type: 'error', confirmButtonText: 'Confirm' });\n      }\n    };\n    xhr.send(JSON.stringify(data));\n  },\n};\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"active-task-management-container\"},[_c('div',{staticClass:\"page-header\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.projectObj.title))]),_c('div',{staticClass:\"desc\"},[_vm._v(_vm._s(_vm.projectObj.desc))])]),_c('div',{staticClass:\"page-content\"},[_c('portal-form',{ref:\"searchFormRef\",attrs:{\"searchBtnLoading\":_vm.searchLoading,\"form-config-list\":_vm.formConfigList,\"formRules\":_vm.dateValidate,\"form-data\":_vm.formData},on:{\"reset-btn-click\":_vm.resetSearch,\"search-btn-click\":_vm.search}}),_c('div',{staticClass:\"table-container\"},[_c('div',{staticClass:\"table-operate-header\",class:{ isSingleElement: !_vm.hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN') }},[_c('el-button',{attrs:{\"disabled\":_vm.isDisabled || !_vm.hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN'),\"size\":\"small\",\"type\":\"primary\"},on:{\"click\":_vm.assignEvent}},[_vm._v(_vm._s(this.$t('TAC.activeTaskManagement.assign')))]),_c('div',{staticClass:\"right-btn\"},[_c('el-select',{attrs:{\"size\":\"small\",\"clearable\":false,\"placeholder\":_vm.$t('common.placeholder.sortBy') + ''},on:{\"change\":_vm.handleCommand},model:{value:(_vm.sortTime),callback:function ($$v) {_vm.sortTime=$$v},expression:\"sortTime\"}},_vm._l((_vm.sortTimeList),function(item){return _c('el-option',{key:item.label,attrs:{\"value\":item.value,\"label\":item.label}})}),1)],1)],1),_c('table-page',{ref:\"workflowTableRef\",staticClass:\"initiated-workflow-table\",attrs:{\"idKey\":\"taskNo\",\"isCheck\":true,\"columns\":_vm.columns,\"sortArr\":['creationTime', 'dueTime'],\"getTableData\":_vm.getTableData,\"has-pagination\":_vm.hasPagination,\"pagination\":_vm.paginationConfig,\"is-search\":_vm.isSearch},on:{\"selection-change\":_vm.selectionChange},scopedSlots:_vm._u([{key:\"operation\",fn:function(scope){return [(_vm.assignBtnIsShow(scope.data.row))?_c('el-button',{attrs:{\"disabled\":!_vm.hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN'),\"type\":\"text\"},on:{\"click\":function($event){return _vm.handleAssign(scope.data.row)}}},[_vm._v(\" \"+_vm._s(_vm.$t('TAC.activeTaskManagement.assign'))+\" \")]):_vm._e(),(_vm.detailBtnIsShow(scope.data.row))?_c('el-button',{attrs:{\"disabled\":!_vm.hasPerm('WF_MYTASK_ADMINTASK_VIEW_BTN'),\"type\":\"text\"},on:{\"click\":function($event){return _vm.handleDetail(scope.data.row)}}},[_vm._v(_vm._s(_vm.$t('common.label.detail')))]):_vm._e()]}},{key:\"taskStatus\",fn:function(scope){return [_c('div',{staticClass:\"flex flex-align\"},[_c('span',{staticClass:\"status-circle\",style:(_vm.statusStyle(scope.data.row))}),_c('span',[_vm._v(_vm._s(scope.data.row.status))])])]}}])})],1)],1),_c('div',{staticClass:\"page-dialog\"},[_c('el-dialog',{ref:\"selectTaskNameDialogRef\",attrs:{\"title\":\"Select Task Name\",\"width\":\"800px\",\"visible\":_vm.taskNameDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.closeDialog},on:{\"update:visible\":function($event){_vm.taskNameDialogVisible=$event},\"closed\":_vm.closeDialog}},[_c('portal-form',{ref:\"dialogTaskNameForm\",staticClass:\"dialogTaskNameForm\",attrs:{\"form-config-list\":_vm.taskNameSearchForm.formConfigList,\"form-data\":_vm.taskNameSearchForm.formData,\"formRules\":_vm.formRules,\"needOperateBtn\":true,\"searchBtnLoading\":_vm.dialogTaskNameFormBtnLoading,\"smallAutoColumn\":2,\"bigAutoColumn\":2},on:{\"search-btn-click\":_vm.selectTaskDialogSearch,\"reset-btn-click\":_vm.selectTaskDialogReset}}),_c('table-page',{ref:\"taskNameTableRef\",attrs:{\"columns\":_vm.dialogTable.columns,\"getTableData\":_vm.dialogTable.getTableData,\"is-search\":_vm.dialogTable.isSearch,\"is-check\":true,\"isSingleCheck\":true},on:{\"single-selection-change\":_vm.dialogTable.singleChange}}),_c('div',{staticClass:\"dialog-pagination\"},[_c('portal-pagination',{ref:\"taskNameDialogPageRef\",attrs:{\"total\":_vm.taskNameCount,\"pageSize\":_vm.taskNamePageSize,\"hidden\":_vm.taskNameHasData},on:{\"pagination\":_vm.handleTaskNameSizeChange}})],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.closeDialog.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.comfirmTaskNameHandler}},[_vm._v(_vm._s(this.$t('common.button.confirm')))])],1)],1),_c('portal-dialog',{ref:\"selectOperatorDialogRef\",staticClass:\"select-operator-dialog\",attrs:{\"title\":\"Select Operator\",\"dialogVisible\":_vm.selectOperatorDialogVisible,\"searchForm\":_vm.selectOperatorSearchForm,\"needSearchFormBottomLine\":true,\"dialogTable\":_vm.selectOperatorDialogTable,\"formRules\":_vm.formRules,\"searchLoading\":_vm.selectOperatorSearchLoading},on:{\"update:dialogVisible\":function($event){_vm.selectOperatorDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.selectOperatorDialogVisible=$event},\"update:searchLoading\":function($event){_vm.selectOperatorSearchLoading=$event},\"update:search-loading\":function($event){_vm.selectOperatorSearchLoading=$event},\"close-dialog\":_vm.selectOperatorCloseDialog,\"search-reset\":_vm.selectOperatorDialogReset,\"cancel-btn-click\":_vm.selectOperatorCloseDialog,\"confirm-btn-click\":_vm.comfirmCurrentHandler}}),_c('portal-dialog',{ref:\"assignDialogRef\",staticClass:\"assign-form\",attrs:{\"title\":\"Assign Task\",\"dialogVisible\":_vm.assignTaskDialogVisible,\"searchForm\":_vm.assignTaskSearchForm,\"configForm\":_vm.assignConfigForm,\"needSearchFormBottomLine\":true,\"configFormBottomLine\":true,\"isOverflowHeight\":true,\"formRules\":_vm.formRules,\"configFormRules\":_vm.configFormRules,\"dialogTable\":_vm.assignTaskDialogTable,\"searchLoading\":_vm.assignTaskDialogTable.isSearch},on:{\"update:dialogVisible\":function($event){_vm.assignTaskDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.assignTaskDialogVisible=$event},\"update:searchLoading\":function($event){return _vm.$set(_vm.assignTaskDialogTable, \"isSearch\", $event)},\"update:search-loading\":function($event){return _vm.$set(_vm.assignTaskDialogTable, \"isSearch\", $event)},\"close-dialog\":_vm.assignTaskCloseDialog,\"search-reset\":_vm.assignTaskDialogReset,\"cancel-btn-click\":_vm.assignTaskCloseDialog,\"confirm-btn-click\":_vm.comfirmAssignHandler}},[_c('template',{slot:\"operation\"},[_c('div',{staticClass:\"check-operator\"},[_c('div',{staticClass:\"check-label\"},[_vm._v(\"Select Type\")]),_c('el-radio-group',{on:{\"change\":_vm.checkChange},model:{value:(_vm.checkRadio),callback:function ($$v) {_vm.checkRadio=$$v},expression:\"checkRadio\"}},[_c('el-radio',{attrs:{\"label\":\"operator\"}},[_vm._v(\"Operator\")]),_c('el-radio',{attrs:{\"label\":\"role\"}},[_vm._v(\"Role\")])],1)],1)])],2)],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"active-task-management-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">{{ projectObj.title }}</div>\n      <div class=\"desc\">{{ projectObj.desc }}</div>\n    </div>\n    <div class=\"page-content\">\n      <portal-form\n        ref=\"searchFormRef\"\n        :searchBtnLoading=\"searchLoading\"\n        :form-config-list=\"formConfigList\"\n        :formRules=\"dateValidate\"\n        :form-data=\"formData\"\n        @reset-btn-click=\"resetSearch\"\n        @search-btn-click=\"search\"\n      ></portal-form>\n      <div class=\"table-container\">\n        <div class=\"table-operate-header\" :class=\"{ isSingleElement: !hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN') }\">\n          <el-button\n            @click=\"assignEvent\"\n            :disabled=\"isDisabled || !hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN')\"\n            size=\"small\"\n            type=\"primary\"\n            >{{ this.$t('TAC.activeTaskManagement.assign') }}</el-button\n          >\n          <div class=\"right-btn\">\n            <el-select\n              size=\"small\"\n              :clearable=\"false\"\n              v-model=\"sortTime\"\n              @change=\"handleCommand\"\n              :placeholder=\"$t('common.placeholder.sortBy') + ''\"\n            >\n              <el-option\n                v-for=\"item in sortTimeList\"\n                :key=\"item.label\"\n                :value=\"item.value\"\n                :label=\"item.label\"\n              ></el-option>\n            </el-select>\n          </div>\n        </div>\n        <table-page\n          class=\"initiated-workflow-table\"\n          ref=\"workflowTableRef\"\n          idKey=\"taskNo\"\n          :isCheck=\"true\"\n          :columns=\"columns\"\n          :sortArr=\"['creationTime', 'dueTime']\"\n          :getTableData=\"getTableData\"\n          :has-pagination=\"hasPagination\"\n          :pagination=\"paginationConfig\"\n          :is-search=\"isSearch\"\n          @selection-change=\"selectionChange\"\n        >\n          <template slot-scope=\"scope\" slot=\"operation\">\n            <el-button\n              v-if=\"assignBtnIsShow(scope.data.row)\"\n              :disabled=\"!hasPerm('WF_MYTASK_ADMINTASK_ASSIGN_BTN')\"\n              type=\"text\"\n              @click=\"handleAssign(scope.data.row)\"\n            >\n              {{ $t('TAC.activeTaskManagement.assign') }}\n            </el-button>\n            <el-button\n              v-if=\"detailBtnIsShow(scope.data.row)\"\n              :disabled=\"!hasPerm('WF_MYTASK_ADMINTASK_VIEW_BTN')\"\n              type=\"text\"\n              @click=\"handleDetail(scope.data.row)\"\n              >{{ $t('common.label.detail') }}</el-button\n            >\n          </template>\n          <template slot-scope=\"scope\" slot=\"taskStatus\">\n            <div class=\"flex flex-align\">\n              <span class=\"status-circle\" :style=\"statusStyle(scope.data.row)\"></span>\n              <span>{{ scope.data.row.status }}</span>\n            </div>\n          </template>\n        </table-page>\n      </div>\n    </div>\n    <div class=\"page-dialog\">\n      <!-- select-taskName-dialog -->\n      <el-dialog\n        title=\"Select Task Name\"\n        width=\"800px\"\n        ref=\"selectTaskNameDialogRef\"\n        :visible.sync=\"taskNameDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"closeDialog\"\n        @closed=\"closeDialog\"\n      >\n        <portal-form\n          class=\"dialogTaskNameForm\"\n          ref=\"dialogTaskNameForm\"\n          :form-config-list=\"taskNameSearchForm.formConfigList\"\n          :form-data=\"taskNameSearchForm.formData\"\n          :formRules=\"formRules\"\n          :needOperateBtn=\"true\"\n          :searchBtnLoading=\"dialogTaskNameFormBtnLoading\"\n          :smallAutoColumn=\"2\"\n          :bigAutoColumn=\"2\"\n          @search-btn-click=\"selectTaskDialogSearch\"\n          @reset-btn-click=\"selectTaskDialogReset\"\n        ></portal-form>\n        <table-page\n          ref=\"taskNameTableRef\"\n          :columns=\"dialogTable.columns\"\n          :getTableData=\"dialogTable.getTableData\"\n          :is-search=\"dialogTable.isSearch\"\n          :is-check=\"true\"\n          :isSingleCheck=\"true\"\n          @single-selection-change=\"dialogTable.singleChange\"\n        ></table-page>\n        <div class=\"dialog-pagination\">\n          <portal-pagination\n            :total=\"taskNameCount\"\n            ref=\"taskNameDialogPageRef\"\n            :pageSize=\"taskNamePageSize\"\n            @pagination=\"handleTaskNameSizeChange\"\n            :hidden=\"taskNameHasData\"\n          ></portal-pagination>\n        </div>\n        <div class=\"dialog-footer\" slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"closeDialog\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button v-preventReClick type=\"primary\" size=\"small\" @click=\"comfirmTaskNameHandler\">{{\n            this.$t('common.button.confirm')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- select-operator-dialog -->\n      <portal-dialog\n        title=\"Select Operator\"\n        class=\"select-operator-dialog\"\n        ref=\"selectOperatorDialogRef\"\n        :dialogVisible.sync=\"selectOperatorDialogVisible\"\n        :searchForm=\"selectOperatorSearchForm\"\n        :needSearchFormBottomLine=\"true\"\n        :dialogTable=\"selectOperatorDialogTable\"\n        :formRules=\"formRules\"\n        :searchLoading.sync=\"selectOperatorSearchLoading\"\n        @close-dialog=\"selectOperatorCloseDialog\"\n        @search-reset=\"selectOperatorDialogReset\"\n        @cancel-btn-click=\"selectOperatorCloseDialog\"\n        @confirm-btn-click=\"comfirmCurrentHandler\"\n      ></portal-dialog>\n      <!-- assign-task-dialog -->\n      <portal-dialog\n        title=\"Assign Task\"\n        ref=\"assignDialogRef\"\n        class=\"assign-form\"\n        :dialogVisible.sync=\"assignTaskDialogVisible\"\n        :searchForm=\"assignTaskSearchForm\"\n        :configForm=\"assignConfigForm\"\n        :needSearchFormBottomLine=\"true\"\n        :configFormBottomLine=\"true\"\n        :isOverflowHeight=\"true\"\n        :formRules=\"formRules\"\n        :configFormRules=\"configFormRules\"\n        :dialogTable=\"assignTaskDialogTable\"\n        :searchLoading.sync=\"assignTaskDialogTable.isSearch\"\n        @close-dialog=\"assignTaskCloseDialog\"\n        @search-reset=\"assignTaskDialogReset\"\n        @cancel-btn-click=\"assignTaskCloseDialog\"\n        @confirm-btn-click=\"comfirmAssignHandler\"\n      >\n        <template slot=\"operation\">\n          <div class=\"check-operator\">\n            <div class=\"check-label\">Select Type</div>\n            <el-radio-group @change=\"checkChange\" v-model=\"checkRadio\">\n              <el-radio label=\"operator\">Operator</el-radio>\n              <el-radio label=\"role\">Role</el-radio>\n            </el-radio-group>\n          </div>\n        </template>\n      </portal-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PortalForm from '@/components/portal-form';\nimport TablePage from '@/components/tablePage';\nimport PortalDialog from '@/views/task-center/component/portal-dialog';\nimport PortalPagination from '@/components/portal-pagination';\nimport { taskHistoryRules, dateValidateRule } from '@/views/task-center/validator/index';\nimport {\n  queryActiveTask,\n  queryCurrentHandler,\n  queryWorkFlowDataDict,\n  batchProcess,\n  queryOrgCurrentHandler,\n  queryTaskName,\n  queryRole,\n} from '@/views/task-center/api/api-task-center';\nimport dayjs from 'dayjs';\n\nexport default {\n  name: 'activeTaskManagement',\n  components: {\n    PortalForm,\n    TablePage,\n    PortalDialog,\n    PortalPagination,\n  },\n  data() {\n    return {\n      projectObj: {\n        title: this.$t('TAC.activeTaskManagement.title'),\n        desc: this.$t('TAC.activeTaskManagement.desc'),\n      },\n      searchLoading: false,\n      searchFormPriority: [{ label: 'All', value: '' }],\n      searchFormTaskType: [{ label: 'All', value: '' }],\n      searchFormStatus: [{ label: 'All', value: '' }],\n      formData: {\n        taskNo: '',\n        priority: '',\n        taskName: '',\n        taskType: '',\n        status: '',\n        dueTime: '',\n        startTime: '',\n        currentHandler: '',\n      },\n      dateValidate: dateValidateRule(),\n      curSelectTaskNameToTaskType: '',\n      selectOperatorId: '',\n      sortTimeList: [],\n      sortTime: '',\n      tempCurrentHandler: {},\n      tempOperatorId: '',\n      columns: [\n        {\n          label: this.$t('TAC.myTodo.taskNo'),\n          prop: 'taskNo',\n          align: 'left',\n          width: '150px',\n        },\n        {\n          label: this.$t('TAC.myTodo.description'),\n          prop: 'description',\n          align: 'left',\n          width: '200px',\n        },\n        {\n          label: this.$t('TAC.myTodo.priority'),\n          prop: 'priority',\n          align: 'left',\n          width: '150px',\n        },\n        {\n          label: this.$t('TAC.myTodo.creationTime'),\n          prop: 'creationTime',\n          width: '150px',\n          align: 'left',\n          'sort-method': (a, b) => {\n            return a.creationTime > b.creationTime ? 1 : -1;\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.dueTime'),\n          prop: 'dueTime',\n          width: '150px',\n          align: 'left',\n          'sort-method': (a, b) => {\n            return a.dueTime > b.dueTime ? 1 : -1;\n          },\n        },\n        {\n          label: this.$t('TAC.activeTaskManagement.initiator'),\n          prop: 'initiator',\n          align: 'left',\n          width: '150px',\n        },\n        {\n          label: this.$t('TAC.myInitiatedWorkFlow.status'),\n          prop: 'status',\n          align: 'left',\n          width: '130px',\n          __slotName: 'taskStatus',\n          'sort-method': (a, b) => {\n            return a.status > b.status ? 1 : -1;\n          },\n        },\n        {\n          label: this.$t('TAC.activeTaskManagement.currentHandler'),\n          prop: 'currentHandler',\n          align: 'left',\n          width: '150px',\n        },\n        {\n          label: this.$t('TAC.myTodo.taskType'),\n          prop: 'taskType',\n          align: 'left',\n          width: '150px',\n        },\n        {\n          label: this.$t('TAC.myInitiatedWorkFlow.operation'),\n          prop: 'operation',\n          align: 'left',\n          width: '150px',\n          __slotName: 'operation',\n          fixed: 'right',\n        },\n      ],\n      checkLists: [],\n      checkNums: [],\n      tempCheckList: [],\n      assignDialigSelectData: [],\n      hasPagination: false,\n      paginationConfig: {\n        total: 0,\n        pageIndex: 1,\n        pageSize: 10,\n      },\n      isSearch: false,\n      taskNameDialogVisible: false,\n      dialogTaskNameFormBtnLoading: false,\n      taskNameSearchFormData: {\n        taskName: '',\n        taskType: '',\n      },\n      dialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            prop: 'taskName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            prop: 'taskType',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: true,\n        hasPagination: true,\n        getTableData: this.getDialogTaskName,\n        singleChange: this.selectTaskName,\n      },\n      taskNameCount: 0,\n      taskNameHasData: true,\n      taskNamePageSize: 5,\n      taskNameSearchLoading: false,\n      tempTaskName: {},\n      handlerNewSearchType: false,\n      selectOperatorDialogVisible: false,\n      selectOperatorDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        hasPagination: true,\n        isSingleCheck: true,\n        getTableData: this.getCurrentHandlerData,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        singleChange: this.selectOperator,\n      },\n      selectOperatorSearchLoading: false,\n      selectOperatorSearchFormData: {\n        userName: '',\n        firstName: '',\n        middleName: '',\n        lastName: '',\n        operatorType: '',\n        shortCode: '',\n      },\n      formRules: taskHistoryRules(),\n      checkRadio: 'operator',\n      tempData: {},\n      tempConfig: {\n        label: this.$t('TAC.activeTaskManagement.shortCode'),\n        formItemClass: 'sort-code',\n        key: 'shortCode',\n        prop: 'shortCode',\n        comp: 'el-input',\n        bind: {\n          clearable: true,\n          placeholder: this.$t('common.placeholder.enter'),\n        },\n      },\n      taskNameDialogList: [],\n      assignTaskDialogVisible: false,\n      assignTaskDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        hasPagination: true,\n        getTableData: this.getAssignTableDate,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        onSelectionChange: this.assignDialigSelectChange,\n      },\n      assignTaskSearchFormData: {\n        userName: '',\n        firstName: '',\n        middleName: '',\n        shortCode: '',\n        lastName: '',\n        operatorType: '',\n      },\n      newSearchType: false,\n      switchText: 'No',\n      assignConfigFormData: {\n        resetDueTime: false,\n        comments: '',\n      },\n      configFormRules: {\n        resetDueTime: [{ required: true, message: 'please enter', trigger: 'change' }],\n        comments: [{ required: true, message: 'This field is mandatory.', trigger: 'blur' }],\n      },\n      pickerOptions: {\n        onPick: ({ maxDate, minDate }) => {\n          this.selectDate = minDate.getTime();\n          if (maxDate) {\n            this.selectDate = '';\n          }\n        },\n        disabledDate: (time) => {\n          if (this.selectDate !== '') {\n            const one = 30 * 24 * 3600 * 1000;\n            const minTime = this.selectDate - one;\n            const maxTime = this.selectDate + one;\n            return time.getTime() < minTime || time.getTime() > maxTime;\n          }\n        },\n      },\n      delegateRoleSearchFormConfigList: [\n        {\n          label: this.$t('TAC.myTodo.roleName'),\n          key: 'roleName',\n          prop: 'roleName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.roleCategory'),\n          key: 'roleCategory',\n          prop: 'roleCategory',\n          comp: 'el-select',\n          options: [\n            {\n              value: '',\n              label: 'All',\n            },\n            {\n              value: '3000',\n              label: 'Organization Operator',\n            },\n            {\n              value: '5000',\n              label: 'Organization',\n            },\n            {\n              value: '7000',\n              label: 'Group',\n            },\n            {\n              value: '8000',\n              label: 'SP',\n            },\n          ],\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n      ],\n      delegateRoleSearchFormData: {\n        roleName: '',\n        roleCategory: '',\n      },\n      tempAssignTableCol: [],\n      shortCodeConfig: {\n        label: this.$t('TAC.myTodo.orgShortCode'),\n        formItemClass: 'sort-code',\n        key: 'shortCode',\n        prop: 'shortCode',\n        comp: 'el-input',\n        bind: {\n          clearable: true,\n          placeholder: this.$t('common.placeholder.enter'),\n        },\n      },\n    };\n  },\n  computed: {\n    isDisabled() {\n      return !(this.checkNums.length > 0);\n    },\n    formConfigList() {\n      return [\n        {\n          label: this.$t('TAC.myTodo.taskNo'),\n          formItemClass: 'taskNo',\n          key: 'taskNo',\n          prop: 'taskNo',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.priority'),\n          key: 'priority',\n          prop: 'priority',\n          comp: 'el-select',\n          options: this.searchFormPriority,\n          bind: {\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          formItemClass: 'org-short-code',\n          label: this.$t('TAC.myTodo.taskName'),\n          key: 'taskName',\n          prop: 'taskName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.select'),\n          },\n          slots: [\n            {\n              comp: 'el-link',\n              name: 'append',\n              class: 'short-code-icon',\n              bind: {\n                icon: 'el-icon-more',\n                underline: false,\n              },\n              event: {\n                click: () => {\n                  this.taskNameDialogVisible = true;\n                  this.taskNameSearchForm.formData.taskType = this.searchFormTaskType[0].value;\n                  this.dialogTable.isSearch = true;\n                },\n              },\n            },\n          ],\n        },\n        {\n          label: this.$t('TAC.myTodo.taskType'),\n          key: 'taskType',\n          prop: 'taskType',\n          comp: 'el-select',\n          options: this.searchFormTaskType,\n          bind: {\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          formItemClass: 'org-short-code',\n          label: this.$t('TAC.activeTaskManagement.currentHandler'),\n          key: 'currentHandler',\n          prop: 'currentHandler',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.select'),\n          },\n          slots: [\n            {\n              comp: 'el-link',\n              name: 'append',\n              class: 'short-code-icon',\n              bind: {\n                icon: 'el-icon-more',\n                underline: false,\n              },\n              event: {\n                click: () => {\n                  this.selectOperatorDialogVisible = true;\n                  this.selectOperatorSearchFormData.operatorType = 'spOperator';\n                  this.selectOperatorDialogTable.isSearch = true;\n                },\n              },\n            },\n          ],\n        },\n        {\n          label: this.$t('TAC.myTodo.status'),\n          key: 'status',\n          prop: 'status',\n          comp: 'el-select',\n          options: this.searchFormStatus,\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n        {\n          formItemClass: 'due-time',\n          label: this.$t('TAC.myTodo.dueTime'),\n          prop: 'dueTime',\n          key: 'dueTime',\n          comp: 'el-date-picker',\n          bind: {\n            type: 'datetime',\n            format: 'dd/MM/yyyy HH:mm:ss',\n            'value-format': 'yyyy-MM-dd HH:mm:ss',\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.creationTime'),\n          formItemClass: 'form-special-date-box',\n          sameGroup: true,\n          prop: 'startTime',\n          comp: [\n            {\n              key: 'startTime',\n              comp: 'el-date-picker',\n              bind: {\n                placeholder: this.$t('common.placeholder.enter'),\n                align: 'right',\n                type: 'datetimerange',\n                'picker-options': this.pickerOptions,\n                format: 'dd/MM/yyyy HH:mm:ss',\n                'range-separator': '~',\n                'value-format': 'yyyy-MM-dd HH:mm:ss',\n                'default-time': ['00:00:00', '23:59:59'],\n                'start-placeholder': 'Please select',\n                'end-placeholder': 'Please select',\n              },\n            },\n            {\n              comp: 'i',\n              class: 'el-icon-date data_icon',\n            },\n          ],\n        },\n      ];\n    },\n    taskNameSearchForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            key: 'taskName',\n            prop: 'taskName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            key: 'taskType',\n            prop: 'taskType',\n            comp: 'el-select',\n            options: this.searchFormTaskType,\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.select'),\n            },\n          },\n        ],\n        formData: this.taskNameSearchFormData,\n      };\n    },\n    selectOperatorSearchForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.myTodo.operatorType'),\n            key: 'operatorType',\n            prop: 'operatorType',\n            comp: 'el-select',\n            options: [\n              {\n                value: 'orgOperator',\n                label: 'Organization Operator',\n              },\n              {\n                value: 'spOperator',\n                label: 'SP Operator',\n              },\n            ],\n            bind: {\n              placeholder: this.$t('common.placeholder.select'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            key: 'userName',\n            prop: 'userName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            key: 'firstName',\n            prop: 'firstName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            key: 'middleName',\n            prop: 'middleName',\n            comp: 'el-input',\n            formItemClass: {\n              isShow: true,\n            },\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            key: 'lastName',\n            prop: 'lastName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n        ],\n        formData: this.selectOperatorSearchFormData,\n      };\n    },\n    assignTaskSearchForm() {\n      if (this.checkRadio === 'operator') {\n        return {\n          formConfigList: [\n            {\n              label: this.$t('TAC.myTodo.operatorType'),\n              key: 'operatorType',\n              prop: 'operatorType',\n              comp: 'el-select',\n              options: [\n                {\n                  value: 'orgOperator',\n                  label: 'Organization Operator',\n                },\n                {\n                  value: 'spOperator',\n                  label: 'SP Operator',\n                },\n              ],\n              bind: {\n                placeholder: this.$t('common.placeholder.select'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.userName'),\n              key: 'userName',\n              prop: 'userName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.firstName'),\n              key: 'firstName',\n              prop: 'firstName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.middleName'),\n              key: 'middleName',\n              prop: 'middleName',\n              comp: 'el-input',\n              formItemClass: {\n                isShow: true,\n              },\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.lastName'),\n              key: 'lastName',\n              prop: 'lastName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n          ],\n          formData: this.assignTaskSearchFormData,\n        };\n      } else {\n        return {\n          formConfigList: this.delegateRoleSearchFormConfigList,\n          formData: this.delegateRoleSearchFormData,\n        };\n      }\n    },\n    assignConfigForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.activeTaskManagement.resetDueTime'),\n            key: 'resetDueTime',\n            prop: 'resetDueTime',\n            comp: 'el-switch',\n            bind: {\n              'active-text': this.switchText,\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n            event: {\n              change: this.switchTextChange,\n            },\n          },\n          {\n            formItemClass: 'assign-comments',\n            label: this.$t('TAC.activeTaskManagement.comments'),\n            key: 'comments',\n            prop: 'comments',\n            comp: 'el-input',\n            bind: {\n              type: 'textarea',\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n        ],\n        formData: this.assignConfigFormData,\n      };\n    },\n  },\n  created() {\n    this.formData.startTime = [\n      dayjs(\n        new Date(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 0, 0, 0).getTime() - 1000 * 3600 * 24 * 7)\n      ).format('YYYY-MM-DD HH:mm:ss'),\n      dayjs(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 23, 59, 59)).format('YYYY-MM-DD HH:mm:ss'),\n    ];\n    this.queryDictDataList();\n  },\n  watch: {\n    selectOperatorSearchFormData: {\n      handler(val) {\n        if (val.operatorType === 'orgOperator') {\n          if (this.selectOperatorSearchForm.formConfigList.length === 5) {\n            this.handlerNewSearchType = true;\n            this.selectOperatorSearchForm.formConfigList.splice(1, 0, this.tempConfig);\n          }\n        } else {\n          if (this.selectOperatorSearchForm.formConfigList.length === 6) {\n            this.handlerNewSearchType = false;\n            this.selectOperatorSearchForm.formConfigList.splice(1, 1);\n          }\n        }\n        if (val.shortCode !== '') {\n          this.$refs.selectOperatorDialogRef.$refs.dialogSearchForm.clearValidate('shortCode');\n        }\n      },\n      deep: true,\n    },\n    assignTaskSearchFormData: {\n      handler(val) {\n        if (val.operatorType === 'orgOperator') {\n          if (this.assignTaskSearchForm.formConfigList.length === 5) {\n            this.newSearchType = true;\n            this.assignTaskSearchForm.formConfigList.splice(1, 0, this.shortCodeConfig);\n          }\n        } else {\n          if (this.assignTaskSearchForm.formConfigList.length === 6) {\n            this.newSearchType = false;\n            this.assignTaskSearchForm.formConfigList.splice(1, 1);\n          }\n        }\n        if (val.shortCode !== '') {\n          this.$refs.assignDialogRef.$refs.dialogSearchForm.clearValidate('shortCode');\n        }\n      },\n      deep: true,\n    },\n    handlerNewSearchType(val) {\n      if (val) {\n        this.selectOperatorDialogTable.getTableData = this.emptyQuery;\n        this.selectOperatorDialogTable.isSearch = this.true;\n        this.$nextTick(() => {\n          this.selectOperatorDialogTable.getTableData = this.getOrgCurrentHandlerData;\n        });\n      } else {\n        this.selectOperatorDialogTable.getTableData = this.getCurrentHandlerData;\n      }\n    },\n    newSearchType(val) {\n      if (val) {\n        this.assignTaskDialogTable.getTableData = this.emptyQuery;\n        this.assignTaskDialogTable.isSearch = true;\n        this.$nextTick(() => {\n          this.assignTaskDialogTable.getTableData = this.getOrgAssignDialogData;\n        });\n      } else {\n        this.assignTaskDialogTable.getTableData = this.getAssignTableDate;\n      }\n    },\n    formData: {\n      handler(val) {\n        if (this.curSelectTaskNameToTaskType === val.taskType) return;\n        this.formData.taskName = '';\n      },\n      deep: true,\n    },\n    delegateRoleSearchFormData: {\n      handler() {\n        if (this.delegateRoleSearchFormData.roleName) {\n          this.$refs.assignDialogRef.$refs.dialogSearchForm.validate();\n        } else {\n          this.$refs.assignDialogRef.$refs.dialogSearchForm.clearValidate();\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    emptyQuery() {\n      return new Promise((resolve) => {\n        this.assignTaskDialogTable.isSearch = false;\n        resolve({\n          header: { success: true },\n          list: [],\n          totalRecords: 0,\n        });\n      });\n    },\n    statusStyle(row) {\n      switch (row.status) {\n        case 'Processing':\n          return { 'background-color': `${this.GlobalStyleVariables.statusNoticeColor}` };\n        case 'Paused':\n          return { 'background-color': `${this.GlobalStyleVariables.statusColorSAecondaryWarning}` };\n        case 'Completed':\n          return { 'background-color': `${this.GlobalStyleVariables.statusSuccessColor}` };\n        default:\n          break;\n      }\n    },\n    search() {\n      this.$refs.searchFormRef.validate((result) => {\n        if (result) {\n          this.searchLoading = true;\n          this.isSearch = true;\n        }\n      });\n    },\n    async queryDictDataList() {\n      let res = await queryWorkFlowDataDict({\n        dictCodes: [\n          'CPS.WORKFLOW.CONFIGURATION.PRIORITY',\n          'CPS.TASK.TYPE',\n          'CPS.WORKFLOW.TODO.TASK.STATE',\n          'WORK_FLOW_SORT_TIME',\n        ],\n      });\n      if (res.header && res.header.success) {\n        this.searchFormPriority = res.dictDetailsMap['CPS.WORKFLOW.CONFIGURATION.PRIORITY'];\n        if (this.searchFormPriority[0].label !== 'All') {\n          this.searchFormPriority.unshift({ label: 'All', value: '' });\n        }\n        this.searchFormTaskType = res.dictDetailsMap['CPS.TASK.TYPE'];\n        this.searchFormStatus = res.dictDetailsMap['CPS.WORKFLOW.TODO.TASK.STATE'];\n        if (this.searchFormStatus[0].label !== 'All') {\n          this.searchFormStatus.unshift({ label: 'All', value: '' });\n        }\n        this.sortTimeList = res.dictDetailsMap['WORK_FLOW_SORT_TIME'];\n        this.sortTime = 'CREATE_TIME_LATEST';\n      }\n    },\n    resetSearch() {\n      this.$refs.searchFormRef.resetFields();\n      this.selectOperatorId = '';\n      this.isSearch = true;\n    },\n    async getDialogTaskName() {\n      let taskTypeCondition = '';\n      let taskTypeCodetoLabel = '';\n      this.searchFormTaskType.some((item) => {\n        if (item.value === this.taskNameSearchFormData.taskType) {\n          taskTypeCodetoLabel = item.label;\n          return true;\n        }\n      });\n      if (taskTypeCodetoLabel) {\n        if (taskTypeCodetoLabel !== 'All') {\n          if (taskTypeCodetoLabel === 'Transaction and Action') {\n            taskTypeCondition = 'TRANSATION_AND_ACTION';\n          } else {\n            taskTypeCondition = taskTypeCodetoLabel.toUpperCase().split(' ').join('_');\n          }\n        }\n      }\n      let params = {\n        taskNameCondition: this.taskNameSearchFormData.taskName,\n        taskTypeCondition,\n      };\n      let res = await queryTaskName(params);\n      this.dialogTaskNameFormBtnLoading = false;\n      this.dialogTable.isSearch = false;\n      if (res.taskTypeList && res.taskTypeList.length > 0) {\n        this.taskNameCount = res.taskTypeList.length;\n        this.taskNameHasData = false;\n        let list = res.taskTypeList.map((item) => {\n          item.taskType = item.category;\n          return item;\n        });\n        this.taskNameDialogList = list;\n        return {\n          header: { success: true },\n          list: list.slice(0, this.taskNamePageSize),\n        };\n      }\n      return { header: { success: false } };\n    },\n    switchTextChange(val) {\n      val ? (this.switchText = 'Yes') : (this.switchText = 'No');\n    },\n    selectTaskDialogSearch() {\n      this.dialogTable.isSearch = true;\n      this.dialogTaskNameFormBtnLoading = true;\n    },\n    selectTaskDialogReset() {\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.dialogTable.isSearch = true;\n    },\n    handleTaskNameSizeChange(val) {\n      let pageNo = val.pageIndex;\n      let pageSize = val.pageSize;\n      this.taskNamePageSize = val.pageSize;\n      this.$refs.taskNameTableRef.tableData = this.taskNameDialogList.slice(\n        (pageNo - 1) * this.taskNamePageSize,\n        (pageNo - 1) * this.taskNamePageSize + pageSize\n      );\n    },\n    getCurrentHandlerData() {\n      return new Promise((resolve) => {\n        let params = {\n          operatorType: 20,\n          selectType: 'operator',\n          status: '03',\n          userName: this.selectOperatorSearchFormData.userName,\n          firstName: this.selectOperatorSearchFormData.firstName,\n          middleName: this.selectOperatorSearchFormData.middleName,\n          lastName: this.selectOperatorSearchFormData.lastName,\n          pageNo: this.selectOperatorDialogTable.paginationConfig.pageIndex,\n          pageSize: this.selectOperatorDialogTable.paginationConfig.pageSize,\n        };\n        queryCurrentHandler(params)\n          .then((res) => {\n            this.selectOperatorSearchLoading = false;\n            this.selectOperatorDialogTable.isSearch = false;\n            res.list = res.list.map((item) => {\n              item.id = item.identityId;\n              return item;\n            });\n            if (res.header && res.header.success) {\n              return resolve({\n                header: res.header,\n                list: res.list,\n                totalRecords: res.total,\n              });\n            } else {\n              this.selectOperatorDialogTable.isSearch = false;\n            }\n          })\n          .catch(() => {\n            this.selectOperatorSearchLoading = false;\n            resolve({\n              header: { success: false },\n            });\n          });\n      });\n    },\n    async getOrgCurrentHandlerData() {\n      let params = {\n        shortCode: this.selectOperatorSearchFormData.shortCode,\n        operatorName: this.selectOperatorSearchFormData.userName,\n        selectType: 'operator',\n        operatorType: 30,\n        status: '03',\n        pageNo: this.selectOperatorDialogTable.paginationConfig.pageIndex,\n        pageSize: this.selectOperatorDialogTable.paginationConfig.pageSize,\n      };\n      let res = await queryOrgCurrentHandler(params);\n      this.selectOperatorSearchLoading = false;\n      this.selectOperatorDialogTable.isSearch = false;\n      if (res.header && res.header.success) {\n        let list = res.list.map((item) => {\n          // item.userName = item.operatorName;\n          item.id = item.operatorId;\n          return item;\n        });\n        return {\n          header: res.header,\n          list,\n          totalRecords: res.totalSize,\n        };\n      }\n      return { header: { success: false } };\n    },\n    getAssignTableDate() {\n      return new Promise((resolve) => {\n        let params = {\n          operatorType: 20,\n          status: '03',\n          selectType: 'operator',\n          userName: this.assignTaskSearchFormData.userName,\n          firstName: this.assignTaskSearchFormData.firstName,\n          middleName: this.assignTaskSearchFormData.middleName,\n          lastName: this.assignTaskSearchFormData.lastName,\n          pageNo: this.assignTaskDialogTable.paginationConfig.pageIndex,\n          pageSize: this.assignTaskDialogTable.paginationConfig.pageSize,\n        };\n        queryCurrentHandler(params).then((res) => {\n          this.assignTaskDialogTable.isSearch = false;\n          if (res.header && res.header.success) {\n            res.list.forEach((item, idx) => {\n              res.list[idx].id = item.identityId;\n            });\n            return resolve({\n              header: res.header,\n              list: res.list,\n              totalRecords: res.total,\n            });\n          } else {\n            this.assignTaskDialogTable.isSearch = false;\n          }\n        });\n      });\n    },\n    async getOrgAssignDialogData() {\n      let params = {\n        shortCode: this.assignTaskSearchFormData.shortCode,\n        operatorName: this.assignTaskSearchFormData.userName,\n        selectType: 'operator',\n        operatorType: 30,\n        status: '03',\n        pageNo: this.assignTaskDialogTable.paginationConfig.pageIndex,\n        pageSize: this.assignTaskDialogTable.paginationConfig.pageSize,\n      };\n      let res = await queryOrgCurrentHandler(params);\n      this.assignTaskDialogTable.isSearch = false;\n      if (res.header && res.header.success) {\n        let list = res.list.map((item) => {\n          // item.userName = item.operatorName;\n          return item;\n        });\n        return {\n          header: res.header,\n          list,\n          totalRecords: res.totalSize,\n        };\n      }\n      return { header: { success: false } };\n    },\n    selectionChange(val) {\n      this.checkNums = val;\n      this.checkLists = val;\n    },\n    selectOperator(val) {\n      this.tempCurrentHandler = val;\n      this.selectOperatorId = val.identityId;\n      this.tempOperatorId = val.identityId;\n    },\n    selectTaskName(val) {\n      this.tempTaskName = val;\n    },\n    comfirmTaskNameHandler() {\n      if (Array.isArray(this.tempTaskName)) {\n        if (!this.tempTaskName.length) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n      } else {\n        if (!Object.keys(this.tempTaskName).length) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n      }\n      this.formData.taskName = this.tempTaskName.taskName;\n      if (this.tempTaskName.taskType === 'TRANSATION_AND_ACTION') {\n        this.formData.taskType = 'Transaction and Action';\n        this.curSelectTaskNameToTaskType = 'Transaction and Action';\n      } else {\n        if (this.tempTaskName.taskType) {\n          let taskType = this.tempTaskName.taskType\n            .toLocaleLowerCase()\n            .split('_')\n            .map((item) => {\n              return item.replace(item[0], item[0].toLocaleUpperCase());\n            });\n          this.formData.taskType = taskType.join(' ');\n          this.curSelectTaskNameToTaskType = taskType.join(' ');\n        }\n      }\n      this.taskNameDialogVisible = false;\n    },\n    comfirmCurrentHandler() {\n      if (Array.isArray(this.tempCurrentHandler)) {\n        if (!this.tempCurrentHandler.length) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n      } else {\n        if (!Object.keys(this.tempCurrentHandler).length) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n      }\n      this.formData.currentHandler = this.tempCurrentHandler.userName;\n      this.tempCurrentHandler = {};\n      this.selectOperatorDialogTable.isSearch = false;\n      this.selectOperatorDialogVisible = false;\n    },\n    resConverseList(resDataList, receiveObj) {\n      receiveObj.list = resDataList.map((item) => {\n        let priority = '';\n        if (item.taskPriority === '200') {\n          priority = 'High';\n        } else if (item.taskPriority === '100') {\n          priority = 'Medium';\n        } else {\n          priority = 'Low';\n        }\n        let time = item.createTime.split(' ');\n        let date = time[0].split('-');\n        let creatime = date[2] + '/' + date[1] + '/' + date[0] + ' ' + time[1];\n        let expireTime = item.expireTime.split(' ');\n        let expDate = expireTime[0].split('-');\n        let dueTime = expDate[2] + '/' + expDate[1] + '/' + expDate[0] + ' ' + expireTime[1];\n        let category = '';\n        this.searchFormTaskType.some((tskItem) => {\n          if (tskItem.value === item.category) {\n            category = tskItem.label;\n            return true;\n          }\n        });\n        return {\n          taskNo: item.taskId,\n          description: item.taskDesc,\n          workflowName: item.procDefId,\n          priority,\n          creationTime: creatime,\n          dueTime: dueTime,\n          initiator: item.initiatorName,\n          currentHandler: item.ownerName,\n          taskType: category,\n          status: item.taskState,\n          processId: item.processId,\n          adminFlag: item.adminFlag,\n          processFlag: item.processFlag,\n          taskState: item.taskState,\n          formURL: item.formURL,\n          viewFlag: item.viewFlag,\n        };\n      });\n    },\n    async getTableData() {\n      let tskType = '';\n      if (this.formData.taskType.length > 1) {\n        this.searchFormTaskType.some((item) => {\n          if (item.label === this.formData.taskType) {\n            tskType = item.value;\n            return true;\n          }\n        });\n      } else {\n        tskType = this.formData.taskType;\n      }\n      let params = {\n        priority: this.formData.priority || null,\n        taskId: this.formData.taskNo,\n        taskName: this.formData.taskName,\n        category: tskType,\n        ownerId: this.selectOperatorId,\n        status: this.formData.status || null,\n        dueTime: this.formData.dueTime || null,\n        pageNo: this.paginationConfig.pageIndex,\n        createTimeFrom: this.formData.startTime[0],\n        createTimeTo: this.formData.startTime[1],\n        sortingMode: this.sortTime || 'CREATE_TIME_LATEST',\n        pageSize: this.paginationConfig.pageSize,\n      };\n      let res = await queryActiveTask({ taskVO: params });\n      this.isSearch = false;\n      this.searchLoading = false;\n      if (res.header && res.header.success) {\n        if (res.taskDTOList.length > 0) {\n          this.hasPagination = true;\n          res.totalRecords = res.count;\n          if (this.searchFormTaskType.length < 2) {\n            await this.queryDictDataList();\n            this.resConverseList(res.taskDTOList, res);\n            return res;\n          } else {\n            this.resConverseList(res.taskDTOList, res);\n            return res;\n          }\n        } else {\n          return {\n            header: res.header,\n            list: [],\n          };\n        }\n      }\n    },\n    assignDialigSelectChange(val) {\n      this.assignDialigSelectData = val;\n    },\n    assignBtnIsShow(val) {\n      return val.taskState !== 'Paused' && val.adminFlag;\n    },\n    detailBtnIsShow(val) {\n      return val.taskState !== 'Paused' && val.viewFlag;\n    },\n    handleDetail(val) {\n      this.openNewWindow({ path: 'detail', query: val });\n    },\n    handleAssign(val) {\n      if (this.checkLists.length > 0) {\n        this.tempCheckList = this.checkLists.splice(0);\n      }\n      this.checkLists.push(val);\n      this.assignTaskSearchFormData.operatorType = 'spOperator';\n      this.assignTaskDialogVisible = true;\n    },\n    closeDialog() {\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.taskNameDialogVisible = false;\n    },\n    selectTaskNameDialogReset() {\n      this.$refs.selectTaskNameDialogRef.$refs.dialogSearchForm.resetFields();\n      this.dialogTable.isSearch = true;\n    },\n    selectOperatorDialogReset() {\n      this.$refs.selectOperatorDialogRef.$refs.dialogSearchForm.resetFields();\n      this.handlerNewSearchType = false;\n      Object.keys(this.$refs.selectOperatorDialogRef.$refs.dialogSearchForm.formData).forEach((key) => {\n        this.$refs.selectOperatorDialogRef.$refs.dialogSearchForm.formData[key] = '';\n      });\n      this.selectOperatorSearchForm.formData.operatorType = 'spOperator';\n      this.$nextTick(() => {\n        this.selectOperatorDialogTable.isSearch = true;\n      });\n    },\n    selectOperatorCloseDialog() {\n      this.selectOperatorDialogVisible = false;\n      this.tempOperatorId = '';\n      this.tempCurrentHandler = '';\n      this.selectOperatorDialogReset();\n    },\n    qeuryRoleData() {\n      let params = {\n        selectType: 'role',\n        roleName: this.delegateRoleSearchFormData.roleName,\n        roleCategory: this.delegateRoleSearchFormData.roleCategory,\n        pageNo: this.assignTaskDialogTable.paginationConfig.pageIndex,\n        pageSize: this.assignTaskDialogTable.paginationConfig.pageSize,\n      };\n      return new Promise((resolve) => {\n        queryRole(params)\n          .then((res) => {\n            this.assignTaskDialogTable.isSearch = false;\n            if (res.header && res.header.success) {\n              let tempData = res.list.map((item) => {\n                item.id = item.roleId;\n                switch (item.roleType) {\n                  case '2000':\n                    item.roleCategory = 'Sp Operator';\n                    break;\n                  case '3000':\n                    item.roleCategory = 'Organization Operator';\n                    break;\n                  case '5000':\n                    item.roleCategory = 'Organization';\n                    break;\n                  case '7000':\n                    item.roleCategory = 'GROUP';\n                    break;\n                  case '8000':\n                    item.roleCategory = 'SP';\n                    break;\n                  default:\n                    break;\n                }\n                return item;\n              });\n              if (this.delegateRoleSearchFormData.roleCategory) {\n                tempData = tempData.filter((item) =>\n                  item.roleType.includes(this.delegateRoleSearchFormData.roleCategory)\n                );\n              }\n              resolve({\n                header: res.header,\n                list: tempData.slice(\n                  (this.assignTaskDialogTable.paginationConfig.pageIndex - 1) *\n                    this.assignTaskDialogTable.paginationConfig.pageSize,\n                  this.assignTaskDialogTable.paginationConfig.pageSize *\n                    this.assignTaskDialogTable.paginationConfig.pageIndex\n                ),\n                totalRecords: tempData.length,\n              });\n            }\n          })\n          .catch(() => {\n            this.assignTaskDialogTable.isSearch = false;\n            resolve({\n              header: { success: false },\n            });\n          });\n      });\n    },\n    checkChange(value) {\n      if (value === 'role') {\n        this.tempAssignTableCol = JSON.parse(JSON.stringify(this.selectOperatorDialogTable.columns));\n        this.assignTaskDialogTable.columns = [\n          {\n            label: this.$t('TAC.myTodo.role'),\n            prop: 'roleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.description'),\n            prop: 'description',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.roleCategory'),\n            prop: 'roleCategory',\n            align: 'left',\n          },\n        ];\n        this.assignTaskDialogTable.getTableData = this.qeuryRoleData;\n        this.$nextTick(() => {\n          this.assignTaskDialogTable.isSearch = true;\n        });\n      } else {\n        this.assignTaskDialogTable.columns = this.tempAssignTableCol;\n        this.assignTaskDialogTable.getTableData = this.getAssignTableDate;\n        this.assignTaskDialogReset();\n      }\n    },\n    handleCommand(val) {\n      this.sortTime = val;\n      this.isSearch = true;\n    },\n    assignEvent() {\n      if (this.checkLists.length > 0) {\n        let checkResult = this.checkLists.map((item) => {\n          return this.assignBtnIsShow(item);\n        });\n        if (checkResult.includes(false)) {\n          this.$modal.alertError('Operation failed because the selected records contain records cannot be resolved');\n          return;\n        }\n        this.assignTaskSearchFormData.operatorType = 'spOperator';\n        this.assignTaskDialogVisible = true;\n      } else {\n        this.$modal.alertError('Please select at least one.');\n      }\n    },\n    assignTaskCloseDialog() {\n      this.$refs.assignDialogRef.$refs.dialogConfigForm.resetFields();\n      if (this.tempCheckList.length > 0) {\n        this.checkLists.splice(0);\n        this.checkLists = this.tempCheckList.splice(0);\n      }\n      this.assignTaskDialogVisible = false;\n      this.assignTaskDialogReset();\n    },\n    assignTaskDialogReset() {\n      this.$refs.assignDialogRef.$refs.dialogSearchForm.resetFields();\n      Object.keys(this.$refs.assignDialogRef.$refs.dialogSearchForm.formData).forEach((key) => {\n        this.$refs.assignDialogRef.$refs.dialogSearchForm.formData[key] = '';\n      });\n      this.assignTaskDialogTable.isSearch = true;\n      this.handlerNewSearchType = false;\n      this.assignTaskSearchForm.formData.operatorType = 'spOperator';\n      this.$nextTick(() => {\n        this.delegateRoleSearchFormData.roleName = '';\n        this.assignTaskDialogTable.isSearch = true;\n      });\n    },\n    comfirmAssignHandler() {\n      // this.assignTaskDialogVisible = false;\n      this.$refs.assignDialogRef.$refs.dialogConfigForm.validate((result) => {\n        if (result) {\n          if (this.assignDialigSelectData.length === 0) {\n            this.$modal.msgError('Please select at least one.');\n            return;\n          }\n          let isBatch = this.checkLists.length > 1 ? true : false;\n          let processList = this.checkLists.map((item) => {\n            return {\n              processId: item.processId,\n              taskId: item.taskNo,\n            };\n          });\n          let assigneeType = 0;\n          if (this.checkRadio === 'operator') {\n            assigneeType = '1';\n          } else if (this.checkRadio === 'role') {\n            assigneeType = '3';\n          }\n          let assignee = this.assignDialigSelectData.map((item) => {\n            if (item.roleId) {\n              return { roleId: item.roleId };\n            }\n            return { operatorId: item.identityId, operatorType: assigneeType, operatorName: item.userName };\n          });\n          batchProcess({\n            actionType: 'assign',\n            isResetExpireTime: this.assignConfigForm.formData.resetDueTime,\n            comments: this.assignConfigForm.formData.comments,\n            isBatch,\n            processList,\n            assigneeType,\n            assignee,\n          }).then((res) => {\n            if (res.header && res.header.success) {\n              this.$refs.assignDialogRef.$refs.dialogConfigForm.resetFields();\n              this.$refs.assignDialogRef.$refs.dialogSearchForm.resetFields();\n              this.assignTaskDialogVisible = false;\n              this.delegateDialogVisible = false;\n              this.isSearch = true;\n            }\n          });\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.active-task-management-container {\n  overflow: hidden;\n  .page-header {\n    padding: 20px;\n    background-color: $base-menu-background;\n    .title {\n      height: 32px;\n      font-family: Huawei Sans;\n      font-weight: 700;\n      color: $--text_color--emphasis;\n      font-size: 24px;\n      margin-bottom: 8px;\n    }\n    .desc {\n      width: 1092px;\n      height: 16px;\n      font-family: Huawei Sans;\n      color: $--text_color--secondary;\n      font-size: 12px;\n    }\n  }\n  .page-dialog {\n    /deep/ .pagination-region {\n      .el-select--mini {\n        display: none;\n      }\n      .pagination__total {\n        margin-right: 18px;\n      }\n      .go-to-buttom {\n        display: none;\n      }\n      .show-title {\n        display: none;\n      }\n      .go-to-buttom {\n        display: none;\n      }\n      .el-pagination__jump {\n        display: none;\n      }\n    }\n  }\n  .page-content {\n    margin-top: 1px;\n    /deep/ .org-short-code {\n      position: relative;\n    }\n    .table-container {\n      background-color: $base-menu-background;\n      padding: 20px 20px;\n    }\n  }\n  .dialogTaskNameForm {\n    padding: 0;\n    /deep/ .form-flex-bottom-line {\n      margin-bottom: 20px;\n    }\n  }\n  .dialog-footer {\n    margin-top: 20px;\n  }\n  /deep/ .select-operator-dialog {\n    .el-divider--horizontal {\n      display: none;\n    }\n    .pagination-region {\n      .el-select--mini {\n        display: none;\n      }\n      .pagination__total {\n        margin-right: 18px;\n      }\n      .show-title {\n        display: none;\n      }\n      .go-to-buttom {\n        display: none;\n      }\n      .el-pagination__jump {\n        display: none;\n      }\n    }\n  }\n  .check-operator {\n    margin-top: 20px;\n    margin-left: 20px;\n    .check-label::before {\n      content: '*';\n      position: absolute;\n      left: -12px;\n      top: 1px;\n      font-size: 20px;\n      color: $--status_color--error;\n    }\n    .check-label {\n      margin-bottom: 8px;\n      margin-left: 12px;\n      position: relative;\n      font-family: Huawei Sans;\n      color: $--text_color--secondary;\n      font-size: 14px;\n    }\n    .el-radio {\n      margin-right: 20px;\n    }\n    /deep/ .el-radio__label {\n      font-family: Huawei Sans;\n      color: $--text_color--strong;\n      font-size: 14px;\n      padding-left: 9px;\n    }\n  }\n  .table-operate-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 16px;\n    .el-dropdown-link {\n      .svg-icon {\n        margin-left: 8px;\n      }\n    }\n  }\n  .isSingleElement {\n    justify-content: end;\n  }\n}\n.cancel-button {\n  padding: 7px 15px;\n  height: 32px;\n  border-radius: 4px;\n  background-color: $base-menu-background;\n  border: 1px solid $--line_color--regular;\n  font-size: 14px;\n  color: $--text_color--strong;\n  box-sizing: border-box;\n  cursor: pointer;\n  margin-right: 8px;\n}\n/deep/ .taskNo {\n  .el-form-item__error {\n    top: 100%;\n  }\n}\n/deep/ .due-time {\n  .el-input__inner {\n    padding-left: 12px;\n  }\n}\n.assign-form {\n  /deep/ .assign-comments {\n    .el-form-item__content {\n      height: 100%;\n    }\n  }\n}\n/deep/ .sort-code {\n  .el-form-item__error {\n    top: 100%;\n  }\n}\n</style>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=a4943d50&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=a4943d50&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a4943d50\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=a4943d50&prod&lang=scss&scoped=true&\"","import request from '@/common/utils/request';\nimport { buildUrlWithObj } from '@/common/utils/url-utils';\nimport FileUtil from '@/common/utils/file-utils';\n\n// 查询mytodo待办任务\nexport function queryMyToDoTask(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryMyToDoTask',\n    method: 'post',\n    data,\n  });\n}\n// 查询Group任务\nexport function queryGroupTask(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryGroupTask',\n    method: 'post',\n    data,\n  });\n}\n// 查询TaskName弹窗数据，无需传参\nexport function queryTaskName(data) {\n  return request({\n    url: '/fintech/v1/workFlow/task-type/list',\n    method: 'post',\n    data,\n  });\n}\n// 查询workFlowName弹窗数据,无需传参\nexport function queryWorkFlowName(data) {\n  return request({\n    url: '/fintech/v1/workFlow/workFlow-name/list',\n    method: 'post',\n    data,\n  });\n}\n// 查询Current Handler、Operator\nexport function queryCurrentHandler(data) {\n  return request({\n    url: '/fintech/v1/workFlow/spOperator/list',\n    method: 'post',\n    data,\n  });\n}\n// 之前接口list\nexport function queryOrgCurrentHandler(data) {\n  return request({\n    url: '/fintech/v1/orgOperator/queryOrgOperatorList',\n    method: 'post',\n    data,\n  });\n}\n// 查询Role\nexport function queryRole(data) {\n  return request({\n    url: '/fintech/role/v1/list',\n    method: 'post',\n    data,\n  });\n}\n// 处理Process\nexport function batchProcess(data) {\n  return request({\n    url: '/fintech/v1/workflow/mytask/task/batchProcess',\n    method: 'post',\n    data,\n  });\n}\n// 查询工作流\nexport function queryManageList(data) {\n  return request({\n    url: '/v1/workFlow/queryManageList',\n    method: 'post',\n    data,\n  });\n}\n// 查询工作流实例历史\nexport function queryManageHistory(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryHistoryTask',\n    method: 'post',\n    data,\n  });\n}\n// 查询工作流实例详情\nexport function queryManageDetail(data) {\n  return request({\n    url: '/v1/workFlow/queryManageDetail',\n    method: 'post',\n    data,\n  });\n}\n// 查询Active Task、Active任务详情\nexport function queryActiveTask(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryActiveTask',\n    method: 'post',\n    data,\n  });\n}\n// 查询历史任务\nexport function queryHistoryTask(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryHistoryTask',\n    method: 'post',\n    data,\n  });\n}\n// 查询历史任务详情、查询My Initiated Task\nexport function queryMyInitiatedTask(data) {\n  return request({\n    url: '/fintech/v1/workFlow/queryInitiatedWorkflow',\n    method: 'post',\n    data,\n  });\n}\n// 查询资源字典\nexport function queryWorkFlowDataDict(data) {\n  return request({\n    url: '/fintech/v1/workFlow/data-dict/list',\n    method: 'post',\n    data,\n  });\n}\n\nexport function queryTaskDetail(data) {\n  return request({\n    url: '/fintech/v1/workflow/process/details',\n    method: 'post',\n    data,\n  });\n}\nexport function searchTransactionByOrderId(data) {\n  return request({\n    url: '/fintech/v1/searchTransactionByOrderId',\n    method: 'post',\n    data,\n  });\n}\nexport function queryDetail(data) {\n  return request({\n    url: '/fintech/v1/transaction/order/orderDetail',\n    method: 'post',\n    data,\n  });\n}\n\nexport function queryOrgOperatorDetail(receiverId) {\n  return request({\n    url: `/fintech/v1/orgOperator/detail?receiverIdentityId=${receiverId}`,\n    method: 'get',\n  });\n}\n\nexport function changeStatus(data) {\n  return request({\n    url: 'fintech/v1/workFlow/process/backToInitiator',\n    method: 'post',\n    data,\n  });\n}\n\nexport function queryBulkSpecificInfo(data) {\n  return request({\n    url: buildUrlWithObj(`/fintech/v1/bulk/task/plan/detail?planID=${data}`),\n    method: 'get',\n  });\n}\n\nexport function queryValidRecords(params) {\n  return request({\n    url: '/fintech/v1/bulk/task/plan/validRecords',\n    params,\n  });\n}\nexport function kycDetails(data) {\n  return request({\n    url: '/fintech/v1/workflow/process/kycDetails',\n    method: 'post',\n    data,\n  });\n}\nexport function queryLanguageList() {\n  return request({\n    url: '/fintech/v1/organization/languages',\n    method: 'get',\n  });\n}\n\n/**\n * 被退回的任务编辑状态\n * @param {*} data\n * @returns\n */\nexport const queryBackToInitiator = (data) => {\n  return request({\n    url: '/fintech/v1/workFlow/process/backToInitiator',\n    method: 'post',\n    data,\n  });\n};\n/**\n * kyc相关\n * @param {*} data\n * @returns\n */\nexport function queryBackKycToInitiator(data) {\n  return request({\n    url: 'fintech/v1/workFlow/process/backKycToInitiator',\n    method: 'post',\n    data,\n  });\n}\n\n/**\n * 组织产品格转化\n */\nexport const querySubscribeProductsForWorkFlow = (data) => {\n  return request({\n    url: '/fintech/v1/organization/querySubscribeProductsForWorkFlow',\n    method: 'post',\n    data,\n  });\n};\n","import { inputRequiredValidateObj } from '@/common/validator/common';\nlet nonSpecialCharValidate = {\n  pattern: /^[^@~`！!#$^*（）()\\-+=|,/<>《》?？;':\\\"“\\[\\]{}\\\\&]*$/,\n  message: 'Cannot contain special characters (~`!#$^*()-+=|,/<>?;\\':\"[]{}\\\\&)',\n  trigger: 'blur',\n};\nfunction dateValidate(rule, val, callback) {\n  if (val) {\n    let sTime = val[0];\n    let startTime = new Date(sTime).getTime();\n    let eTime = val[1];\n    let endTime = new Date(eTime).getTime();\n    let result = endTime - startTime < 31 * 24 * 3600 * 1000;\n    if (result) {\n      callback();\n    } else {\n      callback(new Error('The time period cannot exceed 31 days'));\n    }\n  }\n  callback();\n}\nconst taskHistoryRules = () => {\n  return {\n    userName: [nonSpecialCharValidate],\n    firstName: [nonSpecialCharValidate],\n    middleName: [nonSpecialCharValidate],\n    lastName: [nonSpecialCharValidate],\n    taskNo: [nonSpecialCharValidate],\n    taskName: [nonSpecialCharValidate],\n    currentHandler: [nonSpecialCharValidate],\n    workflowId: [nonSpecialCharValidate],\n    workflowName: [nonSpecialCharValidate],\n    remark: [nonSpecialCharValidate],\n    shortCode: [\n      nonSpecialCharValidate,\n      inputRequiredValidateObj,\n      { required: true, message: 'This field is mandatory.', trigger: 'change' },\n    ],\n  };\n};\nconst dateValidateRule = () => {\n  return {\n    creationTime: [{ required: false }, { validator: dateValidate, trigger: 'change' }],\n    startTime: [{ required: false }, { validator: dateValidate, trigger: 'change' }],\n  };\n};\nconst groupTaskRulus = () => {\n  return {\n    operation: [\n      nonSpecialCharValidate,\n      inputRequiredValidateObj,\n      { required: true, message: 'please enter', trigger: 'change' },\n    ],\n    remark: [\n      nonSpecialCharValidate,\n      inputRequiredValidateObj,\n      { required: true, message: 'This field is mandatory.', trigger: 'blur' },\n    ],\n  };\n};\nexport { taskHistoryRules, groupTaskRulus, dateValidateRule };\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('el-dialog',{staticClass:\"dialog-portal\",class:{ 'dialog-overflow': _vm.isOverflowHeight },attrs:{\"title\":_vm.title,\"visible\":_vm.visible,\"width\":_vm.width,\"close-on-click-modal\":_vm.closeOnClickModal,\"before-close\":_vm.handleClose},on:{\"update:visible\":function($event){_vm.visible=$event},\"opened\":_vm.openedDialog,\"closed\":_vm.closedDialog}},[_vm._t(\"operation\"),_c('div',{staticStyle:{\"padding\":\"0 20px\"}},[_c('el-divider',{staticClass:\"dialog-top-divider\"})],1),(_vm.dialogSearchFormVisibility)?_c('portal-form',{ref:\"dialogSearchForm\",staticClass:\"dialog-search-form\",attrs:{\"needBottomLine\":_vm.needSearchFormBottomLine,\"form-config-list\":_vm.searchForm.formConfigList,\"form-data\":_vm.searchForm.formData,\"form-rules\":_vm.formRules,\"needOperateBtn\":_vm.needSearchOperateBtn,\"searchBtnLoading\":_vm.searchLoading,\"smallAutoColumn\":_vm.smallAutoColumn,\"bigAutoColumn\":_vm.bigAutoColumn},on:{\"common-enter-event\":_vm.enterEvent,\"reset-btn-click\":_vm.reset,\"search-btn-click\":_vm.search}}):_vm._e(),(_vm.dialogTableVisibility)?_c('div',{staticClass:\"table-container\"},[_c('table-page',{ref:\"dialogTable\",attrs:{\"is-check\":_vm.dialogTable.isCheck || true,\"is-search\":_vm.tableIsSearch,\"columns\":_vm.dialogTable.columns || [],\"has-pagination\":_vm.dialogTable.hasPagination || false,\"pagination\":_vm.dialogTable.paginationConfig || {},\"getTableData\":_vm.dialogTable.getTableData,\"id-key\":_vm.dialogTable.idKey || 'id',\"isSingleCheck\":_vm.isSingleCheck},on:{\"selection-change\":_vm.onSelectionChange,\"single-selection-change\":_vm.singleChange}})],1):_vm._e(),_c('div',{staticStyle:{\"padding\":\"0 20px\"}},[(_vm.configFormBottomLine)?_c('el-divider',{staticClass:\"config-form-bottomLine\"}):_vm._e()],1),(_vm.dialogConfigFormVisibility)?_c('portal-form',{ref:\"dialogConfigForm\",staticClass:\"dialogConfigForm\",attrs:{\"needBottomLine\":false,\"form-config-list\":_vm.configForm.formConfigList,\"form-data\":_vm.configForm.formData,\"form-rules\":_vm.configFormRules,\"needOperateBtn\":_vm.needOperateBtn,\"smallAutoColumn\":_vm.configForm.configSmall || 1,\"bigAutoColumn\":_vm.configForm.configBig || 1}}):_vm._e(),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",on:{\"click\":function($event){$event.preventDefault();return _vm.handleCancelClick.apply(null, arguments)}}},[_vm._v(_vm._s(_vm.cancelText))]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleConfirmClick}},[_vm._v(_vm._s(_vm.confirmText))])],1)],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <el-dialog\n    :title=\"title\"\n    :visible.sync=\"visible\"\n    :width=\"width\"\n    class=\"dialog-portal\"\n    :class=\"{ 'dialog-overflow': isOverflowHeight }\"\n    :close-on-click-modal=\"closeOnClickModal\"\n    :before-close=\"handleClose\"\n    @opened=\"openedDialog\"\n    @closed=\"closedDialog\"\n  >\n    <slot name=\"operation\"></slot>\n    <div style=\"padding: 0 20px\">\n      <el-divider class=\"dialog-top-divider\"></el-divider>\n    </div>\n    <portal-form\n      v-if=\"dialogSearchFormVisibility\"\n      class=\"dialog-search-form\"\n      ref=\"dialogSearchForm\"\n      :needBottomLine=\"needSearchFormBottomLine\"\n      :form-config-list=\"searchForm.formConfigList\"\n      :form-data=\"searchForm.formData\"\n      :form-rules=\"formRules\"\n      :needOperateBtn=\"needSearchOperateBtn\"\n      :searchBtnLoading=\"searchLoading\"\n      :smallAutoColumn=\"smallAutoColumn\"\n      :bigAutoColumn=\"bigAutoColumn\"\n      @common-enter-event=\"enterEvent\"\n      @reset-btn-click=\"reset\"\n      @search-btn-click=\"search\"\n    ></portal-form>\n    <div v-if=\"dialogTableVisibility\" class=\"table-container\">\n      <table-page\n        ref=\"dialogTable\"\n        :is-check=\"dialogTable.isCheck || true\"\n        :is-search=\"tableIsSearch\"\n        :columns=\"dialogTable.columns || []\"\n        :has-pagination=\"dialogTable.hasPagination || false\"\n        :pagination=\"dialogTable.paginationConfig || {}\"\n        :getTableData=\"dialogTable.getTableData\"\n        :id-key=\"dialogTable.idKey || 'id'\"\n        :isSingleCheck=\"isSingleCheck\"\n        @selection-change=\"onSelectionChange\"\n        @single-selection-change=\"singleChange\"\n      ></table-page>\n    </div>\n    <div style=\"padding: 0 20px\">\n      <el-divider class=\"config-form-bottomLine\" v-if=\"configFormBottomLine\"></el-divider>\n    </div>\n    <portal-form\n      v-if=\"dialogConfigFormVisibility\"\n      class=\"dialogConfigForm\"\n      ref=\"dialogConfigForm\"\n      :needBottomLine=\"false\"\n      :form-config-list=\"configForm.formConfigList\"\n      :form-data=\"configForm.formData\"\n      :form-rules=\"configFormRules\"\n      :needOperateBtn=\"needOperateBtn\"\n      :smallAutoColumn=\"configForm.configSmall || 1\"\n      :bigAutoColumn=\"configForm.configBig || 1\"\n    ></portal-form>\n    <div slot=\"footer\">\n      <button class=\"cancel-button\" @click.prevent=\"handleCancelClick\">{{ cancelText }}</button>\n      <el-button type=\"primary\" size=\"small\" v-preventReClick @click=\"handleConfirmClick\">{{ confirmText }}</el-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport PortalForm from '@/components/portal-form';\nimport TablePage from '@/components/tablePage';\nexport default {\n  name: 'portalDialog',\n  components: {\n    PortalForm,\n    TablePage,\n  },\n  props: {\n    title: {\n      type: String,\n      default: '',\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: false,\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n    },\n    isOverflowHeight: {\n      type: Boolean,\n      default: false,\n    },\n    width: {\n      type: String,\n      default: '800px',\n    },\n    cancelText: {\n      type: String,\n      default: 'Cancel',\n    },\n    confirmText: {\n      type: String,\n      default: 'Confirm',\n    },\n    searchForm: {\n      type: Object,\n      default: null,\n    },\n    formRules: {\n      type: Object,\n      default: () => ({}),\n    },\n    searchLoading: {\n      type: Boolean,\n      default: false,\n    },\n    smallAutoColumn: {\n      type: Number,\n      default: 2,\n      validate: (value) => {\n        return !(24 % value);\n      },\n    },\n    bigAutoColumn: {\n      type: Number,\n      default: 2,\n      validate: (value) => {\n        return !(24 % value);\n      },\n    },\n    enterEvent: {\n      type: Function,\n      default: () => {},\n    },\n    // table-property\n    dialogTable: {\n      type: Object,\n      default: () => ({}),\n    },\n    // configForm-property\n    configForm: {\n      type: Object,\n      default: () => ({}),\n    },\n    configFormRules: {\n      type: Object,\n      default: () => ({}),\n    },\n    needSearchFormBottomLine: {\n      type: Boolean,\n      default: false,\n    },\n    configFormBottomLine: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      visible: false,\n    };\n  },\n  computed: {\n    dialogSearchFormVisibility() {\n      if (this.searchForm.formConfigList === undefined) return false;\n      return this.searchForm.formConfigList.length > 0 ? true : false;\n    },\n    dialogConfigFormVisibility() {\n      if (this.configForm.formConfigList === undefined) return false;\n      return this.configForm.formConfigList.length > 0;\n    },\n    dialogTableVisibility() {\n      return this.dialogTable && this.dialogTable.columns.length > 0 ? true : false;\n    },\n    needSearchOperateBtn() {\n      if (this.searchForm.needOperateBtn === undefined) {\n        return true;\n      } else if (this.searchForm.needOperateBtn) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    needOperateBtn() {\n      if (this.configForm.needOperateBtn) {\n        return this.configForm.needOperateBtn;\n      } else {\n        return false;\n      }\n    },\n    tableIsSearch() {\n      if (this.dialogTable.isSearch) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    isSingleCheck() {\n      if (this.dialogTable.isSingleCheck) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    onSelectionChange() {\n      if (this.dialogTable.onSelectionChange) {\n        return this.dialogTable.onSelectionChange;\n      } else {\n        return () => {};\n      }\n    },\n    singleChange() {\n      if (this.dialogTable.singleChange) {\n        return this.dialogTable.singleChange;\n      } else {\n        return () => {};\n      }\n    },\n  },\n  watch: {\n    dialogVisible: {\n      handler(value) {\n        this.visible = value;\n      },\n      immediate: true,\n    },\n    visible: {\n      handler(newVal) {\n        this.$emit('show-dialog', newVal);\n        this.$emit('update:dialogVisible', newVal);\n      },\n    },\n  },\n  methods: {\n    handleClose() {\n      this.visible = false;\n    },\n    handleCancelClick() {\n      this.$emit('cancel-btn-click');\n    },\n    handleConfirmClick() {\n      this.$emit('confirm-btn-click');\n    },\n    closedDialog() {\n      this.$emit('closed-dialog');\n    },\n    openedDialog() {\n      this.$emit('opened-dialog');\n    },\n    reset() {\n      this.$emit('search-reset');\n    },\n    search() {\n      this.$refs.dialogSearchForm.validate((result) => {\n        if (result) {\n          this.dialogTable.isSearch = true;\n          this.$emit('update:searchLoading', true);\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n/deep/ .el-dialog__body {\n  margin: 0;\n  padding: 0 4px;\n}\n.dialog-overflow {\n  height: 87vh;\n  /deep/ .el-dialog__body {\n    overflow-y: scroll;\n    margin: 0;\n    padding: 0 4px;\n    max-height: calc(72vh - 150px);\n  }\n}\n/deep/ .el-divider {\n  margin-top: 24px;\n  margin-bottom: 0;\n}\n/deep/ .el-dialog__header {\n  padding: 24px 0 0 24px;\n}\n.cancel-button {\n  padding: 7px 15px;\n  height: 32px;\n  border-radius: 4px;\n  background-color: $base-menu-background;\n  border: 1px solid $--line_color--regular;\n  font-size: 14px;\n  color: $--text_color--strong;\n  box-sizing: border-box;\n  cursor: pointer;\n  margin-right: 8px;\n}\n.table-container {\n  padding: 20px;\n  .table-page-container {\n    /deep/.table-region {\n      .el-table__header-wrapper {\n        table {\n          thead {\n            .cell::after {\n              height: 13px;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/deep/ .config-form-bottomLine {\n  margin: 0;\n}\n/deep/ .dialog-top-divider {\n  height: 1px;\n  background-color: $base-menu-light-background;\n  box-shadow: 0px -1px 0px $--line_color--divider;\n  margin: 24px 0 0 0;\n}\n</style>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=090905a0&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=090905a0&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"090905a0\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=090905a0&prod&lang=scss&scoped=true&\""],"sourceRoot":""}