{"version":3,"sources":["webpack:///./src/views/task-center/page/myto-do/index.vue","webpack:///src/views/task-center/page/myto-do/index.vue","webpack:///./src/views/task-center/page/myto-do/index.vue?bafb","webpack:///./src/views/task-center/page/myto-do/index.vue?49ea","webpack:///./src/views/task-center/page/myto-do/index.vue?a9e3"],"names":["render","_vm","this","_c","_self","staticClass","_v","_s","projectObj","title","desc","ref","attrs","searchFormRule","searchLoading","formConfigList","formData","on","resetSearch","search","todoInfoList","pageSize","sortTime","searchTableLoading","checkTaskChange","handleSizeChange","handleSortConditions","processing","delegate","taskNameDialogVisible","closeDialog","$event","formRules","taskNameSearchForm","dialogTaskNameFormBtnLoading","selectTaskDialogSearch","selectTaskDialogReset","dialogTable","columns","getTableData","isSearch","singleChange","taskNameCount","taskNamePageSize","taskNameHasData","handleTaskNameSizeChange","slot","preventDefault","apply","arguments","$t","directives","name","rawName","comfirmTaskNameHandler","taskProcessDialogVisible","handleCancelClick","processSearchForm","processFormRules","checkOptChange","model","value","operation","callback","$$v","$set","expression","initialSubmit","handleConfirmClick","processOperationDialogVisible","handleProcessCancelClick","processOptFormRules","processOperationFormData","_l","processOptionLists","item","key","label","test","currentData","actions","investigateOperator","_e","class","isCheckError","selectOperatorList","index","removeSelecteOperator","roleName","userName","openMultiCheckDilog","validityPeriod","invesCustomizedDay","processOptionTimeForm","customizedDay","invesCustomizedHours","customizedHours","invesCustomizedMinutes","customizedMinutes","remark","handleProcessConfirmClick","delegateDialogVisible","delegateSearchFrom","delegateConfigForm","delegateDialogTable","configFormRules","delegateSearchLoading","delegateCloseDialog","delegateDialogReset","comfirmDelegateHandler","checkChange","checkRadio","selectProcessOptDialogVisible","processOptSearchFrom","selectProcessOptDialogTable","selectProcessOptSearchLoading","selectProcessOptCloseDialog","selectProcessOptDialogReset","comfirmselectProcessOptHandler","processCheckChange","assigneeType","processComfirmDialogVisible","processComfirmCloseDialog","handleComfirmCancelClick","handleConfirmSbmitClick","notificationDialogVisible","staticRenderFns","components","PortalForm","NotificationDialog","TodoInfo","PortalDialog","TablePage","PortalPagination","data","validator","message","trigger","checkLists","todochecked","searchFormPriority","searchFormTaskType","searchFormStatus","taskNo","priority","taskName","taskType","status","dueTime","creationTime","pickerOptions","onPick","maxDate","minDate","disabledDate","curSelectTaskNameToTaskType","selectTaskName","tempTaskName","todoInfoLists","sortData","count","taskNameSearchLoading","selectTaskNameFormData","prop","align","isSingleCheck","taskNameDialogList","switchText","slotName","formItemClass","comp","bind","clearable","type","needOperateBtn","required","delegateConfigFormData","resetDueTime","comments","newSearchType","delegateSearchFromData","operatorType","shortCode","firstName","middleName","lastName","hasPagination","paginationConfig","total","pageIndex","onSelectionChange","delegateDialigSelectData","delegateRoleSearchFormConfigList","placeholder","options","delegateRoleSearchFormData","roleCategory","tempDelegateTableCol","tempTaskHandle","shortCodeConfig","selectProcessOptSingleCheck","tempSingleCheck","tempMultiCheck","computed","slots","icon","underline","event","click","change","format","sameGroup","rules","require","split","filter","map","watch","handler","deep","created","dayjs","queryWorkFlowDataDict","dictCodes","beforeRouteEnter","next","vm","methods","customizedDayValidator","customizedHoursValidator","customizedMinutesValidator","getFutureTime","nowData","openSingleCheckDilog","searchFormTaskTypeChange","queryMyToDoTaskLists","tskType","taskId","category","pageNo","createTimeFrom","createTimeTo","sortingMode","queryMyToDoTask","taskVO","res","selectOperatorListValidator","Object","isAdd","taskTypeCodetoLabel","taskTypeCondition","taskNameCondition","header","success","list","processId","assignee","roleId","operatorId","params","actionType","processList","isBatch","isResetExpireTime","taskExpireTimeInterval","batchProcess","taskNameDialigSelectChange","toLocaleLowerCase","checkProcess","isSameTypeList","checkDelegate","switchTextChange","val","singleCheckChange","multiCheckChange","delegateDialigSelectChange","qeuryRoleData","selectType","queryRole","tempData","resolve","totalRecords","confirm","cancelButtonText","confirmButtonText","then","operatorName","getDelegateDialogData","queryCurrentHandler","component"],"mappings":"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8CAEAC,gBACAC,mBACA2H,sBACAC,gBACAhH,4BACAE,mBACA1C,gBACA,CACAoJ,iBACAvF,gBACA4F,2BAEA,CACA3F,eACA4F,uBACAN,cACAvF,aACA8F,gBACAC,MACAC,aACAC,mBAIA7J,UACA8C,oBACAqC,WAEA2E,mBAEAtG,0BACAV,oBACAqC,UACAlB,uBACAU,kBACAxB,kBAEAI,qBACAT,YAAAiH,YAAAvC,sCAAAC,mBACAxD,sBAAA8F,YAAAvC,sCAAAC,mBACA9C,iBAAAoF,YAAAvC,sCAAAC,mBACApD,oBACA,CACA0F,YACAvC,sCACAC,iBACAF,6CAGApC,SAAA4E,YAAAvC,gCAAAC,kBAEA5C,uBACAC,iBACAE,mBACAE,sBAEAb,sBACAlB,iBACAT,kCACA2C,yBACAW,iCACAgE,wBACAC,gBACAC,aAEAC,iBACAC,wBACAC,gBACAC,aACA7F,YACA8F,aACAC,cACAC,aAEAjF,qBACAlE,SACA,CACAuC,qCACAsF,gBACAC,cAEA,CACAvF,sCACAsF,iBACAC,cAEA,CACAvF,uCACAsF,kBACAC,cAEA,CACAvF,qCACAsF,gBACAC,eAGA5H,YACA6H,iBACAqB,iBACAC,kBACAC,QACAC,YACAxK,YAEAkB,wCACAuJ,mDAEAC,4BACArF,yBACAS,iCACAJ,sBACAN,iBACAwE,eAAAF,YAAAvC,uBAAAC,iBACAyC,WAAAH,YAAAvC,mCAAAC,kBAEAuD,kCACA,CACAnH,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,yCACAD,mBACAuF,oBACAO,iBACAwB,SACA,CACArI,SACAgB,aAEA,CACAhB,aACAgB,+BAEA,CACAhB,aACAgB,sBAEA,CACAhB,aACAgB,eAEA,CACAhB,aACAgB,aAGA8F,MACAsB,oDAIAE,4BACA3G,YACA4G,iBAEAC,wBACA5E,+BACA6E,kBACAtK,2BACAuK,iBACA1H,yCACA4F,2BACA7F,gBACAuF,iBACAO,gBACAC,MACAC,aACAqB,kDAGAO,+BACAC,mBACAC,kBACAlF,wBACAN,6BACA5E,SACA,CACAuC,qCACAsF,gBACAC,cAEA,CACAvF,sCACAsF,iBACAC,cAEA,CACAvF,uCACAsF,kBACAC,cAEA,CACAvF,qCACAsF,gBACAC,eAGA5H,YACA6H,iBACAqB,iBACAC,kBACAC,QACAC,YACAxK,YAEAkB,wCACAE,oCACAqJ,yCAEA1G,gBACAL,iBAGA4H,UACA9L,iBACA,yBAEAE,iBACA,OACA,CACA8D,mCACAD,aACAuF,cACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,qCACAD,eACAuF,gBACAO,iBACAwB,gCACAvB,MACAsB,kDAGA,CACAxB,+BACA5F,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,kDAEAW,OACA,CACAlC,eACAtH,cACA+B,wBACAwF,MACAkC,oBACAC,cAEAC,OACAC,WACA,8BACA,2EACA,kCAMA,CACAnI,qCACAD,eACAuF,gBACAO,iBACAwB,gCACAvB,MACAsB,iDAEAc,OACAE,uCAGA,CACApI,mCACAD,aACAuF,cACAO,iBACAwB,8BACAvB,MACAsB,mDAGA,CACAxB,yBACA5F,oCACAsF,eACAvF,cACA8F,sBACAC,MACAuC,6BACArC,gBACAoB,iDACA,uCAGA,CACApH,yCACA4F,sCACA0C,aACAhD,oBACAO,MACA,CACA9F,mBACA8F,sBACAC,MACAsB,gDACA7B,cACAS,qBACAqC,6BACA,oCACA,sBACA,qCACA,uCACA,oCACA,oCAGA,CACAxC,SACAvF,oCAMAmB,qBACA,mCACA,CACAvF,gBACA,CACA8D,yCACAD,mBACAuF,oBACAO,iBACAwB,SACA,CACArI,oBACAgB,+BAEA,CACAhB,mBACAgB,sBAGA8F,MACAsB,mDAGA,CACApH,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,sCACAD,gBACAuF,iBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,uCACAD,iBACAuF,kBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,mDAIAjL,sCAGA,CACAD,qDACAC,2CAIAiG,uBACA,qCACA,CACAlG,gBACA,CACA8D,yCACAD,mBACAuF,gBACAO,iBACAwB,SACA,CACArI,oBACAgB,+BAEA,CACAhB,mBACAgB,sBAGA8F,MACAsB,mDAGA,CACApH,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,sCACAD,gBACAuF,iBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,uCACAD,iBACAuF,kBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,mDAIAjL,sCAGA,CACAD,qDACAC,2CAIAuF,qBACA,OACAxF,gBACA,CACA8D,uDACAD,mBACAuF,oBACAO,iBACAC,MACAyC,QAAAC,aACA,8BACAzC,aACAqB,iDAEAc,OACAE,+BAGA,CACAxC,kCACA5F,mDACAD,eACAuF,gBACAO,gBACAC,MACAE,gBACAD,gBAIA5J,uCAGAiB,qBACA,OACAlB,gBACA,CACA8D,qCACAD,eACAuF,gBACAO,gBACAC,MACAC,aACAqB,kDAGA,CACApH,qCACAD,eACAuF,gBACAO,iBACAwB,gCACAvB,MACAsB,oDAIAjL,uCAGA0D,qBACA,uCACA,2DACA,gCACA4I,WACAC,yBACAC,QACA,KACA,OACA3J,QACAgB,4CAKA,WAIA4I,OACA,2CACA,OACA,gDAGA,6CACA,OACA,kDAGArC,wBACAsC,WACA,oCACA,+BACA,sDACA,sBACA,2EAGA,sDACA,sBACA,sDAGA,kBACA,yFAGA,+BACA,oDACA,sBACA,yEAGA,oDACA,sBACA,oDAGA,kBACA,iFAIAC,SAEAxC,iBACA,mCAEA,8CADA,EACA,8BAEA,2BAIA,sCADA,EACA,8BAEA,4BAIAnK,UACA0M,WACA,gDACA,4BAEAC,SAEAnB,+BAEA,iDADA,IAOAoB,UACA,4BACAC,IACA,oFACA,8BACAA,+FAEAC,gBACAC,WACA,sCACA,gBACA,+BACA,yBAEA,SACA,6BACA,gFACA,0CACA,iCAAAlJ,YAAAhB,WAEA,0DACA,uEACA,wCACA,+BAAAgB,YAAAhB,WAEA,mEACA,uCAIAmK,wBACAC,MACAC,wBACAA,4BAGAC,SACAC,8BACA,iDACA,aACArK,KAEA,6DACA,2DACAA,eAGAsK,gCACA,mDACA,YACAtK,KAEA,6DACA,yDACAA,eAGAuK,kCACA,qDACA,YACAvK,KAEA,2DACA,yDACAA,eAGAwK,gBACA,iDACA,6CACA,+CAEA,gBACA,gBACA,gBAEA,iBAEA,WACA,iBAEA,OADAC,kBACA,uCAEAC,uBACA,oCACA,uCAEA/I,sBACA,oCACA,6DACA,uCAEAjE,oBACA,kBACA,yBACA,iBACA,gCAEAoB,4BACA,kBACA,aACA,iCACA,qEACA,4BACA,+BAGA6L,4BACA,mCACA,0BACA,yBAGAC,+BACA,2BACA,SACA,gCACA,iCACA,oCAEA,OADAC,WACA,IAIAA,yBAEA,OACAC,4BACA5F,gCACAD,sCACA8F,WACA3F,kCACAC,oCACA2F,SACAC,6CACAC,2CACAC,gDACA7N,YAEA8N,gBAAAC,WAAA,SACA,sBACA,2BACA,6BACA,gCACA,0CACAC,0BACA,8BACA,kBACA,kCACA,0BACA,kBACA,kCACA1K,gCACAA,eACAA,eACA,8CAKAxD,SACA,sCACA,IACA,sBACA,2BACA,gCAIAmO,mCACA,4DACA,mCAGA,OAFA,0BACAvL,aAGA,qBAEAA,MAGA7C,cACA,uCACA,6BAEAqE,yBACA,qEACA,gCACA,sEAGA6B,8BACA,0EACA,uCAEAC,8BACA,0EACAkI,8FACA,6EAEA,sBACA,2DACA,oBACA,4CACA,gDAGAjI,iCACA,qCACA,gDAEA,YADA,oDAGA,qEACA,uCACA,CACA,kCAEA,YADA,oDAGA,4CACA,qEACA,qCAGA9F,mBACA,aACA,6BACA,SACA,4BACA,sBACAgO,QAGA,GACA,6BAGA,4BAEA,CACA,mCACA,qBAEA,8BAGA,8BACA,SACA,KACA,iCACA,kDAEA,OADAC,WACA,IAGA,GACA,YAEAC,EADA,6BACAA,wBAEAA,sCAIA,OACAC,uDACAD,qBAEA,0BAGA,GAFA,qCACA,6BACA,yCACA,yCACA,wBACA,6BACA/K,sBACA,IAGA,OADA,0BACA,CACAiL,QAAAC,YACAC,yCAIApO,wBACA,gBACA,6BAEAU,wBACA,4CACA,8BAEAkC,2BACA,6BACA,8CAEA,0BAEA,wCACA,qBACA,sCACA,kDACA,wCACA,qDACA,gDACA,gDAEA8B,4BACA,uCACA,MACA,8BACA,CACA2J,sBACAlB,mBAGA,uCACA,KACA,0CACA,oCACA,KACA,QACA,8CACA,8CACA,+CACA,mCACAmB,iCACA,SACA,CAAAC,iBAEA,mBACA,CAAAC,wBAAA7E,gBAEA,CAAA6E,wBAAA7E,kBAIA,SACA,gBACA8E,GACAC,aACAlF,WACAmF,cACAC,YAGA,iBACAH,GACAC,aACAlF,WACAmF,cACAC,YAGA,eACA,8CACAF,mBAEAD,GACAC,aACAlF,WACAmF,cACAC,YAGA,iBACAH,GACAC,aACA5I,eACAwI,WACA9E,WACAmF,cACAC,YAGA,oBACA,kEACA,kEACAH,GACAE,cACAC,UACAF,aACAlF,WACAqF,uBAGA,8DACAJ,GACAE,cACAC,UACAF,aACAlF,WACAsF,yBACAD,wBAIA,+DACA,kEACAJ,GACAE,cACAC,UACA9I,eACA4I,aACAlF,WACA8E,WACAO,uBAGA,8DACAJ,GACAE,cACAC,UACA9I,eACA4I,aACAJ,WACA9E,WACAsF,yBACAD,yBAKAE,2BACA,6BACA,+CACA,2BACA,mBACA,4BACA,kCACA,oBACA,iCAIA,0CAKAlO,eACA,8BAEAT,cACA,8BACA,yBAEA4O,8BACA,qBAEApN,yBACA,8CAKA,GADA,kDACA,qDACA,gDACA,+DAEA,+BACA,iCACAqN,oBACArD,WACAE,OACA,0CAEA,mCACA,6CAGA,8BACA,0BApBA,qDAsBArL,yBACA,6BACA,sCAEAyO,gBACA,6CAEAjP,cACA,KACA,2BACA,+CAEA,mBACA,wBACA,2CACA,6BACA,6BACA,sBAEA,kBAEA,YADA,6GAGA,6BACA,SAUA,GATA,8BACA,yBACAkP,WACA,IAEAA,WACA,IAGA,eAEA,YADA,mCAIA,sCAEA,yDAGAC,iBACA,oEAEAlP,YACA,KACA,2BACA,+CAEA,2DACA,oBACA,gCAEA,6BACA,6BACA,6BACA,uBAEA,kBAEA,YADA,6GAGA,6BACA,SASA,GARA,+BACA,wBACAiP,WAEAA,WAEA,IAEA,eAEA,YADA,wFAIA,2DACA,mCAEA,yDAGAE,oBACAC,8BAEAC,qBACA,wBAEAC,oBACA,uBAEAC,8BACA,iCAEAxK,sBACA,+BACA,+CAEA,kEACA,8BACA,4BAEAC,sBACA,kEACA2I,sFACA,qEAEA,sBACA,2DACA,oBACA,4CACA,wCAGAzI,eACA,YACA,uFACA,kCACA,CACAjC,iCACAsF,gBACAC,cAEA,CACAvF,wCACAsF,mBACAC,cAEA,CACAvF,yCACAsF,oBACAC,eAGA,yDACA,oBACA,yCAGA,2DACA,iEACA,6BAGA7C,sBACA,YACA,+FACA,0CACA,CACA1C,iCACAsF,gBACAC,cAEA,CACAvF,wCACAsF,mBACAC,cAEA,CACAvF,yCACAsF,oBACAC,eAGA,iEACA,oBACA,iDAGA,mEACA,yEACA,mCACA,oBACA,iDAIAgH,gBACA,OACAC,kBACA7L,kDACA4G,0DACA2C,2DACA1N,6DAEA,uBACAiQ,2BAKA,GAJA,sCACA,8BACA,qCACA,6CACA,4BACA,qBAEA,OADA3M,cACA,YACA,WACAA,6BACA,MACA,WACAA,uCACA,MACA,WACAA,8BACA,MACA,WACAA,uBACA,MACA,WACAA,oBACA,MACA,QACA,MAEA,WAEA,+CACA4M,cACA5M,oEAGA6M,GACA5B,gBACAE,cACA,uDACA,mDACA,wGAEA2B,8BAMA9N,kBACA,6CAEAH,oBACA,+BACA,+CAEA,2CACA,kCAEAY,qBACA,0CACA,GACA,YACAsN,sCACAC,iDACAC,qDAEAC,KACAxC,IACA,kBACA,+BACA,0BACA,CACAU,sBACAlB,mBAGA,0BACA,gDACA,cACA,qBACAuB,mBAGAK,gBACAL,aACAlF,gDACAoF,UACAD,gBACA,SACA,6BACA,iCACA,+CACA,mBACA,4BACA,iCAKA,WAKAxJ,yBACA,iEACA,aACA,yCAEA,YADA,oDAGA,+BACA,0BACA,CACAkJ,sBACAlB,mBAGA,IACA,6BACArH,IACA,2BACAA,KAEA,2CACA,SACA,CAAAyI,iBAEA,CAAAC,wBAAA7E,eAAAyG,0BAEA,0CACA,gCAIArB,gBACAL,sBACAG,2DACArF,8CACAoF,UACAD,cACA7I,eACAwI,aACA,SACA,6BACA,0BACA,wCACA,+CACA,8BACA,4BACA,4BACA,8BAnBA,8DAwBAtI,4BACA,qCAEAC,2BACA,qCAEAC,4BAGAmK,wBACA,uBACA,OACA1G,gBACAlC,YACA1D,8CACA8F,gDACAC,kDACAC,8CACAsD,2DACA1N,6DAEA2Q,2BAKA,GAJA,sCACA,8BACA,qCACA,6CACA,2BAKA,OAJA3C,uBACAA,uBACAA,4BAEA,UAKA,iCACA,OACA/D,gDACAwG,kDACAT,sBACAlI,YACAkC,gBACAhK,4DACA0N,4DAEA,0BAKA,GAJA,sCACA,8BACA,qCACA,6CACA,4BACA,qBAEApK,kBACA,IAEA,OACAiL,gBACAE,OACA2B,gCCl7D4X,I,wBCQxXQ,EAAY,eACd,EACAjS,EACA8H,GACA,EACA,KACA,WACA,MAIa,aAAAmK,E,6CCnBf,W","file":"js/chunk-0b0b5a27.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"my-todo-container\"},[_c('div',{staticClass:\"page-header\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.projectObj.title))]),_c('div',{staticClass:\"desc\"},[_vm._v(_vm._s(_vm.projectObj.desc))])]),_c('div',{staticClass:\"page-content\"},[_c('portal-form',{ref:\"searchFormRef\",staticClass:\"search-form\",attrs:{\"formRules\":_vm.searchFormRule,\"searchBtnLoading\":_vm.searchLoading,\"form-config-list\":_vm.formConfigList,\"form-data\":_vm.formData},on:{\"reset-btn-click\":_vm.resetSearch,\"search-btn-click\":_vm.search}}),_c('todo-info',{ref:\"todoinfo\",attrs:{\"todoInfoList\":_vm.todoInfoList,\"pageSize\":_vm.pageSize,\"sortCondition\":_vm.sortTime,\"searchLoading\":_vm.searchTableLoading},on:{\"check-change\":_vm.checkTaskChange,\"handle-size-change\":_vm.handleSizeChange,\"handle-sort-conditions\":_vm.handleSortConditions,\"processing\":_vm.processing,\"delegate\":_vm.delegate}})],1),_c('div',{staticClass:\"page-dialog\"},[_c('el-dialog',{ref:\"selectTaskNameDialogRef\",attrs:{\"title\":\"Select Task Name\",\"width\":\"800px\",\"visible\":_vm.taskNameDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.closeDialog},on:{\"update:visible\":function($event){_vm.taskNameDialogVisible=$event},\"closed\":_vm.closeDialog}},[_c('portal-form',{ref:\"dialogTaskNameForm\",staticClass:\"dialogTaskNameForm\",attrs:{\"formRules\":_vm.formRules,\"form-config-list\":_vm.taskNameSearchForm.formConfigList,\"form-data\":_vm.taskNameSearchForm.formData,\"needOperateBtn\":true,\"searchBtnLoading\":_vm.dialogTaskNameFormBtnLoading,\"smallAutoColumn\":2,\"bigAutoColumn\":2},on:{\"search-btn-click\":_vm.selectTaskDialogSearch,\"reset-btn-click\":_vm.selectTaskDialogReset}}),_c('table-page',{ref:\"taskNameTableRef\",attrs:{\"columns\":_vm.dialogTable.columns,\"getTableData\":_vm.dialogTable.getTableData,\"is-search\":_vm.dialogTable.isSearch,\"is-check\":true,\"isSingleCheck\":true},on:{\"single-selection-change\":_vm.dialogTable.singleChange}}),_c('div',{staticClass:\"dialog-pagination\"},[_c('portal-pagination',{ref:\"taskNameDialogPageRef\",attrs:{\"total\":_vm.taskNameCount,\"pageSize\":_vm.taskNamePageSize,\"hidden\":_vm.taskNameHasData},on:{\"pagination\":_vm.handleTaskNameSizeChange}})],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.closeDialog.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.comfirmTaskNameHandler}},[_vm._v(_vm._s(this.$t('common.button.confirm')))])],1)],1),_c('el-dialog',{staticClass:\"process-dialog\",attrs:{\"title\":\"Task Processing\",\"width\":\"448px\",\"visible\":_vm.taskProcessDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.handleCancelClick},on:{\"update:visible\":function($event){_vm.taskProcessDialogVisible=$event},\"closed\":_vm.handleCancelClick}},[_c('portal-form',{ref:\"dialogProcessForm\",staticClass:\"dialogProcessForm\",attrs:{\"form-config-list\":_vm.processSearchForm.formConfigList,\"form-data\":_vm.processSearchForm.formData,\"form-rules\":_vm.processFormRules,\"needOperateBtn\":false,\"needBottomLine\":false,\"smallAutoColumn\":1,\"bigAutoColumn\":1}},[_c('template',{slot:\"operationRadio\"},[_c('el-form-item',{attrs:{\"prop\":\"operator\",\"label\":\"Action\"}},[_c('el-radio-group',{on:{\"change\":_vm.checkOptChange},model:{value:(_vm.processSearchForm.formData.operation),callback:function ($$v) {_vm.$set(_vm.processSearchForm.formData, \"operation\", $$v)},expression:\"processSearchForm.formData.operation\"}},[_c('el-radio',{attrs:{\"label\":\"approve\"}},[_vm._v(\"Approve\")]),_c('el-radio',{attrs:{\"label\":\"reject\"}},[_vm._v(\"Reject\")])],1)],1),_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.processSearchForm.formData.operation === 'reject'),expression:\"processSearchForm.formData.operation === 'reject'\"}]},[_c('el-checkbox',{model:{value:(_vm.initialSubmit),callback:function ($$v) {_vm.initialSubmit=$$v},expression:\"initialSubmit\"}},[_vm._v(\"Let Initiator Modify and Resubmit\")])],1)],1)],2),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.handleCancelClick.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleConfirmClick}},[_vm._v(_vm._s(this.$t('common.button.submit')))])],1)],1),_c('el-dialog',{staticClass:\"process-dialog\",attrs:{\"title\":\"Task Processing\",\"width\":\"448px\",\"visible\":_vm.processOperationDialogVisible,\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.processOperationDialogVisible=$event},\"closed\":_vm.handleProcessCancelClick}},[_c('el-form',{ref:\"processOptForm\",staticClass:\"processOptForm\",attrs:{\"rules\":_vm.processOptFormRules,\"model\":_vm.processOperationFormData,\"label-position\":\"top\"}},[_c('el-form-item',{staticClass:\"process-operation-radio\",attrs:{\"prop\":\"operation\",\"label\":\"Action\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.operation),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"operation\", $$v)},expression:\"processOperationFormData.operation\"}},_vm._l((_vm.processOptionLists),function(item){return _c('el-radio',{key:item.value,attrs:{\"label\":item.value}},[_vm._v(_vm._s(item.label))])}),1)],1),_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.processOperationFormData.operation === 'reject' && /backinitiator/.test(_vm.currentData.actions)),expression:\"processOperationFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"}]},[_c('el-checkbox',{model:{value:(_vm.processOperationFormData.initialSubmit),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"initialSubmit\", $$v)},expression:\"processOperationFormData.initialSubmit\"}},[_vm._v(\"Let Initiator Modify and Resubmit\")])],1),(_vm.processOperationFormData.operation === 'investigate')?_c('el-form-item',{attrs:{\"prop\":\"investigateOperator\",\"label\":\"Operator\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.investigateOperator),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"investigateOperator\", $$v)},expression:\"processOperationFormData.investigateOperator\"}},[_c('el-radio',{attrs:{\"label\":\"initiator\"}},[_vm._v(\"Initiator\")]),_c('el-radio',{attrs:{\"label\":\"others\"}},[_vm._v(\"Others\")])],1)],1):_vm._e(),(\n            _vm.processOperationFormData.investigateOperator === 'others' &&\n            _vm.processOperationFormData.operation === 'investigate'\n          )?_c('el-form-item',{staticClass:\"org-short-code\",attrs:{\"prop\":\"selectOperatorList\"}},[_c('div',{staticClass:\"multi-select-container\",class:{ 'err-border': _vm.isCheckError }},[_c('div',{staticClass:\"select-tags\"},[_c('div',{staticClass:\"select-scroll\"},_vm._l((_vm.selectOperatorList),function(item,index){return _c('el-tag',{key:index,attrs:{\"type\":\"info\",\"closable\":true},on:{\"close\":function($event){return _vm.removeSelecteOperator(item)}}},[_vm._v(\" \"+_vm._s(item.roleName || item.userName)+\" \")])}),1)]),_c('div',{staticClass:\"icon-e\"},[_c('span',{staticClass:\"el-icon-ellipsis\",on:{\"click\":_vm.openMultiCheckDilog}})])])]):_vm._e(),(_vm.processOperationFormData.operation === 'investigate')?_c('el-form-item',{attrs:{\"prop\":\"validityPeriod\",\"label\":\"Validity Period\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.validityPeriod),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"validityPeriod\", $$v)},expression:\"processOperationFormData.validityPeriod\"}},[_c('el-radio',{attrs:{\"label\":\"sameAsOriginal\"}},[_vm._v(\"Same as Original\")]),_c('el-radio',{attrs:{\"label\":\"customized\"}},[_vm._v(\"Customized\")])],1)],1):_vm._e(),(\n            _vm.processOperationFormData.operation === 'investigate' &&\n            _vm.processOperationFormData.validityPeriod === 'customized'\n          )?_c('el-row',{staticClass:\"task-detail-col\",attrs:{\"gutter\":6}},[_c('el-col',{attrs:{\"span\":4}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedDay,\"prop\":\"customizedDay\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Days')},model:{value:(_vm.processOptionTimeForm.customizedDay),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedDay\", $$v)},expression:\"processOptionTimeForm.customizedDay\"}})],1)],1),_c('el-col',{attrs:{\"span\":3}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Days')))]),_c('el-col',{attrs:{\"span\":4}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedHours,\"prop\":\"customizedHours\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Hours')},model:{value:(_vm.processOptionTimeForm.customizedHours),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedHours\", $$v)},expression:\"processOptionTimeForm.customizedHours\"}})],1)],1),_c('el-col',{attrs:{\"span\":3}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Hours')))]),_c('el-col',{attrs:{\"span\":5}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedMinutes,\"prop\":\"customizedMinutes\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Minutes')},model:{value:(_vm.processOptionTimeForm.customizedMinutes),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedMinutes\", $$v)},expression:\"processOptionTimeForm.customizedMinutes\"}})],1)],1),_c('el-col',{attrs:{\"span\":4}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Minutes')))])],1):_vm._e(),_c('el-form-item',{attrs:{\"label\":\"Remark\",\"prop\":\"remark\"}},[_c('el-input',{attrs:{\"type\":\"textarea\"},model:{value:(_vm.processOperationFormData.remark),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"remark\", $$v)},expression:\"processOperationFormData.remark\"}})],1)],1),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();_vm.processOperationDialogVisible = false}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleProcessConfirmClick}},[_vm._v(_vm._s(this.$t('common.button.submit')))])],1)],1),_c('portal-dialog',{ref:\"delegateDialogRef\",attrs:{\"title\":\"Delegate Task\",\"dialogVisible\":_vm.delegateDialogVisible,\"searchForm\":_vm.delegateSearchFrom,\"needSearchFormBottomLine\":true,\"configFormBottomLine\":true,\"isOverflowHeight\":true,\"formRules\":_vm.formRules,\"configForm\":_vm.delegateConfigForm,\"dialogTable\":_vm.delegateDialogTable,\"configFormRules\":_vm.configFormRules,\"searchLoading\":_vm.delegateSearchLoading},on:{\"update:dialogVisible\":function($event){_vm.delegateDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.delegateDialogVisible=$event},\"update:searchLoading\":function($event){_vm.delegateSearchLoading=$event},\"update:search-loading\":function($event){_vm.delegateSearchLoading=$event},\"close-dialog\":_vm.delegateCloseDialog,\"search-reset\":_vm.delegateDialogReset,\"cancel-btn-click\":_vm.delegateCloseDialog,\"confirm-btn-click\":_vm.comfirmDelegateHandler}},[_c('template',{slot:\"operation\"},[_c('div',{staticClass:\"check-operator\"},[_c('div',{staticClass:\"check-label\"},[_vm._v(\"Select Type\")]),_c('el-radio-group',{on:{\"change\":_vm.checkChange},model:{value:(_vm.checkRadio),callback:function ($$v) {_vm.checkRadio=$$v},expression:\"checkRadio\"}},[_c('el-radio',{attrs:{\"label\":\"operator\"}},[_vm._v(\"Operator\")]),_c('el-radio',{attrs:{\"label\":\"role\"}},[_vm._v(\"Role\")])],1)],1)])],2),_c('portal-dialog',{ref:\"selectProcessOptDialogRef\",attrs:{\"title\":\"Investigate Task\",\"dialogVisible\":_vm.selectProcessOptDialogVisible,\"searchForm\":_vm.processOptSearchFrom,\"isOverflowHeight\":true,\"formRules\":_vm.formRules,\"dialogTable\":_vm.selectProcessOptDialogTable,\"searchLoading\":_vm.selectProcessOptSearchLoading},on:{\"update:dialogVisible\":function($event){_vm.selectProcessOptDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.selectProcessOptDialogVisible=$event},\"update:searchLoading\":function($event){_vm.selectProcessOptSearchLoading=$event},\"update:search-loading\":function($event){_vm.selectProcessOptSearchLoading=$event},\"close-dialog\":_vm.selectProcessOptCloseDialog,\"search-reset\":_vm.selectProcessOptDialogReset,\"cancel-btn-click\":_vm.selectProcessOptCloseDialog,\"confirm-btn-click\":_vm.comfirmselectProcessOptHandler}},[_c('template',{slot:\"operation\"},[_c('div',{staticClass:\"check-operator\"},[_c('div',{staticClass:\"check-label\"},[_vm._v(\"Select Type\")]),_c('el-radio-group',{on:{\"change\":_vm.processCheckChange},model:{value:(_vm.assigneeType),callback:function ($$v) {_vm.assigneeType=$$v},expression:\"assigneeType\"}},[_c('el-radio',{attrs:{\"label\":\"operator\"}},[_vm._v(\"Operator\")]),_c('el-radio',{attrs:{\"label\":\"role\"}},[_vm._v(\"Role\")])],1)],1)])],2),_c('el-dialog',{attrs:{\"width\":\"448px\",\"title\":\"Are you sure to sbumit?\",\"visible\":_vm.processComfirmDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.processComfirmCloseDialog},on:{\"update:visible\":function($event){_vm.processComfirmDialogVisible=$event},\"closed\":_vm.processComfirmCloseDialog}},[_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.handleComfirmCancelClick.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleConfirmSbmitClick}},[_vm._v(_vm._s(this.$t('common.button.submit')))])],1)]),_c('notification-dialog',{attrs:{\"dialogVisible\":_vm.notificationDialogVisible},on:{\"update:dialogVisible\":function($event){_vm.notificationDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.notificationDialogVisible=$event}}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"my-todo-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">{{ projectObj.title }}</div>\n      <div class=\"desc\">{{ projectObj.desc }}</div>\n    </div>\n    <div class=\"page-content\">\n      <portal-form\n        ref=\"searchFormRef\"\n        class=\"search-form\"\n        :formRules=\"searchFormRule\"\n        :searchBtnLoading=\"searchLoading\"\n        :form-config-list=\"formConfigList\"\n        :form-data=\"formData\"\n        @reset-btn-click=\"resetSearch\"\n        @search-btn-click=\"search\"\n      ></portal-form>\n      <todo-info\n        :todoInfoList=\"todoInfoList\"\n        :pageSize=\"pageSize\"\n        :sortCondition=\"sortTime\"\n        :searchLoading=\"searchTableLoading\"\n        @check-change=\"checkTaskChange\"\n        @handle-size-change=\"handleSizeChange\"\n        @handle-sort-conditions=\"handleSortConditions\"\n        @processing=\"processing\"\n        @delegate=\"delegate\"\n        ref=\"todoinfo\"\n      ></todo-info>\n    </div>\n    <div class=\"page-dialog\">\n      <!-- select-taskName-dialog -->\n      <el-dialog\n        title=\"Select Task Name\"\n        width=\"800px\"\n        ref=\"selectTaskNameDialogRef\"\n        :visible.sync=\"taskNameDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"closeDialog\"\n        @closed=\"closeDialog\"\n      >\n        <portal-form\n          class=\"dialogTaskNameForm\"\n          ref=\"dialogTaskNameForm\"\n          :formRules=\"formRules\"\n          :form-config-list=\"taskNameSearchForm.formConfigList\"\n          :form-data=\"taskNameSearchForm.formData\"\n          :needOperateBtn=\"true\"\n          :searchBtnLoading=\"dialogTaskNameFormBtnLoading\"\n          :smallAutoColumn=\"2\"\n          :bigAutoColumn=\"2\"\n          @search-btn-click=\"selectTaskDialogSearch\"\n          @reset-btn-click=\"selectTaskDialogReset\"\n        ></portal-form>\n        <table-page\n          ref=\"taskNameTableRef\"\n          :columns=\"dialogTable.columns\"\n          :getTableData=\"dialogTable.getTableData\"\n          :is-search=\"dialogTable.isSearch\"\n          :is-check=\"true\"\n          :isSingleCheck=\"true\"\n          @single-selection-change=\"dialogTable.singleChange\"\n        ></table-page>\n        <div class=\"dialog-pagination\">\n          <portal-pagination\n            :total=\"taskNameCount\"\n            :pageSize=\"taskNamePageSize\"\n            ref=\"taskNameDialogPageRef\"\n            @pagination=\"handleTaskNameSizeChange\"\n            :hidden=\"taskNameHasData\"\n          ></portal-pagination>\n        </div>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"closeDialog\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"comfirmTaskNameHandler\" v-preventReClick>{{\n            this.$t('common.button.confirm')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- task-processing-dialog -->\n      <el-dialog\n        title=\"Task Processing\"\n        class=\"process-dialog\"\n        width=\"448px\"\n        :visible.sync=\"taskProcessDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"handleCancelClick\"\n        @closed=\"handleCancelClick\"\n      >\n        <portal-form\n          class=\"dialogProcessForm\"\n          ref=\"dialogProcessForm\"\n          :form-config-list=\"processSearchForm.formConfigList\"\n          :form-data=\"processSearchForm.formData\"\n          :form-rules=\"processFormRules\"\n          :needOperateBtn=\"false\"\n          :needBottomLine=\"false\"\n          :smallAutoColumn=\"1\"\n          :bigAutoColumn=\"1\"\n        >\n          <template slot=\"operationRadio\">\n            <el-form-item prop=\"operator\" label=\"Action\">\n              <el-radio-group @change=\"checkOptChange\" v-model=\"processSearchForm.formData.operation\">\n                <el-radio label=\"approve\">Approve</el-radio>\n                <el-radio label=\"reject\">Reject</el-radio>\n              </el-radio-group>\n            </el-form-item>\n            <el-form-item v-show=\"processSearchForm.formData.operation === 'reject'\">\n              <el-checkbox v-model=\"initialSubmit\">Let Initiator Modify and Resubmit</el-checkbox>\n            </el-form-item>\n          </template>\n        </portal-form>\n        <div slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"handleCancelClick\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"handleConfirmClick\" v-preventReClick>{{\n            this.$t('common.button.submit')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- process-operation-dialog -->\n      <el-dialog\n        title=\"Task Processing\"\n        class=\"process-dialog\"\n        width=\"448px\"\n        :visible.sync=\"processOperationDialogVisible\"\n        :close-on-click-modal=\"false\"\n        @closed=\"handleProcessCancelClick\"\n      >\n        <el-form\n          :rules=\"processOptFormRules\"\n          :model=\"processOperationFormData\"\n          ref=\"processOptForm\"\n          class=\"processOptForm\"\n          label-position=\"top\"\n        >\n          <el-form-item class=\"process-operation-radio\" prop=\"operation\" label=\"Action\">\n            <el-radio-group v-model=\"processOperationFormData.operation\">\n              <el-radio v-for=\"item in processOptionLists\" :key=\"item.value\" :label=\"item.value\">{{\n                item.label\n              }}</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item\n            v-show=\"processOperationFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"\n          >\n            <el-checkbox v-model=\"processOperationFormData.initialSubmit\"\n              >Let Initiator Modify and Resubmit</el-checkbox\n            >\n          </el-form-item>\n          <el-form-item\n            v-if=\"processOperationFormData.operation === 'investigate'\"\n            prop=\"investigateOperator\"\n            label=\"Operator\"\n          >\n            <el-radio-group v-model=\"processOperationFormData.investigateOperator\">\n              <el-radio label=\"initiator\">Initiator</el-radio>\n              <el-radio label=\"others\">Others</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item\n            class=\"org-short-code\"\n            prop=\"selectOperatorList\"\n            v-if=\"\n              processOperationFormData.investigateOperator === 'others' &&\n              processOperationFormData.operation === 'investigate'\n            \"\n          >\n            <div class=\"multi-select-container\" :class=\"{ 'err-border': isCheckError }\">\n              <div class=\"select-tags\">\n                <div class=\"select-scroll\">\n                  <el-tag\n                    type=\"info\"\n                    v-for=\"(item, index) in selectOperatorList\"\n                    :key=\"index\"\n                    :closable=\"true\"\n                    @close=\"removeSelecteOperator(item)\"\n                  >\n                    {{ item.roleName || item.userName }}\n                  </el-tag>\n                </div>\n              </div>\n              <div class=\"icon-e\"><span class=\"el-icon-ellipsis\" @click=\"openMultiCheckDilog\"></span></div>\n            </div>\n          </el-form-item>\n          <el-form-item\n            prop=\"validityPeriod\"\n            v-if=\"processOperationFormData.operation === 'investigate'\"\n            label=\"Validity Period\"\n          >\n            <el-radio-group v-model=\"processOperationFormData.validityPeriod\">\n              <el-radio label=\"sameAsOriginal\">Same as Original</el-radio>\n              <el-radio label=\"customized\">Customized</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-row\n            v-if=\"\n              processOperationFormData.operation === 'investigate' &&\n              processOperationFormData.validityPeriod === 'customized'\n            \"\n            :gutter=\"6\"\n            class=\"task-detail-col\"\n          >\n            <el-col :span=\"4\">\n              <el-form-item :rules=\"invesCustomizedDay\" prop=\"customizedDay\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedDay\"\n                  :placeholder=\"$t('TAC.taskDetail.Days')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"3\">{{ $t('TAC.taskDetail.Days') }}</el-col>\n            <el-col :span=\"4\">\n              <el-form-item :rules=\"invesCustomizedHours\" prop=\"customizedHours\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedHours\"\n                  :placeholder=\"$t('TAC.taskDetail.Hours')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"3\">{{ $t('TAC.taskDetail.Hours') }}</el-col>\n            <el-col :span=\"5\">\n              <el-form-item :rules=\"invesCustomizedMinutes\" prop=\"customizedMinutes\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedMinutes\"\n                  :placeholder=\"$t('TAC.taskDetail.Minutes')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"4\">{{ $t('TAC.taskDetail.Minutes') }}</el-col>\n          </el-row>\n          <el-form-item label=\"Remark\" prop=\"remark\">\n            <el-input type=\"textarea\" v-model=\"processOperationFormData.remark\"></el-input>\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"processOperationDialogVisible = false\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"handleProcessConfirmClick\" v-preventReClick>{{\n            this.$t('common.button.submit')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- delegate-task-dialog -->\n      <portal-dialog\n        title=\"Delegate Task\"\n        ref=\"delegateDialogRef\"\n        :dialogVisible.sync=\"delegateDialogVisible\"\n        :searchForm=\"delegateSearchFrom\"\n        :needSearchFormBottomLine=\"true\"\n        :configFormBottomLine=\"true\"\n        :isOverflowHeight=\"true\"\n        :formRules=\"formRules\"\n        :configForm=\"delegateConfigForm\"\n        :dialogTable=\"delegateDialogTable\"\n        :configFormRules=\"configFormRules\"\n        :searchLoading.sync=\"delegateSearchLoading\"\n        @close-dialog=\"delegateCloseDialog\"\n        @search-reset=\"delegateDialogReset\"\n        @cancel-btn-click=\"delegateCloseDialog\"\n        @confirm-btn-click=\"comfirmDelegateHandler\"\n      >\n        <template slot=\"operation\">\n          <div class=\"check-operator\">\n            <div class=\"check-label\">Select Type</div>\n            <el-radio-group @change=\"checkChange\" v-model=\"checkRadio\">\n              <el-radio label=\"operator\">Operator</el-radio>\n              <el-radio label=\"role\">Role</el-radio>\n            </el-radio-group>\n          </div>\n        </template>\n      </portal-dialog>\n      <!-- select-process-operator-dialog -->\n      <portal-dialog\n        title=\"Investigate Task\"\n        ref=\"selectProcessOptDialogRef\"\n        :dialogVisible.sync=\"selectProcessOptDialogVisible\"\n        :searchForm=\"processOptSearchFrom\"\n        :isOverflowHeight=\"true\"\n        :formRules=\"formRules\"\n        :dialogTable=\"selectProcessOptDialogTable\"\n        :searchLoading.sync=\"selectProcessOptSearchLoading\"\n        @close-dialog=\"selectProcessOptCloseDialog\"\n        @search-reset=\"selectProcessOptDialogReset\"\n        @cancel-btn-click=\"selectProcessOptCloseDialog\"\n        @confirm-btn-click=\"comfirmselectProcessOptHandler\"\n      >\n        <template slot=\"operation\">\n          <div class=\"check-operator\">\n            <div class=\"check-label\">Select Type</div>\n            <el-radio-group @change=\"processCheckChange\" v-model=\"assigneeType\">\n              <el-radio label=\"operator\">Operator</el-radio>\n              <el-radio label=\"role\">Role</el-radio>\n            </el-radio-group>\n          </div>\n        </template>\n      </portal-dialog>\n      <!-- comfirm-dialog -->\n      <el-dialog\n        width=\"448px\"\n        title=\"Are you sure to sbumit?\"\n        :visible.sync=\"processComfirmDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"processComfirmCloseDialog\"\n        @closed=\"processComfirmCloseDialog\"\n      >\n        <div slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"handleComfirmCancelClick\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"handleConfirmSbmitClick\" v-preventReClick>{{\n            this.$t('common.button.submit')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- operation-notification-dialog -->\n      <notification-dialog :dialogVisible.sync=\"notificationDialogVisible\"></notification-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport cookie from '@/common/utils/cookie';\nimport PortalForm from '@/components/portal-form';\nimport TodoInfo from '@/views/task-center/component/todo-info';\nimport PortalDialog from '@/views/task-center/component/portal-dialog';\nimport NotificationDialog from '@/views/task-center/component/notification-dialog';\nimport TablePage from '@/components/tablePage';\nimport { taskHistoryRules, groupTaskRulus, dateValidateRule } from '@/views/task-center/validator/index';\nimport PortalPagination from '@/components/portal-pagination';\nimport {\n  queryMyToDoTask,\n  queryTaskName,\n  batchProcess,\n  queryRole,\n  queryCurrentHandler,\n  queryOrgCurrentHandler,\n  queryWorkFlowDataDict,\n} from '@/views/task-center/api/api-task-center';\nimport dayjs from 'dayjs';\n\nexport default {\n  name: 'myTodo',\n  components: {\n    PortalForm,\n    NotificationDialog,\n    TodoInfo,\n    PortalDialog,\n    TablePage,\n    PortalPagination,\n  },\n  data() {\n    return {\n      invesCustomizedDay: [\n        { validator: this.customizedDayValidator, message: 'Enter a value between 0 and 100.', trigger: 'change' },\n      ],\n      invesCustomizedHours: [\n        { validator: this.customizedHoursValidator, message: 'Enter a value between 0 and 23.', trigger: 'change' },\n      ],\n      invesCustomizedMinutes: [\n        { validator: this.customizedMinutesValidator, message: 'Enter a value between 0 and 59.', trigger: 'change' },\n      ],\n      notificationDialogVisible: false,\n      projectObj: {\n        title: this.$t('TAC.myTodo.title'),\n        desc: this.$t('TAC.myTodo.desc'),\n      },\n      checkLists: [],\n      searchTableLoading: false,\n      todochecked: false,\n      taskNameHasData: true,\n      searchLoading: false,\n      searchFormPriority: [{ label: 'All', value: '' }],\n      searchFormTaskType: [{ label: 'All', value: '' }],\n      searchFormStatus: [{ label: 'All', value: '' }],\n      formData: {\n        taskNo: '',\n        priority: '',\n        taskName: '',\n        taskType: '',\n        status: '',\n        dueTime: '',\n        creationTime: [],\n      },\n      pickerOptions: {\n        onPick: ({ maxDate, minDate }) => {\n          this.selectDate = minDate.getTime();\n          if (maxDate) {\n            this.selectDate = '';\n          }\n        },\n        disabledDate: (time) => {\n          if (this.selectDate !== '') {\n            const one = 30 * 24 * 3600 * 1000;\n            const minTime = this.selectDate - one;\n            const maxTime = this.selectDate + one;\n            return time.getTime() < minTime || time.getTime() > maxTime;\n          }\n        },\n      },\n      curSelectTaskNameToTaskType: '',\n      selectTaskName: {},\n      tempTaskName: {},\n      todoInfoList: {\n        todoInfoLists: [],\n        sortData: [],\n        taskType: true,\n        count: 0,\n      },\n      pageSize: 10,\n      sortTime: '',\n      // dialog-config-data\n      taskNameDialogVisible: false,\n      dialogTaskNameFormBtnLoading: false,\n      processOperationDialogVisible: false,\n      taskNameSearchLoading: false,\n      selectTaskNameFormData: {\n        taskName: '',\n        taskType: '',\n      },\n      dialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            prop: 'taskName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            prop: 'taskType',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: true,\n        getTableData: this.getTaskNameDialogData,\n        singleChange: this.taskNameDialigSelectChange,\n      },\n      taskNameCount: 0,\n      taskNamePageSize: 5,\n      taskNameDialogList: [],\n      switchText: 'No',\n      taskProcessDialogVisible: false,\n      processSearchForm: {\n        formConfigList: [\n          {\n            prop: 'operation',\n            key: 'operation',\n            slotName: 'operationRadio',\n          },\n          {\n            label: 'Remark',\n            formItemClass: 'remark',\n            prop: 'remark',\n            key: 'remark',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              type: 'textarea',\n            },\n          },\n        ],\n        formData: {\n          operation: 'approve',\n          remark: '',\n        },\n        needOperateBtn: false,\n      },\n      processOperationFormData: {\n        operation: 'approve',\n        remark: '',\n        investigateOperator: '',\n        validityPeriod: '',\n        initialSubmit: false,\n      },\n      processOptFormRules: {\n        operation: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        investigateOperator: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        validityPeriod: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        selectOperatorList: [\n          {\n            required: true,\n            message: 'Please select at least one.',\n            trigger: 'change',\n            validator: this.selectOperatorListValidator,\n          },\n        ],\n        remark: [{ required: true, message: 'Please enter Content.', trigger: 'blur' }],\n      },\n      processOptionTimeForm: {\n        customizedDay: '',\n        customizedHours: '',\n        customizedMinutes: '',\n      },\n      selectOperatorList: [],\n      initialSubmit: false,\n      processFormRules: groupTaskRulus(),\n      delegateDialogVisible: false,\n      selectProcessOptDialogVisible: false,\n      delegateConfigFormData: {\n        resetDueTime: false,\n        comments: '',\n      },\n      newSearchType: false,\n      delegateSearchFromData: {\n        operatorType: '',\n        shortCode: '',\n        userName: '',\n        firstName: '',\n        middleName: '',\n        lastName: '',\n      },\n      delegateDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: false,\n        hasPagination: true,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        getTableData: this.getDelegateDialogData,\n        onSelectionChange: this.delegateDialigSelectChange,\n      },\n      delegateDialigSelectData: [],\n      delegateSearchLoading: false,\n      selectProcessOptSearchLoading: false,\n      checkRadio: 'operator',\n      configFormRules: {\n        resetDueTime: [{ required: true, message: 'please enter', trigger: 'blur' }],\n        comments: [{ required: true, message: 'This field is mandatory.', trigger: 'blur' }],\n      },\n      delegateRoleSearchFormConfigList: [\n        {\n          label: this.$t('TAC.myTodo.roleName'),\n          key: 'roleName',\n          prop: 'roleName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.roleCategory'),\n          key: 'roleCategory',\n          prop: 'roleCategory',\n          comp: 'el-select',\n          options: [\n            {\n              value: '',\n              label: 'All',\n            },\n            {\n              value: '3000',\n              label: 'Organization Operator',\n            },\n            {\n              value: '5000',\n              label: 'Organization',\n            },\n            {\n              value: '7000',\n              label: 'Group',\n            },\n            {\n              value: '8000',\n              label: 'SP',\n            },\n          ],\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n      ],\n      delegateRoleSearchFormData: {\n        roleName: '',\n        roleCategory: '',\n      },\n      tempDelegateTableCol: [],\n      processComfirmDialogVisible: false,\n      tempTaskHandle: [],\n      formRules: taskHistoryRules(),\n      shortCodeConfig: {\n        label: this.$t('TAC.myTodo.orgShortCode'),\n        formItemClass: 'short-code',\n        key: 'shortCode',\n        prop: 'shortCode',\n        comp: 'el-input',\n        bind: {\n          clearable: true,\n          placeholder: this.$t('common.placeholder.enter'),\n        },\n      },\n      selectProcessOptSingleCheck: true,\n      tempSingleCheck: {},\n      tempMultiCheck: [],\n      assigneeType: 'operator',\n      selectProcessOptDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: true,\n        hasPagination: true,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        getTableData: this.getDelegateDialogData,\n        singleChange: this.singleCheckChange,\n        onSelectionChange: this.multiCheckChange,\n      },\n      isCheckError: false,\n      currentData: {},\n    };\n  },\n  computed: {\n    searchFormRule() {\n      return dateValidateRule();\n    },\n    formConfigList() {\n      return [\n        {\n          label: this.$t('TAC.myTodo.taskNo'),\n          key: 'taskNo',\n          prop: 'taskNo',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.priority'),\n          key: 'priority',\n          prop: 'priority',\n          comp: 'el-select',\n          options: this.searchFormPriority,\n          bind: {\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          formItemClass: 'org-short-code',\n          label: this.$t('TAC.myTodo.taskName'),\n          key: 'taskName',\n          prop: 'taskName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.select'),\n          },\n          slots: [\n            {\n              comp: 'el-link',\n              name: 'append',\n              class: 'short-code-icon',\n              bind: {\n                icon: 'el-icon-more',\n                underline: false,\n              },\n              event: {\n                click: () => {\n                  this.taskNameDialogVisible = true;\n                  this.taskNameSearchForm.formData.taskType = this.searchFormTaskType[0].value;\n                  this.dialogTable.isSearch = true;\n                },\n              },\n            },\n          ],\n        },\n        {\n          label: this.$t('TAC.myTodo.taskType'),\n          key: 'taskType',\n          prop: 'taskType',\n          comp: 'el-select',\n          options: this.searchFormTaskType,\n          bind: {\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n          event: {\n            change: this.searchFormTaskTypeChange,\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.status'),\n          key: 'status',\n          prop: 'status',\n          comp: 'el-select',\n          options: this.searchFormStatus,\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n        {\n          formItemClass: 'due-time',\n          label: this.$t('TAC.myTodo.dueTime'),\n          prop: 'dueTime',\n          key: 'dueTime',\n          comp: 'el-date-picker',\n          bind: {\n            format: 'dd/MM/yyyy HH:mm:ss',\n            type: 'datetime',\n            placeholder: this.$t('common.placeholder.select'),\n            'value-format': 'yyyy-MM-dd HH:mm:ss',\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.creationTime'),\n          formItemClass: 'form-special-date-box',\n          sameGroup: true,\n          prop: 'creationTime',\n          comp: [\n            {\n              key: 'creationTime',\n              comp: 'el-date-picker',\n              bind: {\n                placeholder: this.$t('common.placeholder.enter'),\n                align: 'right',\n                type: 'datetimerange',\n                format: 'dd/MM/yyyy HH:mm:ss',\n                'picker-options': this.pickerOptions,\n                'range-separator': '~',\n                'value-format': 'yyyy-MM-dd HH:mm:ss',\n                'default-time': ['00:00:00', '23:59:59'],\n                'start-placeholder': 'Please select',\n                'end-placeholder': 'Please select',\n              },\n            },\n            {\n              comp: 'i',\n              class: 'el-icon-date data_icon',\n            },\n          ],\n        },\n      ];\n    },\n    delegateSearchFrom() {\n      if (this.checkRadio === 'operator') {\n        return {\n          formConfigList: [\n            {\n              label: this.$t('TAC.myTodo.operatorType'),\n              key: 'operatorType',\n              prop: 'operatorType',\n              comp: 'el-select',\n              options: [\n                {\n                  value: 'orgOperator',\n                  label: 'Organization Operator',\n                },\n                {\n                  value: 'spOperator',\n                  label: 'SP Operator',\n                },\n              ],\n              bind: {\n                placeholder: this.$t('common.placeholder.select'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.userName'),\n              key: 'userName',\n              prop: 'userName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.firstName'),\n              key: 'firstName',\n              prop: 'firstName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.middleName'),\n              key: 'middleName',\n              prop: 'middleName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.lastName'),\n              key: 'lastName',\n              prop: 'lastName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n          ],\n          formData: this.delegateSearchFromData,\n        };\n      } else {\n        return {\n          formConfigList: this.delegateRoleSearchFormConfigList,\n          formData: this.delegateRoleSearchFormData,\n        };\n      }\n    },\n    processOptSearchFrom() {\n      if (this.assigneeType === 'operator') {\n        return {\n          formConfigList: [\n            {\n              label: this.$t('TAC.myTodo.operatorType'),\n              key: 'operatorType',\n              prop: 'operator',\n              comp: 'el-select',\n              options: [\n                {\n                  value: 'orgOperator',\n                  label: 'Organization Operator',\n                },\n                {\n                  value: 'spOperator',\n                  label: 'SP Operator',\n                },\n              ],\n              bind: {\n                placeholder: this.$t('common.placeholder.select'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.userName'),\n              key: 'userName',\n              prop: 'userName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.firstName'),\n              key: 'firstName',\n              prop: 'firstName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.middleName'),\n              key: 'middleName',\n              prop: 'middleName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.lastName'),\n              key: 'lastName',\n              prop: 'lastName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n          ],\n          formData: this.delegateSearchFromData,\n        };\n      } else {\n        return {\n          formConfigList: this.delegateRoleSearchFormConfigList,\n          formData: this.delegateRoleSearchFormData,\n        };\n      }\n    },\n    delegateConfigForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.activeTaskManagement.resetDueTime'),\n            key: 'resetDueTime',\n            prop: 'resetDueTime',\n            comp: 'el-switch',\n            bind: {\n              rules: [{ require: true }],\n              'active-text': this.switchText,\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n            event: {\n              change: this.switchTextChange,\n            },\n          },\n          {\n            formItemClass: 'delegate-comments',\n            label: this.$t('TAC.activeTaskManagement.comments'),\n            key: 'comments',\n            prop: 'comments',\n            comp: 'el-input',\n            bind: {\n              type: 'textarea',\n              clearable: true,\n            },\n          },\n        ],\n        formData: this.delegateConfigFormData,\n      };\n    },\n    taskNameSearchForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            key: 'taskName',\n            prop: 'taskName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            key: 'taskType',\n            prop: 'taskType',\n            comp: 'el-select',\n            options: this.searchFormTaskType,\n            bind: {\n              placeholder: this.$t('common.placeholder.select'),\n            },\n          },\n        ],\n        formData: this.selectTaskNameFormData,\n      };\n    },\n    processOptionLists() {\n      if (this.processOperationDialogVisible) {\n        let labelArr = ['approve', 'complete', 'redo', 'investigate', 'reject'];\n        return this.currentData.actions\n          .split(',')\n          .filter((element) => labelArr.includes(element))\n          .map((item) => {\n            if (item) {\n              return {\n                value: item,\n                label: item.replace(item[0], item[0].toUpperCase()),\n              };\n            }\n          });\n      } else {\n        return [];\n      }\n    },\n  },\n  watch: {\n    'processOptionTimeForm.customizedHours'(val) {\n      if (val > 23) {\n        this.processOptionTimeForm.customizedHours = 23;\n      }\n    },\n    'processOptionTimeForm.customizedMinutes'(val) {\n      if (val > 59) {\n        this.processOptionTimeForm.customizedMinutes = 59;\n      }\n    },\n    delegateSearchFromData: {\n      handler(val) {\n        if (this.selectProcessOptDialogVisible) {\n          if (val.operatorType === 'orgOperator') {\n            if (this.processOptSearchFrom.formConfigList.length === 5) {\n              this.newSearchType = true;\n              this.processOptSearchFrom.formConfigList.splice(1, 0, this.shortCodeConfig);\n            }\n          } else {\n            if (this.processOptSearchFrom.formConfigList.length === 6) {\n              this.newSearchType = false;\n              this.processOptSearchFrom.formConfigList.splice(1, 1);\n            }\n          }\n          if (val.shortCode !== '') {\n            this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.clearValidate('shortCode');\n          }\n        } else {\n          if (val.operatorType === 'orgOperator') {\n            if (this.delegateSearchFrom.formConfigList.length === 5) {\n              this.newSearchType = true;\n              this.delegateSearchFrom.formConfigList.splice(1, 0, this.shortCodeConfig);\n            }\n          } else {\n            if (this.delegateSearchFrom.formConfigList.length === 6) {\n              this.newSearchType = false;\n              this.delegateSearchFrom.formConfigList.splice(1, 1);\n            }\n          }\n          if (val.shortCode !== '') {\n            this.$refs.delegateDialogRef.$refs.dialogSearchForm.clearValidate('shortCode');\n          }\n        }\n      },\n      deep: true,\n    },\n    newSearchType(val) {\n      if (this.selectProcessOptDialogVisible) {\n        if (val) {\n          this.selectProcessOptDialogTable.getTableData = this.getOrgDelegateDialogData;\n        } else {\n          this.selectProcessOptDialogTable.getTableData = this.getDelegateDialogData;\n        }\n      } else {\n        if (val) {\n          this.delegateDialogTable.getTableData = this.getOrgDelegateDialogData;\n        } else {\n          this.delegateDialogTable.getTableData = this.getDelegateDialogData;\n        }\n      }\n    },\n    formData: {\n      handler(val) {\n        if (val.taskType === this.curSelectTaskNameToTaskType) return;\n        this.formData.taskName = '';\n      },\n      deep: true,\n    },\n    selectProcessOptSingleCheck(val) {\n      if (val) {\n        this.selectProcessOptDialogTable.isSingleCheck = true;\n      } else {\n        this.selectProcessOptDialogTable.isSingleCheck = false;\n      }\n    },\n  },\n  created() {\n    this.formData.creationTime = [\n      dayjs(\n        new Date(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 0, 0, 0).getTime() - 1000 * 3600 * 24 * 7)\n      ).format('YYYY-MM-DD HH:mm:ss'),\n      dayjs(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 23, 59, 59)).format('YYYY-MM-DD HH:mm:ss'),\n    ];\n    queryWorkFlowDataDict({\n      dictCodes: [\n        'CPS.WORKFLOW.CONFIGURATION.PRIORITY',\n        'CPS.TASK.TYPE',\n        'CPS.WORKFLOW.TODO.TASK.STATE',\n        'WORK_FLOW_SORT_TIME',\n      ],\n    }).then((res) => {\n      if (res.header && res.header.success) {\n        this.searchFormPriority = res.dictDetailsMap['CPS.WORKFLOW.CONFIGURATION.PRIORITY'];\n        if (this.searchFormPriority[0].label !== 'All') {\n          this.searchFormPriority.unshift({ label: 'All', value: '' });\n        }\n        this.searchFormTaskType = res.dictDetailsMap['CPS.TASK.TYPE'];\n        this.searchFormStatus = res.dictDetailsMap['CPS.WORKFLOW.TODO.TASK.STATE'];\n        if (this.searchFormStatus[0].label !== 'All') {\n          this.searchFormStatus.unshift({ label: 'All', value: '' });\n        }\n        this.todoInfoList.sortData = res.dictDetailsMap['WORK_FLOW_SORT_TIME'];\n        this.sortTime = 'CREATE_TIME_LATEST';\n      }\n    });\n  },\n  beforeRouteEnter(to, from, next) {\n    next((vm) => {\n      vm.searchTableLoading = true;\n      vm.queryMyToDoTaskLists();\n    });\n  },\n  methods: {\n    customizedDayValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedDay * 1;\n      if (value <= 100 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedMinutes');\n        this.$refs.processOptForm.clearValidate('customizedHours');\n        callback(new Error());\n      }\n    },\n    customizedHoursValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedHours * 1;\n      if (value <= 23 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedMinutes');\n        this.$refs.processOptForm.clearValidate('customizedDay');\n        callback(new Error());\n      }\n    },\n    customizedMinutesValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedMinutes * 1;\n      if (value <= 59 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedHours');\n        this.$refs.processOptForm.clearValidate('customizedDay');\n        callback(new Error());\n      }\n    },\n    getFutureTime() {\n      const DayM = this.processOptionTimeForm.customizedDay;\n      const HoursM = this.processOptionTimeForm.customizedHours;\n      const MinutesM = this.processOptionTimeForm.customizedMinutes;\n\n      const DayMres = DayM ? Number(DayM) : 0;\n      const HoursMres = HoursM ? Number(HoursM) : 0;\n      const MinutesMres = MinutesM ? Number(MinutesM) : 0;\n\n      const Minutes = DayMres * 24 * 60 + HoursMres * 60 + MinutesMres;\n\n      const nowData = new Date(); // 1.获取当前日期\n      const nowMinutes = nowData.getMinutes(); // 2. 获取当前分钟\n      nowData.setMinutes(nowMinutes + Minutes); // 3. 设置当前时间+15分钟：把当前分钟数+15后的值重新设置为date对象的分钟数\n      return nowData.toLocaleString().replace(/\\//g, '-');\n    },\n    openSingleCheckDilog() {\n      this.selectProcessOptSingleCheck = true;\n      this.selectProcessOptDialogVisible = true;\n    },\n    openMultiCheckDilog() {\n      this.selectProcessOptSingleCheck = false;\n      this.processOptSearchFrom.formData.operatorType = 'spOperator';\n      this.selectProcessOptDialogVisible = true;\n    },\n    handleSizeChange(val) {\n      let pageNo = val.pageIndex;\n      this.pageSize = val.pageSize;\n      let pageSize = val.pageSize;\n      this.queryMyToDoTaskLists(pageNo, pageSize);\n    },\n    handleTaskNameSizeChange(val) {\n      let pageNo = val.pageIndex;\n      let pageSize = val.pageSize;\n      this.taskNamePageSize = val.pageSize;\n      this.$refs.taskNameTableRef.tableData = this.taskNameDialogList.slice(\n        (pageNo - 1) * this.taskNamePageSize,\n        (pageNo - 1) * this.taskNamePageSize + pageSize\n      );\n    },\n    searchFormTaskTypeChange(val) {\n      if (val !== this.selectTaskName.taskType) {\n        this.formData.taskName = '';\n        this.selectTaskName = {};\n      }\n    },\n    queryMyToDoTaskLists(pageNo = 1, pageSize = 10) {\n      this.searchTableLoading = true;\n      let tskType = '';\n      if (this.formData.taskType.length > 1) {\n        this.searchFormTaskType.some((item) => {\n          if (item.label === this.formData.taskType) {\n            tskType = item.value;\n            return true;\n          }\n        });\n      } else {\n        tskType = this.formData.taskType;\n      }\n      let params = {\n        taskId: this.formData.taskNo,\n        taskName: this.formData.taskName,\n        priority: this.formData.priority || null,\n        category: tskType,\n        status: this.formData.status || null,\n        dueTime: this.formData.dueTime || null,\n        pageNo,\n        createTimeFrom: this.formData.creationTime[0],\n        createTimeTo: this.formData.creationTime[1],\n        sortingMode: this.sortTime || 'CREATE_TIME_LATEST',\n        pageSize,\n      };\n      queryMyToDoTask({ taskVO: params }).then((res) => {\n        this.searchLoading = false;\n        this.searchTableLoading = false;\n        if (res.header && res.header.success) {\n          this.todoInfoList.count = res.count;\n          this.todoInfoList.todoInfoLists.splice(0);\n          res.taskDTOList.forEach((item) => {\n            let time = item.createTime.split(' ');\n            let date = time[0].split('-');\n            let createTime = date[2] + '/' + date[1] + '/' + date[0] + ' ' + time[1];\n            let eTime = item.expireTime.split(' ');\n            let expDate = eTime[0].split('-');\n            let expireTime = expDate[2] + '/' + expDate[1] + '/' + expDate[0] + ' ' + eTime[1];\n            item.title = item.taskId + '-' + item.taskName;\n            item.createTime = createTime;\n            item.expireTime = expireTime;\n            this.todoInfoList.todoInfoLists.push(item);\n          });\n        }\n      });\n    },\n    search() {\n      this.$refs.searchFormRef.validate((result) => {\n        if (result) {\n          this.searchLoading = true;\n          this.searchTableLoading = true;\n          this.queryMyToDoTaskLists();\n        }\n      });\n    },\n    selectOperatorListValidator(rule, val, callback) {\n      if (this.processOperationFormData.operation === 'investigate') {\n        if (!this.selectOperatorList.length) {\n          this.isCheckError = true;\n          callback(new Error());\n          return;\n        } else {\n          this.isCheckError = false;\n        }\n        callback();\n      }\n    },\n    resetSearch() {\n      this.$refs.searchFormRef.resetFields();\n      this.queryMyToDoTaskLists();\n    },\n    removeSelecteOperator(record) {\n      this.selectOperatorList.splice(this.selectOperatorList.indexOf(record), 1);\n      if (!this.selectOperatorList.length) {\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n      }\n    },\n    selectProcessOptCloseDialog() {\n      this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.resetFields();\n      this.selectProcessOptDialogVisible = false;\n    },\n    selectProcessOptDialogReset() {\n      this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.resetFields();\n      Object.keys(this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.formData).forEach((key) => {\n        this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.formData[key] = '';\n      });\n      this.newSearchType = false;\n      this.delegateSearchFrom.formData.operatorType = 'spOperator';\n      this.$nextTick(() => {\n        this.delegateRoleSearchFormData.roleName = '';\n        this.selectProcessOptDialogTable.isSearch = true;\n      });\n    },\n    comfirmselectProcessOptHandler() {\n      if (this.selectProcessOptSingleCheck) {\n        if (Object.keys(this.tempSingleCheck).length === 0) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n        this.selectProcessOptCloseDialog();\n      } else {\n        if (this.tempMultiCheck.length === 0) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n        this.selectOperatorList = this.tempMultiCheck;\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n        this.selectProcessOptCloseDialog();\n      }\n    },\n    checkTaskChange(val) {\n      if (val.isCheck) {\n        if (this.checkLists.length > 0) {\n          let isAdd = false;\n          this.checkLists.forEach((item) => {\n            if (item.taskId === val.taskId) {\n              isAdd = true;\n            }\n          });\n          if (!isAdd) {\n            this.checkLists.push(val);\n          }\n        } else {\n          this.checkLists.push(val);\n        }\n      } else {\n        let index = this.checkLists.findIndex((item) => {\n          return item.taskId === val.taskId;\n        });\n        this.checkLists.splice(index, 1);\n      }\n    },\n    async getTaskNameDialogData() {\n      let taskTypeCondition = '';\n      let taskTypeCodetoLabel = '';\n      this.searchFormTaskType.some((item) => {\n        if (item.value === this.selectTaskNameFormData.taskType) {\n          taskTypeCodetoLabel = item.label;\n          return true;\n        }\n      });\n      if (taskTypeCodetoLabel) {\n        if (taskTypeCodetoLabel !== 'All') {\n          if (taskTypeCodetoLabel === 'Transaction and Action') {\n            taskTypeCondition = 'TRANSATION_AND_ACTION';\n          } else {\n            taskTypeCondition = taskTypeCodetoLabel.toUpperCase().split(' ').join('_');\n          }\n        }\n      }\n      let params = {\n        taskNameCondition: this.selectTaskNameFormData.taskName,\n        taskTypeCondition,\n      };\n      let res = await queryTaskName(params);\n      this.dialogTaskNameFormBtnLoading = false;\n      this.dialogTable.isSearch = false;\n      if (res.taskTypeList && res.taskTypeList.length > 0) {\n        this.taskNameCount = res.taskTypeList.length;\n        this.taskNameHasData = false;\n        let list = res.taskTypeList.map((item) => {\n          item.taskType = item.category;\n          return item;\n        });\n        this.taskNameDialogList = list;\n        return {\n          header: { success: true },\n          list: list.slice(0, this.taskNamePageSize),\n        };\n      }\n    },\n    handleSortConditions(val) {\n      this.sortTime = val;\n      this.queryMyToDoTaskLists();\n    },\n    selectTaskDialogReset() {\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.dialogTable.isSearch = true;\n    },\n    handleProcessCancelClick() {\n      if (this.tempTaskHandle.length > 0) {\n        this.checkLists = this.tempTaskHandle.splice(0);\n      } else {\n        this.checkLists.splice(0);\n      }\n      this.$refs.processOptForm.resetFields();\n      this.isCheckError = false;\n      this.processOperationDialogVisible = false;\n      this.processOperationFormData.operation = 'approve';\n      this.processOperationFormData.remark = '';\n      this.processOperationFormData.investigateOperator = '';\n      this.processOperationFormData.validityPeriod = '';\n      this.processOperationFormData.initialSubmit = false;\n    },\n    handleProcessConfirmClick() {\n      this.$refs.processOptForm.validate((result) => {\n        if (result) {\n          let processList = this.checkLists.map((item) => {\n            return {\n              processId: item.processId,\n              taskId: item.taskId,\n            };\n          });\n          let comments = this.processOperationFormData.remark;\n          let isBatch = false;\n          let actionType = this.processOperationFormData.operation;\n          let assigneeType = this.assigneeType == 'role' ? '3' : '1';\n          let assignee = [];\n          const date =\n            60 * 24 * this.processOptionTimeForm.customizedDay +\n            60 * this.processOptionTimeForm.customizedHours +\n            1 * this.processOptionTimeForm.customizedMinutes;\n          if (this.selectOperatorList.length > 0) {\n            assignee = this.selectOperatorList.map((item) => {\n              if (item.roleId) {\n                return { roleId: item.roleId };\n              }\n              if (this.newSearchType) {\n                return { operatorId: item.operatorId, operatorType: assigneeType };\n              } else {\n                return { operatorId: item.identityId, operatorType: assigneeType };\n              }\n            });\n          }\n          let params = {};\n          if (actionType === 'approve') {\n            params = {\n              actionType,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'complete') {\n            params = {\n              actionType,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'reject') {\n            if (this.processOperationFormData.initialSubmit) {\n              actionType = 'backinitiator';\n            }\n            params = {\n              actionType,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'delegate') {\n            params = {\n              actionType,\n              assigneeType,\n              assignee,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'investigate') {\n            if (this.processOperationFormData.investigateOperator === 'initiator') {\n              if (this.processOperationFormData.validityPeriod === 'sameAsOriginal') {\n                params = {\n                  processList,\n                  isBatch,\n                  actionType,\n                  comments,\n                  isResetExpireTime: false,\n                };\n              }\n              if (this.processOperationFormData.validityPeriod === 'customized') {\n                params = {\n                  processList,\n                  isBatch,\n                  actionType,\n                  comments,\n                  taskExpireTimeInterval: date,\n                  isResetExpireTime: true,\n                };\n              }\n            }\n            if (this.processOperationFormData.investigateOperator === 'others') {\n              if (this.processOperationFormData.validityPeriod === 'sameAsOriginal') {\n                params = {\n                  processList,\n                  isBatch,\n                  assigneeType,\n                  actionType,\n                  comments,\n                  assignee,\n                  isResetExpireTime: false,\n                };\n              }\n              if (this.processOperationFormData.validityPeriod === 'customized') {\n                params = {\n                  processList,\n                  isBatch,\n                  assigneeType,\n                  actionType,\n                  assignee,\n                  comments,\n                  taskExpireTimeInterval: date,\n                  isResetExpireTime: true,\n                };\n              }\n            }\n          }\n          batchProcess(params).then((res) => {\n            if (res.header && res.header.success) {\n              this.$modal.msgSuccess('Operation succeeded.');\n              this.searchTableLoading = true;\n              this.checkLists = [];\n              this.$refs.todoinfo.reset();\n              this.selectOperatorList.splice(0);\n              this.$nextTick(() => {\n                this.queryMyToDoTaskLists();\n              });\n            }\n          });\n          this.processOperationDialogVisible = false;\n        }\n      });\n    },\n    // 获取taskName表格数据\n    getTableData() {\n      this.dialogTable.isSearch = false;\n    },\n    closeDialog() {\n      this.taskNameDialogVisible = false;\n      this.taskNamePageSize = 5;\n    },\n    taskNameDialigSelectChange(val) {\n      this.tempTaskName = val;\n    },\n    comfirmTaskNameHandler() {\n      if (Object.keys(this.tempTaskName).length === 0) {\n        this.$modal.msgError('Please select at least one.');\n        return;\n      }\n      this.formData.taskName = this.tempTaskName.taskName;\n      if (this.tempTaskName.taskType === 'TRANSATION_AND_ACTION') {\n        this.formData.taskType = 'Transaction and Action';\n        this.curSelectTaskNameToTaskType = 'Transaction and Action';\n      } else {\n        if (this.tempTaskName.taskType) {\n          let taskType = this.tempTaskName.taskType\n            .toLocaleLowerCase()\n            .split('_')\n            .map((item) => {\n              return item.replace(item[0], item[0].toLocaleUpperCase());\n            });\n          this.formData.taskType = taskType.join(' ');\n          this.curSelectTaskNameToTaskType = taskType.join(' ');\n        }\n      }\n      this.taskNameDialogVisible = false;\n      this.tempTaskName = {};\n    },\n    selectTaskDialogSearch() {\n      this.dialogTable.isSearch = true;\n      this.dialogTaskNameFormBtnLoading = true;\n    },\n    checkProcess(val) {\n      return val.taskState !== 'Paused' && val.processFlag;\n    },\n    processing(handleData) {\n      if (handleData) {\n        if (this.checkLists.length > 0) {\n          this.tempTaskHandle = this.checkLists.splice(0);\n        }\n        this.currentData = handleData;\n        this.checkLists.push(handleData);\n        this.processOperationDialogVisible = true;\n      } else if (this.checkLists.length > 0) {\n        let checkResult = this.checkLists.map((item) => {\n          return this.checkProcess(item);\n        });\n        if (checkResult.includes(false)) {\n          this.$modal.alertWarning('Operation failed because the selected records contain records cannot be resolved');\n          return;\n        }\n        if (this.checkLists.length > 1) {\n          let isSameTypeList = [];\n          this.checkLists.reduce((pre, cur) => {\n            if (pre.taskType === cur.taskType) {\n              isSameTypeList.push(true);\n              return cur;\n            } else {\n              isSameTypeList.push(false);\n              return cur;\n            }\n          });\n          if (isSameTypeList.includes(false)) {\n            this.notificationDialogVisible = true;\n            return;\n          }\n        }\n        this.taskProcessDialogVisible = true;\n      } else {\n        this.$modal.alertWarning('Select at least one record.');\n      }\n    },\n    checkDelegate(val) {\n      return val.taskState !== 'Paused' && val.processFlag && val.taskType !== 'Modify';\n    },\n    delegate(handleData) {\n      if (handleData) {\n        if (this.checkLists.length > 0) {\n          this.tempTaskHandle = this.checkLists.splice(0);\n        }\n        this.delegateSearchFrom.formData.operatorType = 'spOperator';\n        this.$nextTick(() => {\n          this.delegateDialogVisible = true;\n        });\n        this.checkLists.push(handleData);\n      } else if (this.checkLists.length > 0) {\n        let checkResult = this.checkLists.map((item) => {\n          return this.checkDelegate(item);\n        });\n        if (checkResult.includes(false)) {\n          this.$modal.alertWarning('Operation failed because the selected records contain records cannot be resolved');\n          return;\n        }\n        if (this.checkLists.length > 1) {\n          let isSameTypeList = [];\n          this.checkLists.reduce((pre, cur) => {\n            if (pre.taskType === cur.taskType) {\n              isSameTypeList.push(true);\n            } else {\n              isSameTypeList.push(false);\n            }\n            return cur;\n          });\n          if (isSameTypeList.includes(false)) {\n            this.$modal.alertWarning('The Tasks To Be Processed In Bulk Are Not Of The Same Type.');\n            return;\n          }\n        }\n        this.delegateSearchFrom.formData.operatorType = 'spOperator';\n        this.delegateDialogVisible = true;\n      } else {\n        this.$modal.alertWarning('Select at least one record.');\n      }\n    },\n    switchTextChange(val) {\n      val ? (this.switchText = 'Yes') : (this.switchText = 'No');\n    },\n    singleCheckChange(val) {\n      this.tempSingleCheck = val;\n    },\n    multiCheckChange(val) {\n      this.tempMultiCheck = val;\n    },\n    delegateDialigSelectChange(val) {\n      this.delegateDialigSelectData = val;\n    },\n    delegateCloseDialog() {\n      if (this.tempTaskHandle.length > 0) {\n        this.checkLists = this.tempTaskHandle.splice(0);\n      }\n      this.$refs.delegateDialogRef.$refs.dialogConfigForm.resetFields();\n      this.delegateDialogVisible = false;\n      this.delegateDialogReset();\n    },\n    delegateDialogReset() {\n      this.$refs.delegateDialogRef.$refs.dialogSearchForm.resetFields();\n      Object.keys(this.$refs.delegateDialogRef.$refs.dialogSearchForm.formData).forEach((key) => {\n        this.$refs.delegateDialogRef.$refs.dialogSearchForm.formData[key] = '';\n      });\n      this.newSearchType = false;\n      this.delegateSearchFrom.formData.operatorType = 'spOperator';\n      this.$nextTick(() => {\n        this.delegateRoleSearchFormData.roleName = '';\n        this.delegateDialogTable.isSearch = true;\n      });\n    },\n    checkChange(val) {\n      if (val === 'role') {\n        this.tempDelegateTableCol = JSON.parse(JSON.stringify(this.delegateDialogTable.columns));\n        this.delegateDialogTable.columns = [\n          {\n            label: this.$t('TAC.myTodo.role'),\n            prop: 'roleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.description'),\n            prop: 'description',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.roleCategory'),\n            prop: 'roleCategory',\n            align: 'left',\n          },\n        ];\n        this.delegateDialogTable.getTableData = this.qeuryRoleData;\n        this.$nextTick(() => {\n          this.delegateDialogTable.isSearch = true;\n        });\n      } else {\n        this.delegateDialogTable.columns = this.tempDelegateTableCol;\n        this.delegateDialogTable.getTableData = this.getDelegateDialogData;\n        this.delegateDialogReset();\n      }\n    },\n    processCheckChange(val) {\n      if (val === 'role') {\n        this.tempDelegateTableCol = JSON.parse(JSON.stringify(this.selectProcessOptDialogTable.columns));\n        this.selectProcessOptDialogTable.columns = [\n          {\n            label: this.$t('TAC.myTodo.role'),\n            prop: 'roleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.description'),\n            prop: 'description',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.roleCategory'),\n            prop: 'roleCategory',\n            align: 'left',\n          },\n        ];\n        this.selectProcessOptDialogTable.getTableData = this.qeuryRoleData;\n        this.$nextTick(() => {\n          this.selectProcessOptDialogTable.isSearch = true;\n        });\n      } else {\n        this.selectProcessOptDialogTable.columns = this.tempDelegateTableCol;\n        this.selectProcessOptDialogTable.getTableData = this.getDelegateDialogData;\n        this.selectProcessOptDialogReset();\n        this.$nextTick(() => {\n          this.selectProcessOptDialogTable.isSearch = true;\n        });\n      }\n    },\n    qeuryRoleData() {\n      let params = {\n        selectType: 'role',\n        roleName: this.delegateRoleSearchFormData.roleName,\n        roleCategory: this.delegateRoleSearchFormData.roleCategory,\n        pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n        pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n      };\n      return new Promise((resolve) => {\n        queryRole(params).then((res) => {\n          this.selectProcessOptSearchLoading = false;\n          this.delegateSearchLoading = false;\n          this.delegateDialogTable.isSearch = false;\n          this.selectProcessOptDialogTable.isSearch = false;\n          if (res.header && res.header.success) {\n            let tempData = res.list.map((item) => {\n              item.id = item.roleId;\n              switch (item.roleType) {\n                case '2000':\n                  item.roleCategory = 'Sp Operator';\n                  break;\n                case '3000':\n                  item.roleCategory = 'Organization Operator';\n                  break;\n                case '5000':\n                  item.roleCategory = 'Organization';\n                  break;\n                case '7000':\n                  item.roleCategory = 'GROUP';\n                  break;\n                case '8000':\n                  item.roleCategory = 'SP';\n                  break;\n                default:\n                  break;\n              }\n              return item;\n            });\n            if (this.delegateRoleSearchFormData.roleCategory) {\n              tempData = tempData.filter((item) =>\n                item.roleType.includes(this.delegateRoleSearchFormData.roleCategory)\n              );\n            }\n            resolve({\n              header: res.header,\n              list: tempData.slice(\n                (this.delegateDialogTable.paginationConfig.pageIndex - 1) *\n                  this.delegateDialogTable.paginationConfig.pageSize,\n                this.delegateDialogTable.paginationConfig.pageSize * this.delegateDialogTable.paginationConfig.pageIndex\n              ),\n              totalRecords: tempData.length,\n            });\n          }\n        });\n      });\n    },\n    checkOptChange(val) {\n      this.processSearchForm.formData.operation = val;\n    },\n    handleCancelClick() {\n      if (this.tempTaskHandle.length > 0) {\n        this.checkLists = this.tempTaskHandle.splice(0);\n      }\n      this.$refs.dialogProcessForm.resetFields();\n      this.taskProcessDialogVisible = false;\n    },\n    handleConfirmClick() {\n      this.$refs.dialogProcessForm.validate((result) => {\n        if (result) {\n          this.$modal\n            .confirm('', 'Are you sure to submit?', {\n              cancelButtonText: this.$t('common.button.cancel'),\n              confirmButtonText: this.$t('common.button.confirm'),\n            })\n            .then(\n              (res) => {\n                if (res === 'confirm') {\n                  let isBatch = this.checkLists.length > 1 ? true : false;\n                  let processList = this.checkLists.map((item) => {\n                    return {\n                      processId: item.processId,\n                      taskId: item.taskId,\n                    };\n                  });\n                  this.checkLists.splice(0);\n                  let actionType = this.processSearchForm.formData.operation;\n                  if (actionType === 'reject') {\n                    if (this.initialSubmit) {\n                      actionType = 'backinitiator';\n                    }\n                  }\n                  batchProcess({\n                    actionType,\n                    comments: this.processSearchForm.formData.remark,\n                    isBatch,\n                    processList,\n                  }).then((res) => {\n                    if (res.header && res.header.success) {\n                      this.taskProcessDialogVisible = false;\n                      this.$modal.msgSuccess('Operation succeeded.');\n                      this.checkLists = [];\n                      this.$refs.todoinfo.reset();\n                      this.queryMyToDoTaskLists();\n                    }\n                  });\n                }\n              },\n              () => {}\n            );\n        }\n      });\n    },\n    comfirmDelegateHandler() {\n      this.$refs.delegateDialogRef.$refs.dialogConfigForm.validate((result) => {\n        if (!result) return;\n        if (!this.delegateDialigSelectData.length) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n        let isBatch = this.checkLists.length > 1 ? true : false;\n        let processList = this.checkLists.map((item) => {\n          return {\n            processId: item.processId,\n            taskId: item.taskId,\n          };\n        });\n        let assigneeType = 0;\n        if (this.checkRadio === 'operator') {\n          assigneeType = 1;\n        } else if (this.checkRadio === 'role') {\n          assigneeType = 3;\n        }\n        let assignee = this.delegateDialigSelectData.map((item) => {\n          if (item.roleId) {\n            return { roleId: item.roleId };\n          }\n          return { operatorId: item.identityId, operatorType: assigneeType, operatorName: item.userName };\n        });\n        let selfId = cookie.get('initiatorIdentityId');\n        if (assignee.length == 1 && assignee[0].operatorId == selfId) {\n          this.$modal.msgError(this.$t('TAC.tips.cannotBeSelfOnly'));\n          return;\n        }\n        batchProcess({\n          actionType: 'delegate',\n          isResetExpireTime: this.delegateConfigFormData.resetDueTime,\n          comments: this.delegateConfigFormData.comments,\n          isBatch,\n          processList,\n          assigneeType,\n          assignee,\n        }).then((res) => {\n          if (res.header && res.header.success) {\n            this.checkLists.splice(0);\n            this.delegateDialigSelectData.splice(0);\n            this.$modal.msgSuccess('Operation succeeded.');\n            this.delegateDialogVisible = false;\n            this.$refs.todoinfo.reset();\n            this.queryMyToDoTaskLists();\n            this.delegateCloseDialog();\n          }\n        });\n      });\n    },\n    processComfirmCloseDialog() {\n      this.processComfirmDialogVisible = false;\n    },\n    handleComfirmCancelClick() {\n      this.processComfirmDialogVisible = false;\n    },\n    handleConfirmSbmitClick() {\n      // this.processComfirmDialogVisible = false;\n    },\n    getDelegateDialogData() {\n      return new Promise((resolve) => {\n        let params = {\n          operatorType: 20,\n          status: '03',\n          userName: this.delegateSearchFromData.userName,\n          firstName: this.delegateSearchFromData.firstName,\n          middleName: this.delegateSearchFromData.middleName,\n          lastName: this.delegateSearchFromData.lastName,\n          pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n          pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n        };\n        queryCurrentHandler(params).then((res) => {\n          this.selectProcessOptSearchLoading = false;\n          this.delegateSearchLoading = false;\n          this.delegateDialogTable.isSearch = false;\n          this.selectProcessOptDialogTable.isSearch = false;\n          if (res.header && res.header.success) {\n            res.totalRecords = res.total;\n            res.list.forEach((item, idx) => {\n              res.list[idx].id = item.identityId;\n            });\n            return resolve(res);\n          }\n        });\n      });\n    },\n    async getOrgDelegateDialogData() {\n      let params = {\n        shortCode: this.delegateSearchFromData.shortCode,\n        operatorName: this.delegateSearchFromData.userName,\n        selectType: 'operator',\n        status: '03',\n        operatorType: 30,\n        pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n        pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n      };\n      let res = await queryOrgCurrentHandler(params);\n      this.selectProcessOptSearchLoading = false;\n      this.delegateSearchLoading = false;\n      this.delegateDialogTable.isSearch = false;\n      this.selectProcessOptDialogTable.isSearch = false;\n      if (res.header && res.header.success) {\n        let list = res.list.map((item) => {\n          // item.userName = item.operatorName;\n          item.id = item.operatorId;\n          return item;\n        });\n        return {\n          header: res.header,\n          list,\n          totalRecords: res.totalRecord,\n        };\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.my-todo-container {\n  overflow: hidden;\n  .page-header {\n    padding: 20px;\n    background-color: $base-menu-background;\n    .title {\n      height: 32px;\n      font-family: Huawei Sans;\n      font-weight: 700;\n      color: $--text_color--emphasis;\n      font-size: 24px;\n      margin-bottom: 8px;\n    }\n    .desc {\n      width: 1092px;\n      font-family: Huawei Sans;\n      color: $--text_color--secondary;\n      font-size: 12px;\n    }\n  }\n  .page-content {\n    margin-top: 1px;\n    background-color: $base-menu-background;\n    /deep/ .org-short-code {\n      position: relative;\n    }\n  }\n  .page-dialog {\n    /deep/ .pagination-region {\n      .el-select--mini {\n        display: none;\n      }\n      .pagination__total {\n        margin-right: 18px;\n      }\n      .go-to-buttom {\n        display: none;\n      }\n      .show-title {\n        display: none;\n      }\n      .go-to-buttom {\n        display: none;\n      }\n      .el-pagination__jump {\n        display: none;\n      }\n    }\n  }\n  .check-operator {\n    margin-top: 20px;\n    margin-left: 20px;\n    .check-label {\n      margin-bottom: 8px;\n      margin-left: 12px;\n      position: relative;\n      font-family: Huawei Sans;\n      color: $--text_color--secondary;\n      font-size: 14px;\n    }\n    .check-label::before {\n      content: '*';\n      position: absolute;\n      left: -12px;\n      top: 1px;\n      font-size: 20px;\n      color: $--status_color--error;\n    }\n    .el-radio {\n      margin-right: 20px;\n    }\n    /deep/ .el-radio__label {\n      font-family: Huawei Sans;\n      color: $--text_color--strong;\n      font-size: 14px;\n      padding-left: 9px;\n    }\n  }\n  .multi-select-container {\n    height: 32px;\n    background-color: $base-menu-light-background;\n    border: 1px solid;\n    border-color: $--fill_color--dark;\n    border-radius: 4px;\n    display: flex;\n    padding: 0;\n    .select-tags {\n      overflow-y: hidden;\n      overflow-x: scroll;\n      height: 100%;\n      width: 310px;\n      padding: 4px;\n      flex: 1;\n      &::-webkit-scrollbar {\n        display: none;\n      }\n      .select-scroll {\n        white-space: nowrap;\n        display: flex;\n        align-items: center;\n      }\n    }\n    .icon-e {\n      width: 32px;\n      line-height: 32px;\n      height: 32px;\n      text-align: center;\n      cursor: pointer;\n    }\n    .el-textarea__inner {\n      font-family: Huawei Sans;\n    }\n  }\n  .err-border {\n    border-color: $--status_color--error;\n  }\n  /deep/ .task-detail-col {\n    line-height: 32px;\n    color: $--text_color--strong;\n    font-size: 14px;\n    .el-form-item__error {\n      width: 190px;\n    }\n  }\n  .dialogProcessForm {\n    padding: 0;\n  }\n  /deep/ .process-dialog {\n    .el-dialog__header {\n      padding: 24px;\n    }\n    .el-form-item__content {\n      line-height: 32px;\n    }\n  }\n  .cancel-button {\n    padding: 7px 15px;\n    height: 32px;\n    border-radius: 4px;\n    background-color: $base-menu-background;\n    border: 1px solid $--line_color--regular;\n    font-size: 14px;\n    color: $--text_color--strong;\n    box-sizing: border-box;\n    cursor: pointer;\n    margin-right: 8px;\n  }\n  /deep/ .remark {\n    .el-form-item__content {\n      height: 100%;\n    }\n  }\n  /deep/ .delegate-comments {\n    .el-form-item__content {\n      height: 100%;\n    }\n  }\n  /deep/ .short-code {\n    .el-form-item__error {\n      top: 100%;\n    }\n  }\n  /deep/ .due-time {\n    .el-input__inner {\n      padding-left: 12px;\n    }\n  }\n  /deep/ .dialog-pagination {\n    margin-top: 12px;\n    .el-select--mini {\n      display: none;\n    }\n    .pagination__total {\n      margin-right: 18px;\n    }\n    .show-title {\n      display: none;\n    }\n    .go-to-buttom {\n      display: none;\n    }\n    .el-pagination__jump {\n      display: none;\n    }\n  }\n  .dialogTaskNameForm {\n    padding: 0;\n    /deep/ .form-flex-bottom-line {\n      margin-bottom: 20px;\n    }\n  }\n  .dialog-footer {\n    margin-top: 20px;\n  }\n  .process-checkbox-item {\n    line-height: 32px;\n  }\n  .process-operation-radio {\n    margin-bottom: 8px;\n  }\n}\n</style>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=2148bef0&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=2148bef0&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2148bef0\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=2148bef0&prod&lang=scss&scoped=true&\""],"sourceRoot":""}