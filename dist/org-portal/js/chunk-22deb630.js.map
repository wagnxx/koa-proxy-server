{"version":3,"sources":["webpack:///./src/views/task-center/page/group-task/index.vue","webpack:///src/views/task-center/page/group-task/index.vue","webpack:///./src/views/task-center/page/group-task/index.vue?7c9d","webpack:///./src/views/task-center/page/group-task/index.vue?163c","webpack:///./src/views/task-center/page/group-task/index.vue?f743"],"names":["render","_vm","this","_c","_self","staticClass","_v","_s","projectObj","title","desc","ref","attrs","searchLoading","formConfigList","dateValidate","formData","on","resetSearch","search","todoInfoList","searchTableLoading","pageSize","sortTime","checkTaskChange","handleSizeChange","handleSortConditions","processing","taskNameDialogVisible","closeDialog","$event","formRules","taskNameSearchForm","dialogTaskNameFormBtnLoading","selectTaskDialogSearch","selectTaskDialogReset","dialogTable","columns","getTableData","isSearch","singleChange","taskNameCount","taskNamePageSize","taskNameHasData","handleTaskNameSizeChange","slot","preventDefault","apply","arguments","$t","directives","name","rawName","comfirmTaskNameHandler","taskProcessDialogVisible","handleCancelClick","taskProcessForm","taskProcessFormData","processFormRules","model","value","operation","callback","$$v","$set","expression","test","currentData","actions","initialSubmit","handleConfirmClick","processOperationDialogVisible","handleProcessCancelClick","processOptFormRules","processOperationFormData","_l","processOptionLists","item","key","label","investigateOperator","_e","class","isCheckError","selectOperatorList","index","removeSelecteOperator","roleName","userName","openMultiCheckDilog","validityPeriod","invesCustomizedDay","processOptionTimeForm","customizedDay","invesCustomizedHours","customizedHours","invesCustomizedMinutes","customizedMinutes","remark","handleProcessConfirmClick","selectProcessOptDialogVisible","processOptSearchFrom","selectProcessOptDialogTable","selectProcessOptSearchLoading","selectProcessOptCloseDialog","selectProcessOptDialogReset","comfirmselectProcessOptHandler","processCheckChange","assigneeType","notificationDialogVisible","staticRenderFns","components","PortalForm","NotificationDialog","TodoInfo","TablePage","PortalDialog","PortalPagination","data","validator","message","trigger","taskNameSearchFormData","taskName","taskType","searchFormPriority","searchFormTaskType","searchFormStatus","taskNo","priority","status","dueTime","creationTime","curSelectTaskNameToTaskType","tempTaskName","todoInfoLists","sortData","count","checkLists","tempTaskHandle","prop","align","taskNameSearchLoading","slotName","formItemClass","comp","bind","type","operatorRadio","pickerOptions","onPick","maxDate","minDate","disabledDate","required","delegateOperatorList","selectProcessOptSingleCheck","delegateSearchFromData","operatorType","shortCode","firstName","middleName","lastName","delegateRoleSearchFormConfigList","clearable","placeholder","options","delegateRoleSearchFormData","roleCategory","delegateDialogTable","isSingleCheck","hasPagination","paginationConfig","total","pageIndex","onSelectionChange","tempSingleCheck","tempMultiCheck","tempDelegateTableCol","newSearchType","shortCodeConfig","computed","slots","icon","underline","event","click","sameGroup","format","split","filter","map","created","dayjs","queryWorkFlowDataDict","dictCodes","beforeRouteEnter","next","vm","watch","handler","deep","methods","customizedDayValidator","customizedHoursValidator","customizedMinutesValidator","getFutureTime","nowData","selectOperatorListValidator","processId","taskId","assignee","roleId","operatorId","params","actionType","comments","processList","isBatch","isResetExpireTime","taskExpireTimeInterval","batchProcess","Object","singleCheckChange","multiCheckChange","getDelegateDialogData","pageNo","queryCurrentHandler","res","operatorName","selectType","header","list","totalRecords","removeSelected","openSingleCheckDilog","qeuryRoleData","queryRole","tempData","resolve","queryGroupTaskList","tskType","category","createTimeFrom","createTimeTo","sortingMode","queryGroupTask","taskVO","taskNameDialigSelectChange","taskTypeCodetoLabel","taskTypeCondition","taskNameCondition","success","toLocaleLowerCase","checkProcess","isSameTypeList","confirm","cancelButtonText","confirmButtonText","then","component"],"mappings":"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CAsE,YACAlC,sCACAC,iBACAF,6CAGAoC,sBACA,CACAD,YACAlC,sCACAC,iBACAF,8CAIA7C,0BACAb,aACAqC,UACAlB,uBACAU,kBACArB,kBAEAsF,wBACAvE,sBACAwE,+BACAxD,iCACAR,uBACAC,iBACAE,mBACAE,sBAEA4D,wBACAC,gBACAC,aACAvE,YACAwE,aACAC,cACAC,aAEAC,kCACA,CACApF,qCACAD,eACA8D,gBACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,yCACAD,mBACA8D,oBACAK,iBACAqB,SACA,CACA1G,SACAmB,aAEA,CACAnB,aACAmB,+BAEA,CACAnB,aACAmB,sBAEA,CACAnB,aACAmB,eAEA,CACAnB,aACAmB,aAGAmE,MACAmB,oDAIAE,4BACAhF,YACAiF,iBAEAC,qBACApI,SACA,CACA0C,qCACA6D,gBACAC,cAEA,CACA9D,sCACA6D,iBACAC,cAEA,CACA9D,uCACA6D,kBACAC,cAEA,CACA9D,qCACA6D,gBACAC,eAGAtG,YACAmI,iBACAC,iBACAC,kBACAC,QACAC,YACAxJ,YAEAgB,wCACAE,8CAEA8D,6BACAjE,SACA,CACA0C,qCACA6D,gBACAC,cAEA,CACA9D,sCACA6D,iBACAC,cAEA,CACA9D,uCACA6D,kBACAC,cAEA,CACA9D,qCACA6D,gBACAC,eAGAtG,YACAmI,iBACAC,iBACAC,kBACAC,QACAC,YACAxJ,YAEAgB,wCACAE,oCACAuI,yCAEAxE,iCACAyE,mBACAC,kBACAC,wBACAtE,wBACAuE,iBACAC,iBACArG,yCACAiE,2BACAlE,gBACA8D,iBACAK,gBACAC,MACAkB,aACAC,kDAGAlF,gBACAhB,iBAGAkH,UACAvK,iBACA,OACA,CACAiE,mCACAD,aACA8D,cACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,qCACAD,eACA8D,gBACAK,iBACAqB,gCACApB,MACAmB,mDAGA,CACArB,+BACAjE,qCACAD,eACA8D,gBACAK,gBACAC,MACAkB,aACAC,kDAEAiB,OACA,CACArC,eACA9F,cACA+B,wBACAgE,MACAqC,oBACAC,cAEAC,OACAC,WACA,8BACA,2EACA,kCAMA,CACA3G,qCACAD,eACA8D,gBACAK,iBACAqB,gCACApB,MACAmB,mDAGA,CACAtF,mCACAD,aACA8D,cACAK,iBACAqB,8BACApB,MACAmB,kDAGA,CACArB,yBACAjE,oCACA6D,eACA9D,cACAmE,sBACAC,MACAmB,iDACAlB,gBACA,uCAGA,CACApE,yCACAiE,sCACA2C,aACA/C,oBACAK,MACA,CACAnE,mBACAmE,sBACAC,MACAmB,gDACAxB,cACAM,qBACAyC,6BACA,oCACA,sBACA,qCACA,uCACA,oCACA,oCAGA,CACA3C,SACA/D,oCAMAlD,qBACA,OACAlB,gBACA,CACAiE,qCACAD,eACA8D,gBACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,qCACAD,eACA8D,gBACAK,iBACAqB,gCACApB,MACAmB,oDAIArJ,uCAGA4D,qBACA,uCACA,sEACA,gCACAiH,WACAC,yBACAC,QACA,KACA,OACAnI,QACAmB,4CAKA,UAGAsB,uBACA,qCACA,CACAvF,gBACA,CACAiE,yCACAD,mBACA8D,oBACAK,iBACAqB,SACA,CACA1G,oBACAmB,+BAEA,CACAnB,mBACAmB,sBAGAmE,MACAmB,mDAGA,CACAtF,qCACAD,eACA8D,gBACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,sCACAD,gBACA8D,iBACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,uCACAD,iBACA8D,kBACAK,gBACAC,MACAkB,aACAC,kDAGA,CACAtF,qCACAD,eACA8D,gBACAK,gBACAC,MACAkB,aACAC,mDAIArJ,sCAGA,CACAF,qDACAE,4CAKAgL,UACA,4BACAC,IACA,oFACA,8BACAA,+FAEAC,gBACAC,WACA,sCACA,gBACA,+BACA,yBAEA,SACA,6BACA,gFACA,0CACA,iCAAApH,YAAAnB,WAEA,0DACA,uEACA,wCACA,+BAAAmB,YAAAnB,WAEA,mEACA,uCAIAwI,wBACAC,MACAC,wBACAA,0BAGAC,OACA,2CACA,OACA,gDAGA,6CACA,OACA,kDAGAvL,UACAwL,WACA,gDACA,4BAEAC,SAEA7C,+BAEA,iDADA,GAMAC,wBACA2C,WACA,+BACA,sDACA,sBACA,2EAGA,sDACA,sBACA,sDAGA,kBACA,wFAGAC,SAEAtB,iBAEA,8CADA,EACA,8BAEA,6BAIAuB,SACAC,8BACA,iDACA,aACA7I,KAEA,6DACA,2DACAA,eAGA8I,gCACA,mDACA,YACA9I,KAEA,6DACA,yDACAA,eAGA+I,kCACA,qDACA,YACA/I,KAEA,2DACA,yDACAA,eAGAgJ,gBACA,iDACA,6CACA,+CAEA,gBACA,gBACA,gBAEA,iBAEA,WACA,iBAEA,OADAC,kBACA,uCAEAC,mCACA,mCAGA,OAFA,0BACAlJ,aAGA,qBAEAA,KAEAU,2BACA,6BACA,8CAEA,0BAEA,wCACA,qBACA,sCACA,kDACA,wCACA,qDACA,gDACA,gDAEA2B,4BACA,uCACA,MACA,qBACA,8BACA,CACA8G,sBACAC,mBAGA,uCACA,KACA,0CACA,oCACA,KACA,QACA,8CACA,8CACA,+CACA,qCACAC,mCACA,SACA,CAAAC,iBAEA,CAAAC,wBAAAvD,kBAGA,mCACAqD,iCACA,SACA,CAAAC,iBAEA,CAAAC,wBAAAvD,kBAGA,SACA,gCACAwD,GACAC,aACAC,WACAC,cACAC,YAGA,eACA,8CACAH,mBAEAD,GACAC,aACAC,WACAC,cACAC,YAGA,oBACA,kEACA,kEACAJ,GACAG,cACAC,UACAH,aACAC,WACAG,uBAGA,8DACAL,GACAG,cACAC,UACAH,aACAC,WACAI,yBACAD,wBAIA,+DACA,kEACAL,GACAG,cACAC,UACA9G,eACA2G,aACAC,WACAL,WACAQ,uBAGA,8DACAL,GACAG,cACAC,UACA9G,eACA2G,aACAJ,WACAK,WACAI,yBACAD,yBAKAE,2BACA,6BACA,+CACA,mBACA,4BACA,oCACA,kCACA,oBACA,+BAIA,0CAIArH,8BACA,0EACA,uCAEAC,8BACA,0EACAqH,8FACA,6EAEA,sBACA,sDACA,oBACA,4CACA,gDAGApH,iCACA,qCACA,gDAEA,YADA,oDAGA,oCACA,qDACA,qEACA,uCACA,CACA,kCAEA,YADA,oDAGA,4CACA,qEACA,qCAGAC,sBACA,YACA,+FACA,0CACA,CACA5B,iCACA6D,gBACAC,cAEA,CACA9D,wCACA6D,mBACAC,cAEA,CACA9D,yCACA6D,oBACAC,eAGA,iEACA,oBACA,iDAGA,mEACA,yEACA,mCACA,6DACA,oBACA,iDAIAkF,qBACA,wBAEAC,oBACA,uBAEAC,wBACA,uBACA,OACAnE,gBACA5B,YACA1C,8CACAwE,gDACAC,kDACAC,8CACAgE,2DACA5M,6DAEA6M,2BAGA,GAFA,sCACA,6CACA,2BAKA,OAJAC,uBACAA,4BAEAA,uBACA,UAKA,iCACA,OACArE,gDACAsE,kDACAC,sBACApG,YACA4B,gBACAxI,4DACA4M,4DAEA,0BAGA,GAFA,sCACA,6CACA,4BACA,qBAEArJ,kBACA,IAEA,OACA0J,gBACAC,OACAC,4BAIAC,kBACA,0EAEAC,uBACA,oCACA,uCAEAlJ,sBACA,oCACA,6DACA,uCAEAH,yBACA,qEACA,gCACA,sEAGAsJ,gBACA,OACAN,kBACA/I,kDACAiF,0DACA0D,2DACA5M,6DAEA,uBACAuN,2BAIA,GAHA,sCACA,qCACA,6CACA,4BACA,qBAEA,OADAhK,cACA,YACA,WACAA,6BACA,MACA,WACAA,uCACA,MACA,WACAA,8BACA,MACA,WACAA,uBACA,MACA,WACAA,oBACA,MACA,QACA,MAEA,WAEA,+CACAiK,cACAjK,oEAGAkK,GACAR,gBACAC,cACA,uDACA,mDACA,wGAEAC,8BAMAvN,cACA,uCACA,2BAEA8N,6BACA,2BACA,SACA,gCACA,iCACA,oCAEA,OADAC,WACA,IAIAA,yBAEA,OACA/B,gCACAvF,oCACAM,sCACAiH,WACAhH,kCACAC,oCACA+F,SACAiB,6CACAC,2CACAC,gDACA/N,YAEAgO,gBAAAC,WAAA,SACA,2BACA,sBACA,6BACA,gCACA,0CACAnB,0BACA,8BACA,kBACA,kCACA,0BACA,kBACA,kCACAvJ,gCACAA,eACAA,eACA,8CAKA3C,yBACA,6BACA,sCAEAR,wBACA,gBACA,2BAEAD,oBACA,kBACA,aACA,yBACA,8BAEAN,SACA,sCACA,IACA,sBACA,2BACA,8BAIAqO,8BACA,qBAEA,8BACA,SACA,KACA,iCACA,kDAEA,OADAC,WACA,IAGA,GACA,YAEAC,EADA,6BACAA,wBAEAA,sCAIA,OACAC,uDACAD,qBAEA,0BAGA,GAFA,qCACA,6BACA,yCACA,yCACA,wBACA,6BACA7K,sBACA,IAGA,OADA,0BACA,CACA0J,QAAAqB,YACApB,yCAIAnL,yBACA,6DAKA,GADA,kDACA,qDACA,gDACA,+DAEA,+BACA,iCACAwM,oBACAhE,WACAE,OACA,0CAEA,mCACA,6CAGA,4CACA,uBACA,mCArBA,qDAuBAvK,mBACA,aACA,4BACA,CACA,mCACA,qBAEA,8BAGAsO,gBACA,6CAEAnO,cACA,KACA,2BACA,+CAEA,mBACA,wBACA,2CACA,6BACA,6BACA,sBAEA,kBAEA,YADA,6GAGA,6BACA,SASA,GARA,+BACA,wBACAoO,WAEAA,WAEA,IAEA,eAEA,YADA,mCAIA,sCAEA,yDAGAlO,cACA,4CACA,uBACA,6BACA,+BAEAM,wBACA,4CACA,8BAEAoB,oBACA,2CACA,iCACA,gCACA,2BAGAe,qBACA,0CACA,GACA,YACA0L,sCACAC,iDACAC,qDAEAC,KACA/B,IACA,kBACA,+BACA,0BACA,CACAnB,sBACAC,mBAGA,qCACA,cACA,qBACAK,mBAGAM,gBACAN,aACAC,yCACAE,UACAD,gBACA,SACA,6BACA,0BACA,+CACA,iCACA,iCAKA,WAKA7K,4BACA,kBACA,aACA,iCACA,qEACA,4BACA,iCC/jD4X,I,wBCQxXwN,EAAY,eACd,EACApQ,EACA8G,GACA,EACA,KACA,WACA,MAIa,aAAAsJ,E,2CCnBf","file":"js/chunk-22deb630.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"group-task-container\"},[_c('div',{staticClass:\"page-header\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.projectObj.title))]),_c('div',{staticClass:\"desc\"},[_vm._v(_vm._s(_vm.projectObj.desc))])]),_c('div',{staticClass:\"page-content\"},[_c('portal-form',{ref:\"searchFormRef\",attrs:{\"searchBtnLoading\":_vm.searchLoading,\"form-config-list\":_vm.formConfigList,\"formRules\":_vm.dateValidate,\"form-data\":_vm.formData},on:{\"reset-btn-click\":_vm.resetSearch,\"search-btn-click\":_vm.search}}),_c('todo-info',{ref:\"todoinfo\",attrs:{\"todoInfoList\":_vm.todoInfoList,\"needDelegateBtn\":false,\"searchLoading\":_vm.searchTableLoading,\"pageSize\":_vm.pageSize,\"sortCondition\":_vm.sortTime,\"type\":\"groupTask\"},on:{\"check-change\":_vm.checkTaskChange,\"handle-size-change\":_vm.handleSizeChange,\"handle-sort-conditions\":_vm.handleSortConditions,\"processing\":_vm.processing}})],1),_c('div',{staticClass:\"page-dialog\"},[_c('el-dialog',{ref:\"selectTaskNameDialogRef\",attrs:{\"title\":\"Select Task Name\",\"width\":\"800px\",\"visible\":_vm.taskNameDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.closeDialog},on:{\"update:visible\":function($event){_vm.taskNameDialogVisible=$event},\"closed\":_vm.closeDialog}},[_c('portal-form',{ref:\"dialogTaskNameForm\",staticClass:\"dialogTaskNameForm\",attrs:{\"formRules\":_vm.formRules,\"form-config-list\":_vm.taskNameSearchForm.formConfigList,\"form-data\":_vm.taskNameSearchForm.formData,\"needOperateBtn\":true,\"searchBtnLoading\":_vm.dialogTaskNameFormBtnLoading,\"smallAutoColumn\":2,\"bigAutoColumn\":2},on:{\"search-btn-click\":_vm.selectTaskDialogSearch,\"reset-btn-click\":_vm.selectTaskDialogReset}}),_c('table-page',{ref:\"taskNameTableRef\",attrs:{\"columns\":_vm.dialogTable.columns,\"getTableData\":_vm.dialogTable.getTableData,\"is-search\":_vm.dialogTable.isSearch,\"is-check\":true,\"isSingleCheck\":true},on:{\"single-selection-change\":_vm.dialogTable.singleChange}}),_c('div',{staticClass:\"dialog-pagination\"},[_c('portal-pagination',{ref:\"taskNameDialogPageRef\",attrs:{\"total\":_vm.taskNameCount,\"pageSize\":_vm.taskNamePageSize,\"hidden\":_vm.taskNameHasData},on:{\"pagination\":_vm.handleTaskNameSizeChange}})],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.closeDialog.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.comfirmTaskNameHandler}},[_vm._v(_vm._s(this.$t('common.button.confirm')))])],1)],1),_c('el-dialog',{attrs:{\"title\":\"Task Processing\",\"width\":\"448px\",\"visible\":_vm.taskProcessDialogVisible,\"close-on-click-modal\":false,\"before-close\":_vm.handleCancelClick},on:{\"update:visible\":function($event){_vm.taskProcessDialogVisible=$event},\"closed\":_vm.handleCancelClick}},[_c('portal-form',{ref:\"dialogProcessForm\",staticClass:\"dialogProcessForm\",attrs:{\"form-config-list\":_vm.taskProcessForm,\"form-data\":_vm.taskProcessFormData,\"form-rules\":_vm.processFormRules,\"needOperateBtn\":false,\"needBottomLine\":false,\"smallAutoColumn\":1,\"bigAutoColumn\":1}},[_c('template',{slot:\"operationRadio\"},[_c('el-form-item',{attrs:{\"prop\":\"operation\",\"label\":\"Current Bank\"}},[_c('el-radio-group',{model:{value:(_vm.taskProcessFormData.operation),callback:function ($$v) {_vm.$set(_vm.taskProcessFormData, \"operation\", $$v)},expression:\"taskProcessFormData.operation\"}},[_c('el-radio',{attrs:{\"label\":\"approve\"}},[_vm._v(\"Approve\")]),_c('el-radio',{attrs:{\"label\":\"reject\"}},[_vm._v(\"Reject\")])],1)],1),_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.taskProcessFormData.operation === 'reject' && /backinitiator/.test(_vm.currentData.actions)),expression:\"taskProcessFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"}]},[_c('el-checkbox',{model:{value:(_vm.initialSubmit),callback:function ($$v) {_vm.initialSubmit=$$v},expression:\"initialSubmit\"}},[_vm._v(\"Let Initiator Modify and Resubmit\")])],1)],1)],2),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();return _vm.handleCancelClick.apply(null, arguments)}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleConfirmClick}},[_vm._v(_vm._s(this.$t('common.button.submit')))])],1)],1),_c('el-dialog',{staticClass:\"process-dialog\",attrs:{\"title\":\"Task Processing\",\"width\":\"448px\",\"visible\":_vm.processOperationDialogVisible,\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.processOperationDialogVisible=$event},\"closed\":_vm.handleProcessCancelClick}},[_c('el-form',{ref:\"processOptForm\",attrs:{\"rules\":_vm.processOptFormRules,\"model\":_vm.processOperationFormData,\"label-position\":\"top\"}},[_c('el-form-item',{staticClass:\"process-operation-radio\",attrs:{\"prop\":\"operation\",\"label\":\"Action\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.operation),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"operation\", $$v)},expression:\"processOperationFormData.operation\"}},_vm._l((_vm.processOptionLists),function(item){return _c('el-radio',{key:item.value,staticClass:\"operation-radio\",attrs:{\"label\":item.value}},[_vm._v(\" \"+_vm._s(item.label)+\" \")])}),1)],1),_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.processOperationFormData.operation === 'reject' && /backinitiator/.test(_vm.currentData.actions)),expression:\"processOperationFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"}],staticClass:\"test-checkbox\"},[_c('el-checkbox',{model:{value:(_vm.processOperationFormData.initialSubmit),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"initialSubmit\", $$v)},expression:\"processOperationFormData.initialSubmit\"}},[_vm._v(\" Let Initiator Modify and Resubmit \")])],1),(_vm.processOperationFormData.operation === 'investigate')?_c('el-form-item',{attrs:{\"prop\":\"investigateOperator\",\"label\":\"Operator\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.investigateOperator),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"investigateOperator\", $$v)},expression:\"processOperationFormData.investigateOperator\"}},[_c('el-radio',{attrs:{\"label\":\"initiator\"}},[_vm._v(\"Initiator\")]),_c('el-radio',{attrs:{\"label\":\"others\"}},[_vm._v(\"Others\")])],1)],1):_vm._e(),(\n            _vm.processOperationFormData.investigateOperator === 'others' &&\n            _vm.processOperationFormData.operation === 'investigate'\n          )?_c('el-form-item',{staticClass:\"org-short-code\",attrs:{\"prop\":\"selectOperatorList\"}},[_c('div',{staticClass:\"multi-select-container\",class:{ 'err-border': _vm.isCheckError }},[_c('div',{staticClass:\"select-tags\"},[_c('div',{staticClass:\"select-scroll\"},_vm._l((_vm.selectOperatorList),function(item,index){return _c('el-tag',{key:index,attrs:{\"type\":\"info\",\"closable\":true},on:{\"close\":function($event){return _vm.removeSelecteOperator(item)}}},[_vm._v(\" \"+_vm._s(item.roleName || item.userName)+\" \")])}),1)]),_c('div',{staticClass:\"icon-e\"},[_c('span',{staticClass:\"el-icon-ellipsis\",on:{\"click\":_vm.openMultiCheckDilog}})])])]):_vm._e(),(_vm.processOperationFormData.operation === 'investigate')?_c('el-form-item',{attrs:{\"prop\":\"validityPeriod\",\"label\":\"Validity Period\"}},[_c('el-radio-group',{model:{value:(_vm.processOperationFormData.validityPeriod),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"validityPeriod\", $$v)},expression:\"processOperationFormData.validityPeriod\"}},[_c('el-radio',{attrs:{\"label\":\"sameAsOriginal\"}},[_vm._v(\"Same as Original\")]),_c('el-radio',{attrs:{\"label\":\"customized\"}},[_vm._v(\"Customized\")])],1)],1):_vm._e(),(\n            _vm.processOperationFormData.operation === 'investigate' &&\n            _vm.processOperationFormData.validityPeriod === 'customized'\n          )?_c('el-row',{staticClass:\"task-detail-col\",attrs:{\"gutter\":6}},[_c('el-col',{attrs:{\"span\":4}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedDay,\"prop\":\"customizedDay\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Days')},model:{value:(_vm.processOptionTimeForm.customizedDay),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedDay\", $$v)},expression:\"processOptionTimeForm.customizedDay\"}})],1)],1),_c('el-col',{attrs:{\"span\":3}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Days')))]),_c('el-col',{attrs:{\"span\":4}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedHours,\"prop\":\"customizedHours\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Hours')},model:{value:(_vm.processOptionTimeForm.customizedHours),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedHours\", $$v)},expression:\"processOptionTimeForm.customizedHours\"}})],1)],1),_c('el-col',{attrs:{\"span\":3}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Hours')))]),_c('el-col',{attrs:{\"span\":5}},[_c('el-form-item',{attrs:{\"rules\":_vm.invesCustomizedMinutes,\"prop\":\"customizedMinutes\"}},[_c('el-input',{attrs:{\"size\":\"small\",\"placeholder\":_vm.$t('TAC.taskDetail.Minutes')},model:{value:(_vm.processOptionTimeForm.customizedMinutes),callback:function ($$v) {_vm.$set(_vm.processOptionTimeForm, \"customizedMinutes\", $$v)},expression:\"processOptionTimeForm.customizedMinutes\"}})],1)],1),_c('el-col',{attrs:{\"span\":4}},[_vm._v(_vm._s(_vm.$t('TAC.taskDetail.Minutes')))])],1):_vm._e(),_c('el-form-item',{attrs:{\"label\":\"Remark\",\"prop\":\"remark\"}},[_c('el-input',{attrs:{\"type\":\"textarea\"},model:{value:(_vm.processOperationFormData.remark),callback:function ($$v) {_vm.$set(_vm.processOperationFormData, \"remark\", $$v)},expression:\"processOperationFormData.remark\"}})],1)],1),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('button',{staticClass:\"cancel-button\",attrs:{\"size\":\"small\"},on:{\"click\":function($event){$event.preventDefault();_vm.processOperationDialogVisible = false}}},[_vm._v(\" \"+_vm._s(this.$t('common.button.cancel'))+\" \")]),_c('el-button',{directives:[{name:\"preventReClick\",rawName:\"v-preventReClick\"}],attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":_vm.handleProcessConfirmClick}},[_vm._v(_vm._s(this.$t('common.button.submit')))])],1)],1),_c('portal-dialog',{ref:\"selectProcessOptDialogRef\",staticClass:\"select-operator-dialog\",attrs:{\"title\":\"Investigate Task\",\"dialogVisible\":_vm.selectProcessOptDialogVisible,\"searchForm\":_vm.processOptSearchFrom,\"needSearchFormBottomLine\":true,\"isOverflowHeight\":true,\"formRules\":_vm.formRules,\"dialogTable\":_vm.selectProcessOptDialogTable,\"searchLoading\":_vm.selectProcessOptSearchLoading},on:{\"update:dialogVisible\":function($event){_vm.selectProcessOptDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.selectProcessOptDialogVisible=$event},\"update:searchLoading\":function($event){_vm.selectProcessOptSearchLoading=$event},\"update:search-loading\":function($event){_vm.selectProcessOptSearchLoading=$event},\"close-dialog\":_vm.selectProcessOptCloseDialog,\"search-reset\":_vm.selectProcessOptDialogReset,\"cancel-btn-click\":_vm.selectProcessOptCloseDialog,\"confirm-btn-click\":_vm.comfirmselectProcessOptHandler}},[_c('template',{slot:\"operation\"},[_c('div',{staticClass:\"check-operator\"},[_c('div',{staticClass:\"check-label\"},[_vm._v(\"Select Type\")]),_c('el-radio-group',{on:{\"change\":_vm.processCheckChange},model:{value:(_vm.assigneeType),callback:function ($$v) {_vm.assigneeType=$$v},expression:\"assigneeType\"}},[_c('el-radio',{attrs:{\"label\":\"operator\"}},[_vm._v(\"Operator\")]),_c('el-radio',{attrs:{\"label\":\"role\"}},[_vm._v(\"Role\")])],1)],1)])],2),_c('notification-dialog',{attrs:{\"dialogVisible\":_vm.notificationDialogVisible},on:{\"update:dialogVisible\":function($event){_vm.notificationDialogVisible=$event},\"update:dialog-visible\":function($event){_vm.notificationDialogVisible=$event}}})],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"group-task-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">{{ projectObj.title }}</div>\n      <div class=\"desc\">{{ projectObj.desc }}</div>\n    </div>\n    <div class=\"page-content\">\n      <portal-form\n        ref=\"searchFormRef\"\n        :searchBtnLoading=\"searchLoading\"\n        :form-config-list=\"formConfigList\"\n        :formRules=\"dateValidate\"\n        :form-data=\"formData\"\n        @reset-btn-click=\"resetSearch\"\n        @search-btn-click=\"search\"\n      ></portal-form>\n      <todo-info\n        ref=\"todoinfo\"\n        :todoInfoList=\"todoInfoList\"\n        :needDelegateBtn=\"false\"\n        :searchLoading=\"searchTableLoading\"\n        :pageSize=\"pageSize\"\n        :sortCondition=\"sortTime\"\n        @check-change=\"checkTaskChange\"\n        @handle-size-change=\"handleSizeChange\"\n        @handle-sort-conditions=\"handleSortConditions\"\n        @processing=\"processing\"\n        type=\"groupTask\"\n      ></todo-info>\n    </div>\n    <div class=\"page-dialog\">\n      <!-- select-taskName-dialog -->\n      <el-dialog\n        title=\"Select Task Name\"\n        width=\"800px\"\n        ref=\"selectTaskNameDialogRef\"\n        :visible.sync=\"taskNameDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"closeDialog\"\n        @closed=\"closeDialog\"\n      >\n        <portal-form\n          class=\"dialogTaskNameForm\"\n          ref=\"dialogTaskNameForm\"\n          :formRules=\"formRules\"\n          :form-config-list=\"taskNameSearchForm.formConfigList\"\n          :form-data=\"taskNameSearchForm.formData\"\n          :needOperateBtn=\"true\"\n          :searchBtnLoading=\"dialogTaskNameFormBtnLoading\"\n          :smallAutoColumn=\"2\"\n          :bigAutoColumn=\"2\"\n          @search-btn-click=\"selectTaskDialogSearch\"\n          @reset-btn-click=\"selectTaskDialogReset\"\n        ></portal-form>\n        <table-page\n          ref=\"taskNameTableRef\"\n          :columns=\"dialogTable.columns\"\n          :getTableData=\"dialogTable.getTableData\"\n          :is-search=\"dialogTable.isSearch\"\n          :is-check=\"true\"\n          :isSingleCheck=\"true\"\n          @single-selection-change=\"dialogTable.singleChange\"\n        ></table-page>\n        <div class=\"dialog-pagination\">\n          <portal-pagination\n            :total=\"taskNameCount\"\n            ref=\"taskNameDialogPageRef\"\n            :pageSize=\"taskNamePageSize\"\n            @pagination=\"handleTaskNameSizeChange\"\n            :hidden=\"taskNameHasData\"\n          ></portal-pagination>\n        </div>\n        <div class=\"dialog-footer\" slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"closeDialog\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"comfirmTaskNameHandler\" v-preventReClick>{{\n            this.$t('common.button.confirm')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- task-processing-dialog -->\n      <el-dialog\n        title=\"Task Processing\"\n        width=\"448px\"\n        :visible.sync=\"taskProcessDialogVisible\"\n        :close-on-click-modal=\"false\"\n        :before-close=\"handleCancelClick\"\n        @closed=\"handleCancelClick\"\n      >\n        <portal-form\n          class=\"dialogProcessForm\"\n          ref=\"dialogProcessForm\"\n          :form-config-list=\"taskProcessForm\"\n          :form-data=\"taskProcessFormData\"\n          :form-rules=\"processFormRules\"\n          :needOperateBtn=\"false\"\n          :needBottomLine=\"false\"\n          :smallAutoColumn=\"1\"\n          :bigAutoColumn=\"1\"\n        >\n          <template slot=\"operationRadio\">\n            <el-form-item prop=\"operation\" label=\"Current Bank\">\n              <el-radio-group v-model=\"taskProcessFormData.operation\">\n                <el-radio label=\"approve\">Approve</el-radio>\n                <el-radio label=\"reject\">Reject</el-radio>\n              </el-radio-group>\n            </el-form-item>\n\n            <el-form-item\n              v-show=\"taskProcessFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"\n            >\n              <el-checkbox v-model=\"initialSubmit\">Let Initiator Modify and Resubmit</el-checkbox>\n            </el-form-item>\n          </template>\n        </portal-form>\n        <div slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"handleCancelClick\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"handleConfirmClick\" v-preventReClick>{{\n            this.$t('common.button.submit')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- process-operation-dialog -->\n      <el-dialog\n        title=\"Task Processing\"\n        class=\"process-dialog\"\n        width=\"448px\"\n        :visible.sync=\"processOperationDialogVisible\"\n        :close-on-click-modal=\"false\"\n        @closed=\"handleProcessCancelClick\"\n      >\n        <el-form\n          :rules=\"processOptFormRules\"\n          :model=\"processOperationFormData\"\n          ref=\"processOptForm\"\n          label-position=\"top\"\n        >\n          <el-form-item class=\"process-operation-radio\" prop=\"operation\" label=\"Action\">\n            <el-radio-group v-model=\"processOperationFormData.operation\">\n              <el-radio\n                class=\"operation-radio\"\n                v-for=\"item in processOptionLists\"\n                :key=\"item.value\"\n                :label=\"item.value\"\n              >\n                {{ item.label }}\n              </el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item\n            class=\"test-checkbox\"\n            v-show=\"processOperationFormData.operation === 'reject' && /backinitiator/.test(currentData.actions)\"\n          >\n            <el-checkbox v-model=\"processOperationFormData.initialSubmit\">\n              Let Initiator Modify and Resubmit\n            </el-checkbox>\n          </el-form-item>\n          <el-form-item\n            v-if=\"processOperationFormData.operation === 'investigate'\"\n            prop=\"investigateOperator\"\n            label=\"Operator\"\n          >\n            <el-radio-group v-model=\"processOperationFormData.investigateOperator\">\n              <el-radio label=\"initiator\">Initiator</el-radio>\n              <el-radio label=\"others\">Others</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-form-item\n            class=\"org-short-code\"\n            prop=\"selectOperatorList\"\n            v-if=\"\n              processOperationFormData.investigateOperator === 'others' &&\n              processOperationFormData.operation === 'investigate'\n            \"\n          >\n            <div class=\"multi-select-container\" :class=\"{ 'err-border': isCheckError }\">\n              <div class=\"select-tags\">\n                <div class=\"select-scroll\">\n                  <el-tag\n                    type=\"info\"\n                    v-for=\"(item, index) in selectOperatorList\"\n                    :key=\"index\"\n                    :closable=\"true\"\n                    @close=\"removeSelecteOperator(item)\"\n                  >\n                    {{ item.roleName || item.userName }}\n                  </el-tag>\n                </div>\n              </div>\n              <div class=\"icon-e\"><span class=\"el-icon-ellipsis\" @click=\"openMultiCheckDilog\"></span></div>\n            </div>\n          </el-form-item>\n          <el-form-item\n            prop=\"validityPeriod\"\n            v-if=\"processOperationFormData.operation === 'investigate'\"\n            label=\"Validity Period\"\n          >\n            <el-radio-group v-model=\"processOperationFormData.validityPeriod\">\n              <el-radio label=\"sameAsOriginal\">Same as Original</el-radio>\n              <el-radio label=\"customized\">Customized</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          <el-row\n            v-if=\"\n              processOperationFormData.operation === 'investigate' &&\n              processOperationFormData.validityPeriod === 'customized'\n            \"\n            :gutter=\"6\"\n            class=\"task-detail-col\"\n          >\n            <el-col :span=\"4\">\n              <el-form-item :rules=\"invesCustomizedDay\" prop=\"customizedDay\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedDay\"\n                  :placeholder=\"$t('TAC.taskDetail.Days')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"3\">{{ $t('TAC.taskDetail.Days') }}</el-col>\n            <el-col :span=\"4\">\n              <el-form-item :rules=\"invesCustomizedHours\" prop=\"customizedHours\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedHours\"\n                  :placeholder=\"$t('TAC.taskDetail.Hours')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"3\">{{ $t('TAC.taskDetail.Hours') }}</el-col>\n            <el-col :span=\"5\">\n              <el-form-item :rules=\"invesCustomizedMinutes\" prop=\"customizedMinutes\">\n                <el-input\n                  size=\"small\"\n                  v-model=\"processOptionTimeForm.customizedMinutes\"\n                  :placeholder=\"$t('TAC.taskDetail.Minutes')\"\n                ></el-input>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"4\">{{ $t('TAC.taskDetail.Minutes') }}</el-col>\n          </el-row>\n          <el-form-item label=\"Remark\" prop=\"remark\">\n            <el-input type=\"textarea\" v-model=\"processOperationFormData.remark\"></el-input>\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\">\n          <button size=\"small\" class=\"cancel-button\" @click.prevent=\"processOperationDialogVisible = false\">\n            {{ this.$t('common.button.cancel') }}\n          </button>\n          <el-button type=\"primary\" size=\"small\" @click=\"handleProcessConfirmClick\" v-preventReClick>{{\n            this.$t('common.button.submit')\n          }}</el-button>\n        </div>\n      </el-dialog>\n      <!-- select-process-operator-dialog -->\n      <portal-dialog\n        title=\"Investigate Task\"\n        class=\"select-operator-dialog\"\n        ref=\"selectProcessOptDialogRef\"\n        :dialogVisible.sync=\"selectProcessOptDialogVisible\"\n        :searchForm=\"processOptSearchFrom\"\n        :needSearchFormBottomLine=\"true\"\n        :isOverflowHeight=\"true\"\n        :formRules=\"formRules\"\n        :dialogTable=\"selectProcessOptDialogTable\"\n        :searchLoading.sync=\"selectProcessOptSearchLoading\"\n        @close-dialog=\"selectProcessOptCloseDialog\"\n        @search-reset=\"selectProcessOptDialogReset\"\n        @cancel-btn-click=\"selectProcessOptCloseDialog\"\n        @confirm-btn-click=\"comfirmselectProcessOptHandler\"\n      >\n        <template slot=\"operation\">\n          <div class=\"check-operator\">\n            <div class=\"check-label\">Select Type</div>\n            <el-radio-group @change=\"processCheckChange\" v-model=\"assigneeType\">\n              <el-radio label=\"operator\">Operator</el-radio>\n              <el-radio label=\"role\">Role</el-radio>\n            </el-radio-group>\n          </div>\n        </template>\n      </portal-dialog>\n      <!-- operation-notification-dialog -->\n      <notification-dialog :dialogVisible.sync=\"notificationDialogVisible\"></notification-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PortalForm from '@/components/portal-form';\nimport TodoInfo from '@/views/task-center/component/todo-info';\nimport PortalDialog from '@/views/task-center/component/portal-dialog';\nimport NotificationDialog from '@/views/task-center/component/notification-dialog';\nimport TablePage from '@/components/tablePage';\nimport PortalPagination from '@/components/portal-pagination';\nimport { taskHistoryRules, groupTaskRulus, dateValidateRule } from '@/views/task-center/validator/index';\nimport {\n  queryGroupTask,\n  queryWorkFlowDataDict,\n  queryCurrentHandler,\n  queryOrgCurrentHandler,\n  batchProcess,\n  queryRole,\n  queryTaskName,\n} from '@/views/task-center/api/api-task-center';\nimport dayjs from 'dayjs';\n\nexport default {\n  name: 'groupTask',\n  components: {\n    PortalForm,\n    NotificationDialog,\n    TodoInfo,\n    TablePage,\n    PortalDialog,\n    PortalPagination,\n  },\n  data() {\n    return {\n      invesCustomizedDay: [\n        { validator: this.customizedDayValidator, message: 'Enter a value between 0 and 100.', trigger: 'change' },\n      ],\n      invesCustomizedHours: [\n        { validator: this.customizedHoursValidator, message: 'Enter a value between 0 and 23.', trigger: 'change' },\n      ],\n      invesCustomizedMinutes: [\n        { validator: this.customizedMinutesValidator, message: 'Enter a value between 0 and 59.', trigger: 'change' },\n      ],\n      notificationDialogVisible: false,\n      projectObj: {\n        title: this.$t('TAC.groupTask.title'),\n        desc: this.$t('TAC.groupTask.desc'),\n      },\n      searchTableLoading: false,\n      searchLoading: false,\n      taskNameSearchFormData: {\n        taskName: '',\n        taskType: '',\n      },\n      searchFormPriority: [\n        {\n          value: '',\n          label: 'All',\n        },\n      ],\n      searchFormTaskType: [\n        {\n          value: '',\n          label: 'All',\n        },\n      ],\n      searchFormStatus: [\n        {\n          value: '',\n          label: 'All',\n        },\n      ],\n      formData: {\n        taskNo: '',\n        priority: '',\n        taskName: '',\n        taskType: '',\n        status: '',\n        dueTime: '',\n        creationTime: [],\n      },\n      dateValidate: dateValidateRule(),\n      curSelectTaskNameToTaskType: '',\n      tempTaskName: {},\n      sortTime: '',\n      todoInfoList: {\n        todoInfoLists: [],\n        sortData: [],\n        taskType: false,\n        count: 0,\n      },\n      formRules: taskHistoryRules(),\n      pageSize: 10,\n      checkLists: [],\n      tempTaskHandle: [],\n      taskNameHasData: false,\n      taskNameCount: 0,\n      taskNamePageSize: 5,\n      taskNameDialogVisible: false,\n      dialogTaskNameFormBtnLoading: false,\n      dialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            prop: 'taskName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            prop: 'taskType',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        getTableData: this.getTaskNameDialogData,\n        singleChange: this.taskNameDialigSelectChange,\n      },\n      taskNameSearchLoading: false,\n      taskProcessDialogVisible: false,\n      taskProcessForm: [\n        {\n          prop: 'operation',\n          key: 'operation',\n          slotName: 'operationRadio',\n        },\n        {\n          formItemClass: 'remark',\n          label: 'Remark',\n          prop: 'remark',\n          key: 'remark',\n          comp: 'el-input',\n          bind: {\n            type: 'textarea',\n          },\n        },\n      ],\n      taskProcessFormData: {\n        operation: '',\n        remark: '',\n      },\n      processFormRules: groupTaskRulus(),\n      operatorRadio: null,\n      initialSubmit: false,\n      pickerOptions: {\n        onPick: ({ maxDate, minDate }) => {\n          this.selectDate = minDate.getTime();\n          if (maxDate) {\n            this.selectDate = '';\n          }\n        },\n        disabledDate: (time) => {\n          if (this.selectDate !== '') {\n            const one = 30 * 24 * 3600 * 1000;\n            const minTime = this.selectDate - one;\n            const maxTime = this.selectDate + one;\n            return time.getTime() < minTime || time.getTime() > maxTime;\n          }\n        },\n      },\n      processOperationDialogVisible: false,\n      processOptFormRules: {\n        operation: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        investigateOperator: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        validityPeriod: [{ required: true, message: 'Please select at least one.', trigger: 'change' }],\n        remark: [{ required: true, message: 'Please enter content.', trigger: 'blur' }],\n        selectOperatorList: [\n          {\n            required: true,\n            message: 'Please select at least one.',\n            trigger: 'change',\n            validator: this.selectOperatorListValidator,\n          },\n        ],\n        delegateOperatorList: [\n          {\n            required: true,\n            message: 'Please select at least one.',\n            trigger: 'change',\n            validator: this.selectOperatorListValidator,\n          },\n        ],\n      },\n      processOperationFormData: {\n        operation: '',\n        remark: '',\n        investigateOperator: '',\n        validityPeriod: '',\n        initialSubmit: false,\n      },\n      delegateOperatorList: [],\n      selectOperatorList: [],\n      selectProcessOptSingleCheck: true,\n      selectProcessOptDialogVisible: false,\n      processOptionTimeForm: {\n        customizedDay: '',\n        customizedHours: '',\n        customizedMinutes: '',\n      },\n      delegateSearchFromData: {\n        operatorType: '',\n        shortCode: '',\n        userName: '',\n        firstName: '',\n        middleName: '',\n        lastName: '',\n      },\n      delegateRoleSearchFormConfigList: [\n        {\n          label: this.$t('TAC.myTodo.roleName'),\n          key: 'roleName',\n          prop: 'roleName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.roleCategory'),\n          key: 'roleCategory',\n          prop: 'roleCategory',\n          comp: 'el-select',\n          options: [\n            {\n              value: '',\n              label: 'All',\n            },\n            {\n              value: '3000',\n              label: 'Organization Operator',\n            },\n            {\n              value: '5000',\n              label: 'Organization',\n            },\n            {\n              value: '7000',\n              label: 'Group',\n            },\n            {\n              value: '8000',\n              label: 'SP',\n            },\n          ],\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n      ],\n      delegateRoleSearchFormData: {\n        roleName: '',\n        roleCategory: '',\n      },\n      delegateDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: true,\n        hasPagination: true,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        getTableData: this.getDelegateDialogData,\n        singleChange: this.delegateDialigSelectChange,\n      },\n      selectProcessOptDialogTable: {\n        columns: [\n          {\n            label: this.$t('TAC.myTodo.userName'),\n            prop: 'userName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.firstName'),\n            prop: 'firstName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.middleName'),\n            prop: 'middleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.lastName'),\n            prop: 'lastName',\n            align: 'left',\n          },\n        ],\n        isSearch: false,\n        isSingleCheck: true,\n        hasPagination: true,\n        paginationConfig: {\n          total: 0,\n          pageIndex: 1,\n          pageSize: 5,\n        },\n        getTableData: this.getDelegateDialogData,\n        singleChange: this.singleCheckChange,\n        onSelectionChange: this.multiCheckChange,\n      },\n      selectProcessOptSearchLoading: false,\n      tempSingleCheck: {},\n      tempMultiCheck: [],\n      tempDelegateTableCol: [],\n      assigneeType: 'operator',\n      newSearchType: false,\n      shortCodeConfig: {\n        label: this.$t('TAC.myTodo.orgShortCode'),\n        formItemClass: 'short-code',\n        key: 'shortCode',\n        prop: 'shortCode',\n        comp: 'el-input',\n        bind: {\n          clearable: true,\n          placeholder: this.$t('common.placeholder.enter'),\n        },\n      },\n      isCheckError: false,\n      currentData: {},\n    };\n  },\n  computed: {\n    formConfigList() {\n      return [\n        {\n          label: this.$t('TAC.myTodo.taskNo'),\n          key: 'taskNo',\n          prop: 'taskNo',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.priority'),\n          key: 'priority',\n          prop: 'priority',\n          comp: 'el-select',\n          options: this.searchFormPriority,\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n        {\n          formItemClass: 'org-short-code',\n          label: this.$t('TAC.myTodo.taskName'),\n          key: 'taskName',\n          prop: 'taskName',\n          comp: 'el-input',\n          bind: {\n            clearable: true,\n            placeholder: this.$t('common.placeholder.select'),\n          },\n          slots: [\n            {\n              comp: 'el-link',\n              name: 'append',\n              class: 'short-code-icon',\n              bind: {\n                icon: 'el-icon-more',\n                underline: false,\n              },\n              event: {\n                click: () => {\n                  this.taskNameDialogVisible = true;\n                  this.taskNameSearchForm.formData.taskType = this.searchFormTaskType[0].value;\n                  this.dialogTable.isSearch = true;\n                },\n              },\n            },\n          ],\n        },\n        {\n          label: this.$t('TAC.myTodo.taskType'),\n          key: 'taskType',\n          prop: 'taskType',\n          comp: 'el-select',\n          options: this.searchFormTaskType,\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.status'),\n          key: 'status',\n          prop: 'status',\n          comp: 'el-select',\n          options: this.searchFormStatus,\n          bind: {\n            placeholder: this.$t('common.placeholder.enter'),\n          },\n        },\n        {\n          formItemClass: 'due-time',\n          label: this.$t('TAC.myTodo.dueTime'),\n          prop: 'dueTime',\n          key: 'dueTime',\n          comp: 'el-date-picker',\n          bind: {\n            placeholder: this.$t('common.placeholder.select'),\n            type: 'datetime',\n            'value-format': 'yyyy-MM-dd HH:mm:ss',\n          },\n        },\n        {\n          label: this.$t('TAC.myTodo.creationTime'),\n          formItemClass: 'form-special-date-box',\n          sameGroup: true,\n          prop: 'creationTime',\n          comp: [\n            {\n              key: 'creationTime',\n              comp: 'el-date-picker',\n              bind: {\n                placeholder: this.$t('common.placeholder.enter'),\n                align: 'right',\n                type: 'datetimerange',\n                format: 'dd/MM/yyyy HH:mm:ss',\n                'picker-options': this.pickerOptions,\n                'range-separator': '~',\n                'value-format': 'yyyy-MM-dd HH:mm:ss',\n                'default-time': ['00:00:00', '23:59:59'],\n                'start-placeholder': 'Please select',\n                'end-placeholder': 'Please select',\n              },\n            },\n            {\n              comp: 'i',\n              class: 'el-icon-date data_icon',\n            },\n          ],\n        },\n      ];\n    },\n    taskNameSearchForm() {\n      return {\n        formConfigList: [\n          {\n            label: this.$t('TAC.myTodo.taskName'),\n            key: 'taskName',\n            prop: 'taskName',\n            comp: 'el-input',\n            bind: {\n              clearable: true,\n              placeholder: this.$t('common.placeholder.enter'),\n            },\n          },\n          {\n            label: this.$t('TAC.myTodo.taskType'),\n            key: 'taskType',\n            prop: 'taskType',\n            comp: 'el-select',\n            options: this.searchFormTaskType,\n            bind: {\n              placeholder: this.$t('common.placeholder.select'),\n            },\n          },\n        ],\n        formData: this.taskNameSearchFormData,\n      };\n    },\n    processOptionLists() {\n      if (this.processOperationDialogVisible) {\n        let labelArr = ['approve', 'complete', 'redo', 'delegate', 'investigate', 'reject'];\n        return this.currentData.actions\n          .split(',')\n          .filter((element) => labelArr.includes(element))\n          .map((item) => {\n            if (item) {\n              return {\n                value: item,\n                label: item.replace(item[0], item[0].toUpperCase()),\n              };\n            }\n          });\n      } else {\n        return [];\n      }\n    },\n    processOptSearchFrom() {\n      if (this.assigneeType === 'operator') {\n        return {\n          formConfigList: [\n            {\n              label: this.$t('TAC.myTodo.operatorType'),\n              key: 'operatorType',\n              prop: 'operatorType',\n              comp: 'el-select',\n              options: [\n                {\n                  value: 'orgOperator',\n                  label: 'Organization Operator',\n                },\n                {\n                  value: 'spOperator',\n                  label: 'SP Operator',\n                },\n              ],\n              bind: {\n                placeholder: this.$t('common.placeholder.select'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.userName'),\n              key: 'userName',\n              prop: 'userName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.firstName'),\n              key: 'firstName',\n              prop: 'firstName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.middleName'),\n              key: 'middleName',\n              prop: 'middleName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n            {\n              label: this.$t('TAC.myTodo.lastName'),\n              key: 'lastName',\n              prop: 'lastName',\n              comp: 'el-input',\n              bind: {\n                clearable: true,\n                placeholder: this.$t('common.placeholder.enter'),\n              },\n            },\n          ],\n          formData: this.delegateSearchFromData,\n        };\n      } else {\n        return {\n          formConfigList: this.delegateRoleSearchFormConfigList,\n          formData: this.delegateRoleSearchFormData,\n        };\n      }\n    },\n  },\n  created() {\n    this.formData.creationTime = [\n      dayjs(\n        new Date(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 0, 0, 0).getTime() - 1000 * 3600 * 24 * 7)\n      ).format('YYYY-MM-DD HH:mm:ss'),\n      dayjs(new Date(dayjs().year(), dayjs().month(), dayjs().date(), 23, 59, 59)).format('YYYY-MM-DD HH:mm:ss'),\n    ];\n    queryWorkFlowDataDict({\n      dictCodes: [\n        'CPS.WORKFLOW.CONFIGURATION.PRIORITY',\n        'CPS.TASK.TYPE',\n        'CPS.WORKFLOW.TODO.TASK.STATE',\n        'WORK_FLOW_SORT_TIME',\n      ],\n    }).then((res) => {\n      if (res.header && res.header.success) {\n        this.searchFormPriority = res.dictDetailsMap['CPS.WORKFLOW.CONFIGURATION.PRIORITY'];\n        if (this.searchFormPriority[0].label !== 'All') {\n          this.searchFormPriority.unshift({ label: 'All', value: '' });\n        }\n        this.searchFormTaskType = res.dictDetailsMap['CPS.TASK.TYPE'];\n        this.searchFormStatus = res.dictDetailsMap['CPS.WORKFLOW.TODO.TASK.STATE'];\n        if (this.searchFormStatus[0].label !== 'All') {\n          this.searchFormStatus.unshift({ label: 'All', value: '' });\n        }\n        this.todoInfoList.sortData = res.dictDetailsMap['WORK_FLOW_SORT_TIME'];\n        this.sortTime = 'CREATE_TIME_LATEST';\n      }\n    });\n  },\n  beforeRouteEnter(to, from, next) {\n    next((vm) => {\n      vm.searchTableLoading = true;\n      vm.queryGroupTaskList();\n    });\n  },\n  watch: {\n    'processOptionTimeForm.customizedHours'(val) {\n      if (val > 23) {\n        this.processOptionTimeForm.customizedHours = 23;\n      }\n    },\n    'processOptionTimeForm.customizedMinutes'(val) {\n      if (val > 59) {\n        this.processOptionTimeForm.customizedMinutes = 59;\n      }\n    },\n    formData: {\n      handler(val) {\n        if (this.curSelectTaskNameToTaskType === val.taskType) return;\n        this.formData.taskName = '';\n      },\n      deep: true,\n    },\n    selectProcessOptSingleCheck(val) {\n      if (val) {\n        this.selectProcessOptDialogTable.isSingleCheck = true;\n      } else {\n        this.selectProcessOptDialogTable.isSingleCheck = false;\n      }\n    },\n    delegateSearchFromData: {\n      handler(val) {\n        if (val.operatorType === 'orgOperator') {\n          if (this.processOptSearchFrom.formConfigList.length === 5) {\n            this.newSearchType = true;\n            this.processOptSearchFrom.formConfigList.splice(1, 0, this.shortCodeConfig);\n          }\n        } else {\n          if (this.processOptSearchFrom.formConfigList.length === 6) {\n            this.newSearchType = false;\n            this.processOptSearchFrom.formConfigList.splice(1, 1);\n          }\n        }\n        if (val.shortCode !== '') {\n          this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.clearValidate('shortCode');\n        }\n      },\n      deep: true,\n    },\n    newSearchType(val) {\n      if (val) {\n        this.selectProcessOptDialogTable.getTableData = this.getOrgDelegateDialogData;\n      } else {\n        this.selectProcessOptDialogTable.getTableData = this.getDelegateDialogData;\n      }\n    },\n  },\n  methods: {\n    customizedDayValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedDay * 1;\n      if (value <= 100 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedMinutes');\n        this.$refs.processOptForm.clearValidate('customizedHours');\n        callback(new Error());\n      }\n    },\n    customizedHoursValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedHours * 1;\n      if (value <= 23 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedMinutes');\n        this.$refs.processOptForm.clearValidate('customizedDay');\n        callback(new Error());\n      }\n    },\n    customizedMinutesValidator(rule, val, callback) {\n      let value = this.processOptionTimeForm.customizedMinutes * 1;\n      if (value <= 59 && value >= 0) {\n        callback();\n      } else {\n        this.$refs.processOptForm.clearValidate('customizedHours');\n        this.$refs.processOptForm.clearValidate('customizedDay');\n        callback(new Error());\n      }\n    },\n    getFutureTime() {\n      const DayM = this.processOptionTimeForm.customizedDay;\n      const HoursM = this.processOptionTimeForm.customizedHours;\n      const MinutesM = this.processOptionTimeForm.customizedMinutes;\n\n      const DayMres = DayM ? Number(DayM) : 0;\n      const HoursMres = HoursM ? Number(HoursM) : 0;\n      const MinutesMres = MinutesM ? Number(MinutesM) : 0;\n\n      const Minutes = DayMres * 24 * 60 + HoursMres * 60 + MinutesMres;\n\n      const nowData = new Date(); // 1.获取当前日期\n      const nowMinutes = nowData.getMinutes(); // 2. 获取当前分钟\n      nowData.setMinutes(nowMinutes + Minutes); // 3. 设置当前时间+15分钟：把当前分钟数+15后的值重新设置为date对象的分钟数\n      return nowData.toLocaleString().replace(/\\//g, '-');\n    },\n    selectOperatorListValidator(rule, val, callback) {\n      if (!this.selectOperatorList.length) {\n        this.isCheckError = true;\n        callback(new Error());\n        return;\n      } else {\n        this.isCheckError = false;\n      }\n      callback();\n    },\n    handleProcessCancelClick() {\n      if (this.tempTaskHandle.length > 0) {\n        this.checkLists = this.tempTaskHandle.splice(0);\n      } else {\n        this.checkLists.splice(0);\n      }\n      this.$refs.processOptForm.resetFields();\n      this.isCheckError = false;\n      this.processOperationDialogVisible = false;\n      this.processOperationFormData.operation = 'approve';\n      this.processOperationFormData.remark = '';\n      this.processOperationFormData.investigateOperator = '';\n      this.processOperationFormData.validityPeriod = '';\n      this.processOperationFormData.initialSubmit = false;\n    },\n    handleProcessConfirmClick() {\n      this.$refs.processOptForm.validate((result) => {\n        if (result) {\n          this.isCheckError = false;\n          let processList = this.checkLists.map((item) => {\n            return {\n              processId: item.processId,\n              taskId: item.taskId,\n            };\n          });\n          let comments = this.processOperationFormData.remark;\n          let isBatch = false;\n          let actionType = this.processOperationFormData.operation;\n          let assigneeType = this.assigneeType == 'role' ? '3' : '1';\n          let assignee = [];\n          const date =\n            60 * 24 * this.processOptionTimeForm.customizedDay +\n            60 * this.processOptionTimeForm.customizedHours +\n            1 * this.processOptionTimeForm.customizedMinutes;\n          if (this.delegateOperatorList.length > 0) {\n            assignee = this.delegateOperatorList.map((item) => {\n              if (item.roleId) {\n                return { roleId: item.roleId };\n              }\n              return { operatorId: item.identityId, operatorType: assigneeType };\n            });\n          }\n          if (this.selectOperatorList.length > 0) {\n            assignee = this.selectOperatorList.map((item) => {\n              if (item.roleId) {\n                return { roleId: item.roleId };\n              }\n              return { operatorId: item.identityId, operatorType: assigneeType };\n            });\n          }\n          let params = {};\n          if (actionType === 'approve' || actionType === 'complete') {\n            params = {\n              actionType,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'reject') {\n            if (this.processOperationFormData.initialSubmit) {\n              actionType = 'backinitiator';\n            }\n            params = {\n              actionType,\n              comments,\n              processList,\n              isBatch,\n            };\n          }\n          if (actionType === 'investigate') {\n            if (this.processOperationFormData.investigateOperator === 'initiator') {\n              if (this.processOperationFormData.validityPeriod === 'sameAsOriginal') {\n                params = {\n                  processList,\n                  isBatch,\n                  actionType,\n                  comments,\n                  isResetExpireTime: false,\n                };\n              }\n              if (this.processOperationFormData.validityPeriod === 'customized') {\n                params = {\n                  processList,\n                  isBatch,\n                  actionType,\n                  comments,\n                  taskExpireTimeInterval: date,\n                  isResetExpireTime: true,\n                };\n              }\n            }\n            if (this.processOperationFormData.investigateOperator === 'others') {\n              if (this.processOperationFormData.validityPeriod === 'sameAsOriginal') {\n                params = {\n                  processList,\n                  isBatch,\n                  assigneeType,\n                  actionType,\n                  comments,\n                  assignee,\n                  isResetExpireTime: false,\n                };\n              }\n              if (this.processOperationFormData.validityPeriod === 'customized') {\n                params = {\n                  processList,\n                  isBatch,\n                  assigneeType,\n                  actionType,\n                  assignee,\n                  comments,\n                  taskExpireTimeInterval: date,\n                  isResetExpireTime: true,\n                };\n              }\n            }\n          }\n          batchProcess(params).then((res) => {\n            if (res.header && res.header.success) {\n              this.$modal.msgSuccess('Operation succeeded.');\n              this.checkLists = [];\n              this.$refs.todoinfo.reset();\n              this.delegateOperatorList.splice(0);\n              this.selectOperatorList.splice(0);\n              this.$nextTick(() => {\n                this.queryGroupTaskList();\n              });\n            }\n          });\n          this.processOperationDialogVisible = false;\n        }\n      });\n    },\n    selectProcessOptCloseDialog() {\n      this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.resetFields();\n      this.selectProcessOptDialogVisible = false;\n    },\n    selectProcessOptDialogReset() {\n      this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.resetFields();\n      Object.keys(this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.formData).forEach((key) => {\n        this.$refs.selectProcessOptDialogRef.$refs.dialogSearchForm.formData[key] = '';\n      });\n      this.newSearchType = false;\n      this.delegateSearchFromData.operatorType = 'spOperator';\n      this.$nextTick(() => {\n        this.delegateRoleSearchFormData.roleName = '';\n        this.selectProcessOptDialogTable.isSearch = true;\n      });\n    },\n    comfirmselectProcessOptHandler() {\n      if (this.selectProcessOptSingleCheck) {\n        if (Object.keys(this.tempSingleCheck).length === 0) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n        this.delegateOperatorList.splice(0);\n        this.delegateOperatorList.push(this.tempSingleCheck);\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n        this.selectProcessOptCloseDialog();\n      } else {\n        if (this.tempMultiCheck.length === 0) {\n          this.$modal.msgError('Please select at least one.');\n          return;\n        }\n        this.selectOperatorList = this.tempMultiCheck;\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n        this.selectProcessOptCloseDialog();\n      }\n    },\n    processCheckChange(val) {\n      if (val === 'role') {\n        this.tempDelegateTableCol = JSON.parse(JSON.stringify(this.selectProcessOptDialogTable.columns));\n        this.selectProcessOptDialogTable.columns = [\n          {\n            label: this.$t('TAC.myTodo.role'),\n            prop: 'roleName',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.description'),\n            prop: 'description',\n            align: 'left',\n          },\n          {\n            label: this.$t('TAC.myTodo.roleCategory'),\n            prop: 'roleCategory',\n            align: 'left',\n          },\n        ];\n        this.selectProcessOptDialogTable.getTableData = this.qeuryRoleData;\n        this.$nextTick(() => {\n          this.selectProcessOptDialogTable.isSearch = true;\n        });\n      } else {\n        this.selectProcessOptDialogTable.columns = this.tempDelegateTableCol;\n        this.selectProcessOptDialogTable.getTableData = this.getDelegateDialogData;\n        this.selectProcessOptDialogReset();\n        this.processOptSearchFrom.formData.operatorType = 'spOperator';\n        this.$nextTick(() => {\n          this.selectProcessOptDialogTable.isSearch = true;\n        });\n      }\n    },\n    singleCheckChange(val) {\n      this.tempSingleCheck = val;\n    },\n    multiCheckChange(val) {\n      this.tempMultiCheck = val;\n    },\n    getDelegateDialogData() {\n      return new Promise((resolve) => {\n        let params = {\n          operatorType: 20,\n          status: '03',\n          userName: this.delegateSearchFromData.userName,\n          firstName: this.delegateSearchFromData.firstName,\n          middleName: this.delegateSearchFromData.middleName,\n          lastName: this.delegateSearchFromData.lastName,\n          pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n          pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n        };\n        queryCurrentHandler(params).then((res) => {\n          this.selectProcessOptSearchLoading = false;\n          this.selectProcessOptDialogTable.isSearch = false;\n          if (res.header && res.header.success) {\n            res.list.forEach((item, idx) => {\n              res.list[idx].id = item.identityId;\n            });\n            res.totalRecords = res.total;\n            return resolve(res);\n          }\n        });\n      });\n    },\n    async getOrgDelegateDialogData() {\n      let params = {\n        shortCode: this.delegateSearchFromData.shortCode,\n        operatorName: this.delegateSearchFromData.userName,\n        selectType: 'operator',\n        status: '03',\n        operatorType: 30,\n        pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n        pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n      };\n      let res = await queryOrgCurrentHandler(params);\n      this.selectProcessOptSearchLoading = false;\n      this.selectProcessOptDialogTable.isSearch = false;\n      if (res.header && res.header.success) {\n        let list = res.list.map((item) => {\n          // item.userName = item.operatorName;\n          item.id = item.operatorId;\n          return item;\n        });\n        return {\n          header: res.header,\n          list,\n          totalRecords: res.totalSize,\n        };\n      }\n    },\n    removeSelected(record) {\n      this.delegateOperatorList.splice(this.delegateOperatorList.indexOf(record), 1);\n    },\n    openSingleCheckDilog() {\n      this.selectProcessOptSingleCheck = true;\n      this.selectProcessOptDialogVisible = true;\n    },\n    openMultiCheckDilog() {\n      this.selectProcessOptSingleCheck = false;\n      this.processOptSearchFrom.formData.operatorType = 'spOperator';\n      this.selectProcessOptDialogVisible = true;\n    },\n    removeSelecteOperator(record) {\n      this.selectOperatorList.splice(this.selectOperatorList.indexOf(record), 1);\n      if (this.selectOperatorList.length) {\n        this.$refs.processOptForm.validateField('selectOperatorList', () => {});\n      }\n    },\n    qeuryRoleData() {\n      let params = {\n        selectType: 'role',\n        roleName: this.delegateRoleSearchFormData.roleName,\n        roleCategory: this.delegateRoleSearchFormData.roleCategory,\n        pageNo: this.delegateDialogTable.paginationConfig.pageIndex,\n        pageSize: this.delegateDialogTable.paginationConfig.pageSize,\n      };\n      return new Promise((resolve) => {\n        queryRole(params).then((res) => {\n          this.selectProcessOptSearchLoading = false;\n          this.delegateDialogTable.isSearch = false;\n          this.selectProcessOptDialogTable.isSearch = false;\n          if (res.header && res.header.success) {\n            let tempData = res.list.map((item) => {\n              item.id = item.roleId;\n              switch (item.roleType) {\n                case '2000':\n                  item.roleCategory = 'Sp Operator';\n                  break;\n                case '3000':\n                  item.roleCategory = 'Organization Operator';\n                  break;\n                case '5000':\n                  item.roleCategory = 'Organization';\n                  break;\n                case '7000':\n                  item.roleCategory = 'GROUP';\n                  break;\n                case '8000':\n                  item.roleCategory = 'SP';\n                  break;\n                default:\n                  break;\n              }\n              return item;\n            });\n            if (this.delegateRoleSearchFormData.roleCategory) {\n              tempData = tempData.filter((item) =>\n                item.roleType.includes(this.delegateRoleSearchFormData.roleCategory)\n              );\n            }\n            resolve({\n              header: res.header,\n              list: tempData.slice(\n                (this.delegateDialogTable.paginationConfig.pageIndex - 1) *\n                  this.delegateDialogTable.paginationConfig.pageSize,\n                this.delegateDialogTable.paginationConfig.pageSize * this.delegateDialogTable.paginationConfig.pageIndex\n              ),\n              totalRecords: tempData.length,\n            });\n          }\n        });\n      });\n    },\n    resetSearch() {\n      this.$refs.searchFormRef.resetFields();\n      this.queryGroupTaskList();\n    },\n    queryGroupTaskList(pageNo = 1, pageSize = 10) {\n      this.searchTableLoading = true;\n      let tskType = '';\n      if (this.formData.taskType.length > 1) {\n        this.searchFormTaskType.some((item) => {\n          if (item.label === this.formData.taskType) {\n            tskType = item.value;\n            return true;\n          }\n        });\n      } else {\n        tskType = this.formData.taskType;\n      }\n      let params = {\n        taskId: this.formData.taskNo || '',\n        taskName: this.formData.taskName || '',\n        priority: this.formData.priority || null,\n        category: tskType,\n        status: this.formData.status || null,\n        dueTime: this.formData.dueTime || null,\n        pageNo,\n        createTimeFrom: this.formData.creationTime[0],\n        createTimeTo: this.formData.creationTime[1],\n        sortingMode: this.sortTime || 'CREATE_TIME_LATEST',\n        pageSize,\n      };\n      queryGroupTask({ taskVO: params }).then((res) => {\n        this.searchTableLoading = false;\n        this.searchLoading = false;\n        if (res.header && res.header.success) {\n          this.todoInfoList.count = res.count;\n          this.todoInfoList.todoInfoLists.splice(0);\n          res.taskDTOList.forEach((item) => {\n            let time = item.createTime.split(' ');\n            let date = time[0].split('-');\n            let createTime = date[2] + '/' + date[1] + '/' + date[0] + ' ' + time[1];\n            let eTime = item.expireTime.split(' ');\n            let expDate = eTime[0].split('-');\n            let expireTime = expDate[2] + '/' + expDate[1] + '/' + expDate[0] + ' ' + eTime[1];\n            item.title = item.taskId + '-' + item.taskName;\n            item.createTime = createTime;\n            item.expireTime = expireTime;\n            this.todoInfoList.todoInfoLists.push(item);\n          });\n        }\n      });\n    },\n    selectTaskDialogSearch() {\n      this.dialogTable.isSearch = true;\n      this.dialogTaskNameFormBtnLoading = true;\n    },\n    handleSortConditions(val) {\n      this.sortTime = val;\n      this.queryGroupTaskList();\n    },\n    handleSizeChange(val) {\n      let pageNo = val.pageIndex;\n      let pageSize = val.pageSize;\n      this.pageSize = val.pageSize;\n      this.queryGroupTaskList(pageNo, pageSize);\n    },\n    search() {\n      this.$refs.searchFormRef.validate((result) => {\n        if (result) {\n          this.searchLoading = true;\n          this.searchTableLoading = true;\n          this.queryGroupTaskList();\n        }\n      });\n    },\n    taskNameDialigSelectChange(val) {\n      this.tempTaskName = val;\n    },\n    async getTaskNameDialogData() {\n      let taskTypeCondition = '';\n      let taskTypeCodetoLabel = '';\n      this.searchFormTaskType.some((item) => {\n        if (item.value === this.taskNameSearchFormData.taskType) {\n          taskTypeCodetoLabel = item.label;\n          return true;\n        }\n      });\n      if (taskTypeCodetoLabel) {\n        if (taskTypeCodetoLabel !== 'All') {\n          if (taskTypeCodetoLabel === 'Transaction and Action') {\n            taskTypeCondition = 'TRANSATION_AND_ACTION';\n          } else {\n            taskTypeCondition = taskTypeCodetoLabel.toUpperCase().split(' ').join('_');\n          }\n        }\n      }\n      let params = {\n        taskNameCondition: this.taskNameSearchFormData.taskName,\n        taskTypeCondition,\n      };\n      let res = await queryTaskName(params);\n      this.dialogTaskNameFormBtnLoading = false;\n      this.dialogTable.isSearch = false;\n      if (res.taskTypeList && res.taskTypeList.length > 0) {\n        this.taskNameCount = res.taskTypeList.length;\n        this.taskNameHasData = false;\n        let list = res.taskTypeList.map((item) => {\n          item.taskType = item.category;\n          return item;\n        });\n        this.taskNameDialogList = list;\n        return {\n          header: { success: true },\n          list: list.slice(0, this.taskNamePageSize),\n        };\n      }\n    },\n    comfirmTaskNameHandler() {\n      if (!this.tempTaskName || !Object.keys(this.tempTaskName).length) {\n        this.$modal.msgError('Please select at least one.');\n        return;\n      }\n      this.formData.taskName = this.tempTaskName.taskName;\n      if (this.tempTaskName.taskType === 'TRANSATION_AND_ACTION') {\n        this.formData.taskType = 'Transaction and Action';\n        this.curSelectTaskNameToTaskType = 'Transaction and Action';\n      } else {\n        if (this.tempTaskName.taskType) {\n          let taskType = this.tempTaskName.taskType\n            .toLocaleLowerCase()\n            .split('_')\n            .map((item) => {\n              return item.replace(item[0], item[0].toLocaleUpperCase());\n            });\n          this.formData.taskType = taskType.join(' ');\n          this.curSelectTaskNameToTaskType = taskType.join(' ');\n        }\n      }\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.tempTaskName = null;\n      this.taskNameDialogVisible = false;\n    },\n    checkTaskChange(val) {\n      if (val.isCheck) {\n        this.checkLists.push(val);\n      } else {\n        let index = this.checkLists.findIndex((item) => {\n          return item.taskId === val.taskId;\n        });\n        this.checkLists.splice(index, 1);\n      }\n    },\n    checkProcess(val) {\n      return val.taskState !== 'Paused' && val.processFlag;\n    },\n    processing(handleData) {\n      if (handleData) {\n        if (this.checkLists.length > 0) {\n          this.tempTaskHandle = this.checkLists.splice(0);\n        }\n        this.currentData = handleData;\n        this.checkLists.push(handleData);\n        this.processOperationDialogVisible = true;\n      } else if (this.checkLists.length > 0) {\n        let checkResult = this.checkLists.map((item) => {\n          return this.checkProcess(item);\n        });\n        if (checkResult.includes(false)) {\n          this.$modal.alertWarning('Operation failed because the selected records contain records cannot be resolved');\n          return;\n        }\n        if (this.checkLists.length > 1) {\n          let isSameTypeList = [];\n          this.checkLists.reduce((pre, cur) => {\n            if (pre.taskType === cur.taskType) {\n              isSameTypeList.push(true);\n            } else {\n              isSameTypeList.push(false);\n            }\n            return cur;\n          });\n          if (isSameTypeList.includes(false)) {\n            this.notificationDialogVisible = true;\n            return;\n          }\n        }\n        this.taskProcessDialogVisible = true;\n      } else {\n        this.$modal.alertWarning('Select at least one record.');\n      }\n    },\n    closeDialog() {\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.tempTaskName = null;\n      this.dialogTable.isSearch = false;\n      this.taskNameDialogVisible = false;\n    },\n    selectTaskDialogReset() {\n      this.$refs.dialogTaskNameForm.resetFields();\n      this.dialogTable.isSearch = true;\n    },\n    handleCancelClick() {\n      this.$refs.dialogProcessForm.resetFields();\n      this.taskProcessDialogVisible = false;\n      this.tempTaskHandle.forEach((item) => {\n        this.checkLists.push(item);\n      });\n    },\n    handleConfirmClick() {\n      this.$refs.dialogProcessForm.validate((result) => {\n        if (result) {\n          this.$modal\n            .confirm('', 'Are you sure to submit?', {\n              cancelButtonText: this.$t('common.button.cancel'),\n              confirmButtonText: this.$t('common.button.confirm'),\n            })\n            .then(\n              (res) => {\n                if (res === 'confirm') {\n                  let isBatch = this.checkLists.length > 1 ? true : false;\n                  let processList = this.checkLists.map((item) => {\n                    return {\n                      processId: item.processId,\n                      taskId: item.taskId,\n                    };\n                  });\n                  let actionType = this.taskProcessFormData.operation;\n                  if (actionType === 'reject') {\n                    if (this.initialSubmit) {\n                      actionType = 'backinitiator';\n                    }\n                  }\n                  batchProcess({\n                    actionType,\n                    comments: this.taskProcessFormData.remark,\n                    isBatch,\n                    processList,\n                  }).then((res) => {\n                    if (res.header && res.header.success) {\n                      this.checkLists.splice(0);\n                      this.$modal.msgSuccess('Operation succeeded.');\n                      this.taskProcessDialogVisible = false;\n                      this.queryMyToDoTaskLists();\n                    }\n                  });\n                }\n              },\n              () => {}\n            );\n        }\n      });\n    },\n    handleTaskNameSizeChange(val) {\n      let pageNo = val.pageIndex;\n      let pageSize = val.pageSize;\n      this.taskNamePageSize = val.pageSize;\n      this.$refs.taskNameTableRef.tableData = this.taskNameDialogList.slice(\n        (pageNo - 1) * this.taskNamePageSize,\n        (pageNo - 1) * this.taskNamePageSize + pageSize\n      );\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.page-header {\n  padding: 20px;\n  background-color: $base-menu-background;\n  .title {\n    height: 32px;\n    font-family: Huawei Sans;\n    font-weight: 700;\n    color: $--text_color--emphasis;\n    font-size: 24px;\n    margin-bottom: 8px;\n  }\n  .desc {\n    width: 100%;\n    font-family: Huawei Sans;\n    color: $--text_color--secondary;\n    font-size: 12px;\n  }\n}\n.page-content {\n  margin-top: 1px;\n  background-color: $base-menu-background;\n  /deep/ .org-short-code {\n    position: relative;\n  }\n}\n.dialogProcessForm {\n  padding: 0;\n}\n.cancel-button {\n  padding: 7px 15px;\n  height: 32px;\n  border-radius: 4px;\n  background-color: $base-menu-background;\n  border: 1px solid $--line_color--regular;\n  font-size: 14px;\n  color: $--text_color--strong;\n  box-sizing: border-box;\n  cursor: pointer;\n  margin-right: 8px;\n}\n.check-operator {\n  margin-top: 20px;\n  margin-left: 20px;\n  .check-label {\n    margin-bottom: 8px;\n    margin-left: 12px;\n    position: relative;\n    font-family: Huawei Sans;\n    color: $--text_color--secondary;\n    font-size: 14px;\n  }\n  .check-label::before {\n    content: '*';\n    position: absolute;\n    left: -12px;\n    top: 1px;\n    font-size: 20px;\n    color: $--status_color--error;\n  }\n  .el-radio {\n    margin-right: 20px;\n  }\n  /deep/ .el-radio__label {\n    font-family: Huawei Sans;\n    color: $--text_color--strong;\n    font-size: 14px;\n    padding-left: 9px;\n  }\n}\n.multi-select-container {\n  height: 32px;\n  background-color: $base-menu-light-background;\n  border: 1px solid;\n  border-color: $--fill_color--dark;\n  border-radius: 4px;\n  display: flex;\n  padding: 0;\n  .select-tags {\n    overflow-y: hidden;\n    overflow-x: scroll;\n    height: 100%;\n    width: 310px;\n    padding: 4px;\n    flex: 1;\n    &::-webkit-scrollbar {\n      display: none;\n    }\n    .select-scroll {\n      white-space: nowrap;\n      display: flex;\n      align-items: center;\n      /deep/ .el-tag .el-icon-close {\n        color: $--fill_color--strong;\n        &::before {\n          background-color: transparent;\n          border-radius: 0;\n          color: inherit;\n          font-size: 14px;\n          content: '\\e78d';\n        }\n      }\n      /deep/ .el-tag.el-tag--info .el-tag__close:hover {\n        color: $--text_color--secondary;\n        background-color: transparent;\n      }\n      /deep/ .el-tag,\n      .el-tag__close {\n        background-color: $--global-background_color;\n        border: none;\n        text-align: center;\n      }\n    }\n  }\n  .icon-e {\n    width: 32px;\n    line-height: 32px;\n    height: 32px;\n    text-align: center;\n    cursor: pointer;\n  }\n  .el-textarea__inner {\n    font-family: Huawei Sans;\n  }\n}\n.err-border {\n  border-color: $--status_color--error;\n}\n/deep/ .task-detail-col {\n  line-height: 32px;\n  color: $--text_color--strong;\n  font-size: 14px;\n  .el-form-item__error {\n    width: 190px;\n  }\n}\n.form-flex-container {\n  /deep/.remark {\n    .el-form-item__content {\n      height: 100%;\n    }\n  }\n}\n/deep/ .due-time {\n  .el-input__inner {\n    padding-left: 12px;\n  }\n}\n.page-dialog {\n  /deep/ .pagination-region {\n    .el-select--mini {\n      display: none;\n    }\n    .pagination__total {\n      margin-right: 18px;\n    }\n    .go-to-buttom {\n      display: none;\n    }\n    .show-title {\n      display: none;\n    }\n    .go-to-buttom {\n      display: none;\n    }\n    .el-pagination__jump {\n      display: none;\n    }\n  }\n  .dialog-footer {\n    margin-top: 20px;\n  }\n  /deep/ .process-dialog {\n    .el-dialog__header {\n      padding: 24px;\n    }\n    .el-form-item__content {\n      line-height: 32px;\n    }\n  }\n}\n/deep/ .dialog-pagination {\n  margin-top: 12px;\n  .el-select--mini {\n    display: none;\n  }\n  .pagination__total {\n    margin-right: 18px;\n  }\n  .show-title {\n    display: none;\n  }\n  .go-to-buttom {\n    display: none;\n  }\n  .el-pagination__jump {\n    display: none;\n  }\n}\n.dialogTaskNameForm {\n  padding: 0;\n  /deep/ .form-flex-bottom-line {\n    margin-bottom: 20px;\n  }\n}\n.operation-radio {\n  margin-bottom: 12px;\n}\n.test-checkbox {\n  margin-top: 12px;\n}\n.process-operation-radio {\n  margin-bottom: 8px;\n}\n</style>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=75405adf&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=75405adf&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"75405adf\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=75405adf&prod&lang=scss&scoped=true&\""],"sourceRoot":""}